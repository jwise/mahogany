dnl $Id$
dnl Process this file with autoconf to produce a configure script.

dnl ######################## Here the actual script begins ###############

AC_INIT(configure.in)
OS="${OSTYPE}"

if test "x$OS" = "x"; then
  UNAME=`uname`
  AC_MSG_ERROR("The system variable OS has not been set"
               "please set is everytime befor compiling on this system"
               "A good example for this system would be:"
               "setenv OSTYPE $UNAME        for csh as a SHELL"
               "EXPORT OSTYPE=$UNAME        for sh as SHELL"
               "please set this and restart again."
              )
fi
AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(extra/scripts)


dnl --------------------------------------------------------------------------
dnl overrides, all --with/--without options
dnl --------------------------------------------------------------------------
M_OVERRIDES_PREPARE

DEFAULT_USE_EFENCE=0
DEFAULT_USE_DMALLOC=1
DEFAULT_USE_DEBUG=1
DEFAULT_USE_PYTHON=1
DEFAULT_USE_THREADS=1
DEFAULT_USE_KDOC=0
DEFAULT_USE_DOCXX=1

M_OVERRIDES(python,python,
--with-python   use python scripting,
USE_PYTHON)

M_OVERRIDES(threads,threads,
--with-threads    link with pthread(s) library,
USE_THREADS)

M_OVERRIDES(dmalloc,dmalloc,
--with-dmalloc  use dmalloc library for debugging,
USE_DMALLOC)

M_OVERRIDES(efence,efence,
--with-efence   use ElectricFence,
USE_EFENCE)

M_OVERRIDES(debug,debug,
--with-debug    use debug info/code,
USE_DEBUG)

M_OVERRIDES(kdoc,kdoc,
--with-kdoc   use kdoc for documentation,
USE_KDOC)

M_OVERRIDES(docxx,docxx,
--with-docxx   use doc++ for documentation,
USE_DOCXX)

dnl --------------------------------------------------------------------------
dnl testing operating system and compilers
dnl --------------------------------------------------------------------------

AC_CANONICAL_HOST

dnl ###################
dnl # checks programs #
dnl ###################

dnl C-compiler checks
dnl =================
dnl use what compiler
AC_PROG_CC
dnl   defines CC with the compiler to use
dnl   defines GCC with yes if using gcc
dnl   defines GCC empty if not using gcc
dnl   defines CFLAGS

dnl does compiler support -c and -o simultaniously
AC_PROG_CC_C_O
dnl   defines NO_MINUS_C_MINUS_O if compiler does not accept 
dnl                              both switches simultaniously
dnl what is the c-preprocessor
AC_PROG_CPP
dnl   defines CPP with the c-preprocessor
dnl is -traditional needed for correct compilations
AC_PROG_GCC_TRADITIONAL
dnl   adds -traditional for gcc if needed

AC_LANG_SAVE

AC_PROG_INSTALL

dnl C++-compiler checks
dnl ===================
dnl use what compiler
AC_PROG_CXX
dnl   defines CXX with the compiler to use
dnl   defines GXX with yes if using gxx
dnl   defines GXX empty if not using gxx
dnl   defines CXXFLAGS

AC_PROG_CXX_WORKS
dnl check if the c++-compiler is working

dnl what is the C++-preprocessor
AC_PROG_CXXCPP
dnl   defines CXXCPP with the C++-preprocessor

dnl Karsten: why removing the -g flags??
CXXFLAGS=`echo "$CXXFLAGS" | sed 's/-g./ /g'`

AC_LANG_RESTORE

AC_PROG_MAKE_SET
AC_ISC_POSIX

AC_LANG_CPLUSPLUS

dnl
dnl Here we disable support for exceptions if the compiler is gcc and
dnl new enough to support it.
dnl
AC_PATH_PROG(GREP, grep)
if test "$GCC" = "yes"
then
	dnl first, for gcc set our own debug flags
	CFLAGS=`echo "$CFLAGS" | sed 's/-g//g'`
	CXXFLAGS=`echo "$CXXFLAGS" | sed 's/-g//g'`

	dnl now check for exception disabling
	AC_MSG_CHECKING(for gcc with 2.8 style options)
	CFLAGS="$CFLAGS -DCC_GCC -Wall -pedantic "
	CXXFLAGS="$CXXFLAGS -DCC_GCC -Wall -pedantic "
	newgcc=
	dnl is it gcc 2.8 or newer?
	$CXX -v 2>&1 | $GREP 2.8 >/dev/null
	if test $? = 0 ; then newgcc=yes ; fi
	dnl is it egcs?
	$CXX -v 2>&1 | $GREP egcs >/dev/null
	if test $? = 0 ; then newgcc=yes ; fi
	dnl or is it pgcc?
	$CXX -v 2>&1 | $GREP pgcc >/dev/null
	if test $? = 0 ; then newgcc=yes ; fi
	if test "x$newgcc" = "xyes"
	then
		CXXFLAGS="$CXXFLAGS -fno-exceptions "
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
	fi
fi

dnl --------------------------------------------------------------------------
dnl add our extra directories to the search path
dnl --------------------------------------------------------------------------

dnl set the top level directory
BUILDDIR=`pwd`
AC_SUBST(BUILDDIR)

dnl set the extra include and lib directories
LDFLAGS="$LDFLAGS -L$BUILDDIR/extra/lib"
CPPFLAGS="$CPPFLAGS -D__WXGTK__ -I$BUILDDIR/extra/include"

dnl add all extra/src directories to the search paths
EXTRA_SRC_LIB=
EXTRA_SRC_INC=
for i in `pwd`/extra/src/*
do
	LIBS="$LIBS -L$i"
	CPPFLAGS="$CPPFLAGS -I$i"
done

dnl --------------------------------------------------------------------------
dnl check for featurs and functions
dnl --------------------------------------------------------------------------

dnl we use C++ so we always have prototypes - Python.h needs this
AC_DEFINE(HAVE_PROTOTYPES)

dnl used by python
works=no
AC_MSG_CHECKING(for variable length prototypes and stdarg.h)
AC_TRY_COMPILE([
#include <stdarg.h>
int foo(int x, ...) {
	va_list va;
	va_start(va, x);
	va_arg(va, int);
	va_arg(va, char *);
	va_arg(va, double);
	return 0;
}
], [return foo(10, "", 3.14);],
AC_DEFINE(HAVE_STDARG_PROTOTYPES) works=yes)
AC_MSG_RESULT($works)

if test "$have_prototypes" = yes; then
	bad_prototypes=no
	AC_MSG_CHECKING(for bad exec* prototypes)
	AC_TRY_COMPILE([#include <unistd.h>], [char **t;execve("@",t,t);], ,
	AC_DEFINE(BAD_EXEC_PROTOTYPES) bad_prototypes=yes)
	AC_MSG_RESULT($bad_prototypes)
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_CHECK_FUNCS(strerror strstr strsep)

dnl --------------------------------------------------------------------------
dnl check for header files
dnl --------------------------------------------------------------------------

AC_CHECK_HEADERS(strings.h unistd.h stdlib.h stdarg.h)
dnl no longer testing for compface.h because it is included with M

dnl --------------------------------------------------------------------------
dnl check for the overridable options
dnl --------------------------------------------------------------------------

dnl memory debug libraries get tested last to make sure they are linked last

dnl electric fence
if test "$USE_EFENCE" = 1; then
	AC_CHECK_LIB(efence,main,LIB_EFENCE="-lefence",AC_MSG_WARN("efence library configured but not available."))
fi

dnl dmalloc debugging lib
if test "$USE_DMALLOC" = 1; then
	AC_CHECK_LIB(dmalloc,main,LIB_DMALLOC="-ldmalloc",AC_MSG_WARN("dmalloc library configured but not available."))
fi

if test "$USE_THREADS" = 1
then
	AC_CHECK_LIB(pthread,main,,AC_CHECK_LIB(pthreads,main))
fi

dnl set debug/optimisation flags
DBGFLAGS=
if test "$USE_DEBUG" = 1; then
	if test "$GCC" = "yes"
	then
		DBGFLAGS="-O0 -g3 -DDEBUG -D__WXDEBUG__"
	else
		DBGFLAGS="-g -DDEBUG -D__WXDEBUG__"
	fi
fi


dnl kdoc/docxx have their own section further down

dnl --------------------------------------------------------------------------
dnl check for other libraries
dnl --------------------------------------------------------------------------

dnl we might need dl (depending on wxGTK config), so link with it if
dnl it is available 
AC_CHECK_LIB(dl,main,,AC_MSG_WARN("dl library might be needed."))


dnl c-client library needs the crypt() function which is either in the 
dnl c library or in libcrypt
AC_CHECK_LIB(c,crypt,,
	AC_CHECK_LIB(crypt,crypt,,AC_MSG_ERROR("Cannot find crypt function.")))

dnl If we have a libshadow, link with it. I am not sure whether we
dnl really need this.
AC_CHECK_LIB(shadow,main)

dnl Gettext() support, if we have libintl.h check for the existence of 
dnl the gettext() function in either libc or libintl and set LIBS and
dnl define accordingly.
AC_CHECK_HEADERS(libintl.h,
	AC_CHECK_LIB(c,gettext,AC_DEFINE(HAVE_GETTEXT),
		AC_CHECK_LIB(intl,gettext,AC_DEFINE(HAVE_GETTEXT) LIBS="$LIBS -lintl")
	)
)


dnl --------------------------------------------------------------------------
dnl check for python ( a bit lengthy thanks to its stupid installation)
dnl --------------------------------------------------------------------------

MAKE_USE_PYTHON=
MAKE_USE_SWIG=
PYTHON_LIBS=
if test "$USE_PYTHON" = 1 ; then
   M_CHECK_MYHEADER(Python.h,
       [ /usr \
         /usr/include \
         /usr/include/python1.5 \
         /usr/local \
         /usr/local/include \
         /usr/local/include/python1.5 \
         /home/local \
         /home/local/include \
         /home/local/include/python1.5 \
       ],
       [ M_CHECK_MYLIB(python1.5,main,
           [ /usr \
             /usr/lib \
             /usr/lib/python1.5 \
             /usr/lib/python1.5/config \
             /usr/local \
             /usr/local/lib \
             /usr/local/lib/python1.5 \
             /usr/local/lib/python1.5/config \
             /usr/local/python1.5/config\
             /home/local \
             /home/local/lib \
             /home/local/lib/python1.5 \
             /home/local/lib/python1.5/config \
             /home/local/python1.5/config\
           ],
             [ AC_DEFINE(USE_PYTHON)
               MAKE_USE_PYTHON="USE_PYTHON=yes"
#               AC_CHECK_LIB(swigpy,main,
#             [  AC_DEFINE(HAVE_SWIGLIB)
#                PYTHON_LIBS="$libpath_python1_5_main -lpython1.5 -lswigpy"
#              ],
#              [ AC_MSG_WARN("Cannot find SWIG library for python - trying anyway.")
                PYTHON_LIBS="$libpath_python1_5_main -lpython1.5"
#              ],
#              [$libpath_python1_5_main -lpython1.5]
#             )
           ]
         )
       ]
   )
   AC_PATH_PROG(SWIG,swig)
   if test "x$SWIG" != "x"
   then
	MAKE_USE_SWIG="USE_SWIG=yes"
   fi
fi
AC_SUBST(MAKE_USE_PYTHON)
AC_SUBST(MAKE_USE_SWIG)


dnl --------------------------------------------------------------------------
dnl check for (wx)gtk libraries
dnl --------------------------------------------------------------------------

dnl check for wx-config
AC_PATH_PROG(WX_CONFIG,wx-config)
if test "x$WX_CONFIG" != "x"
then
	GTK_CFLAGS=`$WX_CONFIG --cflags`
	GTK_LDFLAGS=`$WX_CONFIG --libs`
else
	dnl check for gtk-config
	AC_PATH_PROG(GTK_CONFIG,gtk-config,yes,no)
	dnl we don't set the LIBS directly as libwx_gtk might break other
	dnl checks thanks to its included main() function
	if test "$GTK_CONFIG" = yes
	then
		GTK_CFLAGS=`gtk-config --cflags`
		GTK_LDFLAGS=`gtk-config --libs`
	else
		dnl find the X11 include and library files -- our best guess
		AC_PATH_XTRA
		GTK_CFLAGS="$X_CFLAGS"
		GTK_LDFLAGS="-lgtk -lgdk -lglib $X_EXTRA_LIBS"
	fi
fi

CPPFLAGS="$CPPFLAGS $GTK_CFLAGS"
dnl only now can we check for wx.h because it would fail without the
dnl gtk headers
AC_CHECK_HEADERS(wx/wx.h,,AC_MSG_ERROR("Cannot find wx/wx.h header file."))

dnl We do not explicitly check for all the gtk/gdk/glib libraries. If
dnl they are not installed, the test for wx_gtk will fail anyway.

AC_CHECK_LIB(wx_gtk,main,,AC_MSG_ERROR("wx_gtk library is required."),$GTK_LDFLAGS)

dnl --------------------------------------------------------------------------
dnl c-client library: set the proper OSTYPE and compiler variables
dnl --------------------------------------------------------------------------

dnl we need to set the target for c-client library:

AC_MSG_CHECKING(for c-client library OS type)
CCOSTYPE=
case "${OSTYPE}" in
linux*)
  CCOSTYPE=slx
  ;;
solaris*|SunOS*)
  if test "$GCC" = "yes"
  then
    CCOSTYPE=gso
  else
    CCOSTYPE=sol
  fi
  ;;
freebsd*)
  CCOSTYPE=bsf
  ;;
OSF1*)
  if test "$GCC" = "yes"
  then
    CCOSTYPE=gof
  else
    CCOSTYPE=osf
  fi
  ;;
esac

AC_MSG_RESULT($CCOSTYPE)
if test "x$CCOSTYPE" = "x" ; then
	AC_MSG_ERROR("Cannot determine OS type for c-client library.")
fi
AC_SUBST(CCOSTYPE)

dnl --------------------------------------------------------------------------
dnl set up generators for class documentation
dnl --------------------------------------------------------------------------

DOCHTML="echo \"No doc generator(html) available.\""
DOCTEX="echo \"No doc generator(tex) available.\""

dnl test for doc++ if selected
if test "$USE_DOCXX" = 1
then
	AC_PATH_PROG(DOCXX,docxx,yes,no)
	if test "x$DOCXX" = "x"
	then
		USE_KDOC=1
	else
		DOCHTML="\$(DOCXXHTML)"
		DOCTEX="\$(DOCXXTEX)"
	fi
fi

dnl test for kdoc if selected
if test "$USE_KDOC" = 1
then
	AC_PATH_PROG(KDOC,kdoc,yes,no)
	if test "x$KDOC" = "x"
	then
		dnl without kdoc, fall back to doc++ if available
		AC_PATH_PROG(DOCXX,docxx,yes,no)
		if test "x$DOCXX" != "x"
		then
			DOCHTML="\$(DOCXXHTML)"
			DOCTEX="\$(DOCXXTEX)"
		fi
	else
		DOCHTML="\$(KDOCHTML)"
		DOCTEX="\$(KDOCTEX)"
	fi
fi
AC_SUBST(DOCHTML)
AC_SUBST(DOCTEX)

dnl check for latex/dvips

AC_PATH_PROG(LATEX,latex)
AC_PATH_PROG(dvips,dvips)
if test "x$LATEX" = x -o "x$DVIPS" = x
then
	LATEX="echo \"No latex available.\""
	DVIPS="echo \"No dvips available.\""
	AC_SUBST(LATEX)
	AC_SUBST(DVIPS)
fi

dnl --------------------------------------------------------------------------
dnl final settings, concatenation of args, etc
dnl --------------------------------------------------------------------------

dnl just a file where to dump some unneeded code in the python dir
MAKE_LOCAL_LIBS_DEFINE="junk"

dnl compface is included in M source
LIBS="$LIBS -lcompface"

dnl add other flags
LIBS="$LIBS $PYTHON_LIBS $GTK_LDFLAGS $LIB_EFENCE $LIB_DMALLOC"
CXXFLAGS="$CXXFLAGS $DBGFLAGS"
CFLAGS="$CFLAGS $DBGFLAGS"


AC_OUTPUT(makeopts)
