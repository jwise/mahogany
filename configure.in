dnl $Id$
dnl Process this file with autoconf to produce a configure script.

dnl ######################## Here the actual script begins ###############

AC_INIT(configure.in)
OS="${OSTYPE}"

if test "x$OS" = "x"; then
  UNAME=`uname`
  AC_MSG_ERROR("The system variable OS has not been set"
               "please set is everytime befor compiling on this system"
               "A good example for this system would be:"
               "setenv OSTYPE $UNAME        for csh as a SHELL"
               "EXPORT OSTYPE=$UNAME        for sh as SHELL"
               "please set this and restart again."
              )
fi
AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(extra/scripts)


M_OVERRIDES_PREPARE

DEFAULT_USE_EFENCE=0
DEFAULT_USE_DMALLOC=1
DEFAULT_USE_DEBUG=1
DEFAULT_USE_PYTHON=1
DEFAULT_USE_THREADS=1

M_OVERRIDES(python,python,
--with-python   use python scripting,
USE_PYTHON)

M_OVERRIDES(threads,threads,
--with-threads    link with pthread(s) library,
USE_THREADS)

M_OVERRIDES(dmalloc,dmalloc,
--with-dmalloc  use dmalloc library for debugging,
USE_DMALLOC)

M_OVERRIDES(efence,efence,
--with-efence   use ElectricFence,
USE_EFENCE)

M_OVERRIDES(debug,debug,
--with-debug    use debug info/code,
USE_DEBUG)

MAKE_LOCAL_LIBS_DEFINE="junk"

dnl system check

AC_CANONICAL_HOST

dnl ###################
dnl # checks programs #
dnl ###################

dnl C-compiler checks
dnl =================
dnl use what compiler
AC_PROG_CC
dnl   defines CC with the compiler to use
dnl   defines GCC with yes if using gcc
dnl   defines GCC empty if not using gcc
dnl   defines CFLAGS

dnl does compiler support -c and -o simultaniously
AC_PROG_CC_C_O
dnl   defines NO_MINUS_C_MINUS_O if compiler does not accept 
dnl                              both switches simultaniously
dnl what is the c-preprocessor
AC_PROG_CPP
dnl   defines CPP with the c-preprocessor
dnl is -traditional needed for correct compilations
AC_PROG_GCC_TRADITIONAL
dnl   adds -traditional for gcc if needed

AC_LANG_SAVE

AC_PROG_INSTALL

dnl C++-compiler checks
dnl ===================
dnl use what compiler
AC_PROG_CXX
dnl   defines CXX with the compiler to use
dnl   defines GXX with yes if using gxx
dnl   defines GXX empty if not using gxx
dnl   defines CXXFLAGS

AC_PROG_CXX_WORKS
dnl check if the c++-compiler is working

dnl what is the C++-preprocessor
AC_PROG_CXXCPP
dnl   defines CXXCPP with the C++-preprocessor

dnl Karsten: why removing the -g flags??
CXXFLAGS=`echo "$CXXFLAGS" | sed 's/-g./ /g'`

AC_LANG_RESTORE

AC_PROG_MAKE_SET
AC_ISC_POSIX

AC_LANG_CPLUSPLUS

AC_PATH_PROG(GREP, grep)
dnl this should be done for GXX, but we assume CC and CXX to be the same
CFLAGS=`echo "$CFLAGS" | sed 's/-g//g'`
if test "$GCC" = "yes"
then
	AC_MSG_CHECKING(for new gcc or egcs)
	CFLAGS="$CFLAGS -DCC_GCC -Wall -pedantic "
	CXXFLAGS="$CXXFLAGS -DCC_GCC -Wall -pedantic "
	newgcc=
	$CC -v 2>&1 | $GREP 2.8 >/dev/null
	if test $? = 0 ; then newgcc=yes ; fi
	$CC -v 2>&1 | $GREP egcs >/dev/null
	if test $? = 0 ; then newgcc=yes ; fi
	if test "x$newgcc" = "xyes"
	then
		CFLAGS="$CFLAGS -fno-exceptions "
		CXXFLAGS="$CXXFLAGS -fno-exceptions "
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
	fi
fi

dnl some extra paths
BUILDDIR=`pwd`
AC_SUBST(BUILDDIR)
LDFLAGS="$LDFLAGS -L$BUILDDIR/extra/lib"
CPPFLAGS="$CPPFLAGS -D__WXGTK__ -I$BUILDDIR/extra/include"


dnl we use C++ so we always have prototypes
AC_DEFINE(HAVE_PROTOTYPES)

works=no
AC_MSG_CHECKING(for variable length prototypes and stdarg.h)
AC_TRY_COMPILE([
#include <stdarg.h>
int foo(int x, ...) {
	va_list va;
	va_start(va, x);
	va_arg(va, int);
	va_arg(va, char *);
	va_arg(va, double);
	return 0;
}
], [return foo(10, "", 3.14);],
AC_DEFINE(HAVE_STDARG_PROTOTYPES) works=yes)
AC_MSG_RESULT($works)

if test "$have_prototypes" = yes; then
bad_prototypes=no
AC_MSG_CHECKING(for bad exec* prototypes)
AC_TRY_COMPILE([#include <unistd.h>], [char **t;execve("@",t,t);], ,
	AC_DEFINE(BAD_EXEC_PROTOTYPES) bad_prototypes=yes)
AC_MSG_RESULT($bad_prototypes)
fi

if test "$USE_WXSTRING" = 1; then
  AC_DEFINE(USE_WXSTRING)
fi

if test "$USE_WXCONFIG" = 1; then
  AC_DEFINE(USE_WXCONFIG)
fi


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_CHECK_FUNCS(strerror strstr strsep)

AC_CHECK_HEADERS(strings.h unistd.h)
AC_CHECK_HEADERS(stdlib.h)
AC_CHECK_HEADERS(stdarg.h)


dnl extra lib dirs
EXTRA_SRC_LIB=
EXTRA_SRC_INC=
for i in `pwd`/extra/src/*
do
	LIBS="$LIBS -L$i"
	CPPFLAGS="$CPPFLAGS -I$i"
done

dnl electric fence
if test "$USE_EFENCE" = 1; then
	AC_CHECK_LIB(efence,main,,AC_MSG_WARN("efence library configured but not available."))
fi

dnl dmalloc debugging lib
if test "$USE_DMALLOC" = 1; then
	AC_CHECK_LIB(dmalloc,main,,AC_MSG_WARN("dmalloc library configured but not available."))
fi




AC_CHECK_LIB(dl,main,,AC_MSG_WARN("dl library might be needed."))

if test "$USE_THREADS" = 1
then
	AC_CHECK_LIB(pthread,main,,AC_CHECK_LIB(pthreads,main))
fi


AC_CHECK_LIB(c,crypt,,AC_CHECK_LIB(crypt,crypt,,AC_MSG_ERROR("Cannot find crypt function.")))

dnl do we need this?
AC_CHECK_LIB(shadow,main)

AC_CHECK_HEADERS(libintl.h,
	AC_CHECK_LIB(c,gettext,AC_DEFINE(HAVE_GETTEXT),
		AC_CHECK_LIB(intl,gettext,AC_DEFINE(HAVE_GETTEXT) LIBS="$LIBS -lintl")
	)
)

MAKE_USE_PYTHON=

if test "$USE_PYTHON" = 1 ; then
   M_CHECK_MYHEADER(Python.h,
       [ /usr \
         /usr/include \
         /usr/include/python1.5 \
         /usr/local \
         /usr/local/include \
         /usr/local/include/python1.5 \
         /home/local \
         /home/local/include \
         /home/local/include/python1.5 \
       ],
       [ M_CHECK_MYLIB(python1.5,main,
           [ /usr \
             /usr/lib \
             /usr/lib/python1.5 \
             /usr/lib/python1.5/config \
             /usr/local \
             /usr/local/lib \
             /usr/local/lib/python1.5 \
             /usr/local/lib/python1.5/config \
             /usr/local/python1.5/config\
             /home/local \
             /home/local/lib \
             /home/local/lib/python1.5 \
             /home/local/lib/python1.5/config \
             /home/local/python1.5/config\
           ],
           [ AC_CHECK_LIB(swigpy,main,
              [ AC_DEFINE(USE_PYTHON)
                MAKE_USE_PYTHON="USE_PYTHON=yes"
                LIBS="$libpath_python1_5_main -lpython1.5 -lswigpy $LIBS"
              ],
              [ AC_MSG_WARN("Cannot find SWIG library for python - disabling python.")
                MAKE_USE_PYTHON=
              ],
              [$libpath_python1_5_main -lpython1.5]
             )
           ]
         )
       ]
   )
   AC_PATH_PROG(SWIG,swig)
fi
AC_SUBST(MAKE_USE_PYTHON)

AC_CHECK_HEADERS(compface.h)

dnl check for gtk libraries
dnl This must be the last library check, as wxGTK defines a main() function
dnl which will break all further attemps to test for main() in a library!
AC_PATH_PROG(GTK_CONFIG,gtk-config,yes,no)
if test "$GTK_CONFIG" = yes
then
	GTK_CFLAGS=`gtk-config --cflags`
	GTK_LDFLAGS=`gtk-config --libs`
else
	dnl find the X11 include and library files
	AC_PATH_XTRA
	GTK_CFLAGS=$X_CFLAGS
	GTK_LDFLAGS=$X_EXTRA_LIBS
fi
LIBS="$LIBS $GTK_LDFLAGS"
CXXFLAGS="$CXXFLAGS $GTK_CFLAGS"
CFLAGS="$CFLAGS $GTK_CFLAGS"

AC_CHECK_HEADERS(wx/wx.h)
AC_CHECK_LIB(wx_gtk,main,,AC_MSG_ERROR("wx_gtk library is required."))

dnl set debug/optimisation flags
dnl we don't use CFLAGS/CXXFLAGS from autoconf
DBGFLAGS=
if test "$USE_DEBUG" = 1; then
	DBGFLAGS="-O0 -g3 -DDEBUG"
fi
AC_SUBST(DBGFLAGS)

dnl we need to set the target for c-client library:
dnl supported OSTYPE values are linux* and solaris* and freebsd*

AC_MSG_CHECKING(for c-client library OS type)
CCOSTYPE=
case "${OSTYPE}" in
linux*)
  CCOSTYPE=slx
  ;;
solaris*)
  if test "$GCC" = "yes"
  then
    CCOSTYPE=gso
  else
    CCOSTYPE=sol
  fi
  ;;
freebsd*)
  CCOSTYPE=bsf
  ;;
OSF1*)
  if test "$GCC" = "yes"
  then
    CCOSTYPE=gof
  else
    CCOSTYPE=osf
  fi
  ;;
esac

AC_MSG_RESULT($CCOSTYPE)
if test "x$CCOSTYPE" = "x" ; then
  echo "Cannot determine OS type for c-client library. Supported are linux, solaris, freebsd."
  exit 1
fi
AC_SUBST(CCOSTYPE)


DOCHTML="echo \"No doc generator(html) available.\""
DOCTEX="echo \"No doc generator(tex) available.\""

AC_PATH_PROG(DOCXX,docxx,yes,no)
if test "x$DOCXX" = "x"
then
	AC_PATH_PROG(KDOC,kdoc,yes,no)
	if test "x$KDOC" != "x"
	then
		DOCHTML="\$(KDOCHTML)"
		DOCTEX="\$(KDOCTEX)"
	fi
else
	DOCHTML="\$(DOCXXHTML)"
	DOCTEX="\$(DOCXXTEX)"
fi
AC_SUBST(DOCHTML)
AC_SUBST(DOCTEX)

dnl compface is included in M source
LIBS="$LIBS -lcompface"
AC_OUTPUT(makeopts)
