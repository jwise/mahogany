dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AC_REVISION([$Id$])

rm -f conftestdata
if ln -s X conftestdata 2>/dev/null
then	rm -f conftestdata
else	AC_MSG_ERROR([Sorry, this build system will not work on a
	system without symbolic links.  It depends on the ability
	to create links to directories, so this is not something
	that can be worked around.])
fi

dnl OSTYPE may be set by the user to override the default which is just uname
if test "x$OSTYPE" = "x"; then
        OSTYPE=`uname`
fi

echo ""
echo "*** Configuring Mahogany for $OSTYPE ***"
echo ""

AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(extra/scripts)
### HACK: unfortunately, the Makefiles in subdirectories can use this
### install program without qualification.  We really shouldn't do it
### this way, but we force the install-sh found here to be a full path.
case "$ac_install_sh" in
/*)	;;
../*)	ac_install_sh=`cd .; exec pwd``expr "$ac_install_sh" : '\.\.\(.*\)'` ;;
*)	ac_install_sh=`cd $srcdir; exec pwd`/$ac_install_sh ;;
esac

dnl --------------------------------------------------------------------------
dnl Mahogany parameter evaluation
dnl Usage: M_OVERRIDES(package,message,variable,default,help)
dnl --------------------------------------------------------------------------

M_OVERRIDES(opt,optimization,USE_OPT,1,
--disable-opt           no compiler optimisations - may not be effective)

M_OVERRIDES(debug,debug code,USE_DEBUG,0,
--with-debug            compile debug code)

M_OVERRIDES(debuginfo,debuging info,USE_DEBUG_INFO,0,
--with-debuginfo        include debug info from compiler)

M_OVERRIDES(wxdebug,wxWin debug libs,USE_WXDEBUG,0,
--with-wxdebug          use debug wxWindows libraries)

M_OVERRIDES(dmalloc,dmalloc library,USE_DMALLOC,0,
--with-dmalloc          use dmalloc library for debugging)

M_OVERRIDES(leaktracer,LeakTracer,USE_LEAKTRACER,0,
--with-leaktracer       use LeakTracer for debugging)

M_OVERRIDES(efence,ElectricFence,USE_EFENCE,0,
--with-efence           use ElectricFence for debugging)

M_OVERRIDES(prof,profiling,USE_PROFILER,0,
--with-prof             generate profiling code)

M_OVERRIDES(strict,strict compiler options,USE_STRICT,0,
--with-strict           strict compiler flags - may not work on all systems)

M_OVERRIDES(nls,i18n support,USE_I18N,1,
--disable-nls           no internationalization support)

M_OVERRIDES(python,Python scripting,USE_PYTHON,static,
--with-python=xxx       one of none/static/dynamic)

M_OVERRIDES(experimental,experimental code,USE_EXPERIMENTAL,0,
--with-experimental     compile experimental code)

M_OVERRIDES(threads,multi-threading,USE_THREADS,0,
--with-threads          multi-threaded version (EXPERIMENTAL))

M_OVERRIDES(ccostype,c-client OS type,USE_CCOSTYPE,,
--with-ccostype=xxx     use OS type xxx for c-client compilation)

M_OVERRIDES(modules,modules,USE_MODULES,auto,
--with-modules=xxx      one of none/static/dynamic)

M_OVERRIDES(ssl,SSL support,USE_SSL,1,
--with-ssl=DIR          path to SSL directories (requires OpenSSL))

AC_MSG_CHECKING(for install location)
case "$prefix" in
NONE)	AC_CACHE_VAL(m_cv_prefix,m_cv_prefix=$ac_default_prefix);;
*)	m_cv_prefix=$prefix ;;
esac
AC_MSG_RESULT($m_cv_prefix)
case "$m_cv_prefix" in /*) ;; *)
	AC_MSG_WARN([--prefix=$prefix must be an absolute path name, using $ac_default_prefix])
	m_cv_prefix=$ac_default_prefix
esac
prefix=$m_cv_prefix

AM_OPTIONS_WXCONFIG

dnl save parameter settings in case stuff below aborts
AC_CACHE_SAVE

dnl --------------------------------------------------------------------------
dnl testing operating system and compilers
dnl --------------------------------------------------------------------------

AC_CANONICAL_HOST
dnl setting the OS type for information
AC_DEFINE_UNQUOTED(M_CANONICAL_HOST,"$host")
AC_DEFINE_UNQUOTED(M_OSINFO,"`uname -s -r -m`")
AC_DEFINE_UNQUOTED(M_PREFIX,"$prefix")

dnl set the top level directories
dnl use "exec pwd" to avoid shell built-in
dnl use "cd ." so FreeBSD shell will fork subshell
SOURCEDIR=`cd $srcdir; exec pwd`
AC_SUBST(SOURCEDIR)
AC_DEFINE_UNQUOTED(M_TOP_SOURCEDIR, "$SOURCEDIR")
BUILDDIR=`cd .; exec pwd`
AC_SUBST(BUILDDIR)
AC_DEFINE_UNQUOTED(M_TOP_BUILDDIR, "$BUILDDIR")

dnl instead of invoking subsidary configures, we accumulate the flags
dnl here for some third-party sources, since they would otherwise have
dnl to repeat much of the same logic just to set a few compiler flags.
IMAP_CPPFLAGS="${CPPFLAGS}"
IMAP_CFLAGS="${CFLAGS}"
IMAP_CXXFLAGS="${CXXFLAGS}"
AC_SUBST(IMAP_CPPFLAGS) AC_SUBST(IMAP_CFLAGS) AC_SUBST(IMAP_CXXFLAGS)
CFACE_CPPFLAGS="${CPPFLAGS}"
CFACE_CFLAGS="${CFLAGS}"
CFACE_CXXFLAGS="${CXXFLAGS}"
AC_SUBST(CFACE_CPPFLAGS) AC_SUBST(CFACE_CFLAGS) AC_SUBST(CFACE_CXXFLAGS)
LIBMAL_CPPFLAGS="${CPPFLAGS}"
LIBMAL_CFLAGS="${CFLAGS}"
LIBMAL_CXXFLAGS="${CXXFLAGS}"
AC_SUBST(LIBMAL_CPPFLAGS) AC_SUBST(LIBMAL_CFLAGS) AC_SUBST(LIBMAL_CXXFLAGS)

dnl C-compiler checks
dnl =================

dnl use what compiler?
CFLAGS=${CFLAGS=}	# magic incantation so CFLAGS not set by AC_PROG_CC
AC_PROG_CC
dnl   defines CC with the compiler to use
dnl   defines GCC with yes if using gcc, else empty
dnl   defines CFLAGS

dnl fixups for UNIX variants
AC_ISC_POSIX

dnl does compiler support -c and -o simultaniously?
dnl   defines NO_MINUS_C_MINUS_O if compiler does not accept 
dnl                              both switches simultaniously
AC_PROG_CC_C_O
# I dislike delving so deeply into autoconf's internal values, but this
# seems to be the only accurate way of finding out what it determined.
case `eval echo '$'{ac_cv_prog_cc_${ac_cc}_c_o}` in yes) ;; *)
	AC_MSG_ERROR([Sorry, this capability is used extensively by the build
	system, including third-party code that we do not control.  You'll
	have to use a compiler that supports this.]) ;;
esac

dnl disable support for exceptions if the compiler is gcc and
dnl new enough to support it.
case "$GCC" in yes)
	AC_CACHE_CHECK(whether ${CC-gcc} accepts -fno-exceptions,
		m_cv_gcc_exceptions,
		[echo 'void f(){}' >conftest.c
		case "`${CC-cc} -fno-exceptions -c conftest.c 2>&1`" in
		'')	m_cv_gcc_exceptions=yes ;;
		*)	m_cv_gcc_exceptions=no ;;
		esac
		rm -f conftest*])
	case "$m_cv_gcc_exceptions" in yes)
		CFLAGS="$CFLAGS -fno-exceptions"
	esac
dnl	CFLAGS="$CFLAGS -DCC_GCC -Wall "
esac

dnl how to generate dependencies...
dnl for now, we just support -MD on gcc
dnl NOTICE: this only looks at #include "xxx.h" -- NOT <xxx.h> !!
case "$GCC" in yes)
	CFLAGS="$CFLAGS -MMD"
esac

dnl what is the c-preprocessor?
AC_PROG_CPP
dnl   defines CPP with the c-preprocessor

dnl is -traditional needed for correct compilations?
AC_PROG_GCC_TRADITIONAL
dnl   adds -traditional for gcc if needed

dnl Checks for compiler characteristics.
AC_C_CONST
AC_C_INLINE

dnl C++-compiler checks
dnl ===================

AC_LANG_CPLUSPLUS

dnl use what compiler?
CXXFLAGS=${CXXFLAGS=}	# magic incantation so CXXFLAGS not set by AC_PROG_CXX
AC_PROG_CXX
dnl   defines CXX with the compiler to use
dnl   defines GXX with yes if using gxx, else empty
dnl   defines CXXFLAGS

dnl disable support for exceptions if the compiler is g++ and
dnl new enough to support it.
case "$GXX" in yes)
	AC_CACHE_CHECK(whether ${CXX-g++} accepts -fno-exceptions,
		m_cv_gxx_exceptions,
		[echo 'void f(){}' >conftest.cc
		case "`${CXX-g++} -fno-exceptions -c conftest.cc 2>&1`" in
		'')	m_cv_gxx_exceptions=yes ;;
		*)	m_cv_gxx_exceptions=no ;;
		esac
		rm -f conftest*])
	case "$m_cv_gxx_exceptions" in yes)
		CXXFLAGS="$CXXFLAGS -fno-exceptions"
	esac
esac

dnl check whether the C++ supports the new logical operator names
dnl c-client library uses some of them as field names
AC_CACHE_CHECK(if ${CXX} supports logical operator names,
	m_cv_cxx_opernames,
	[echo 'int f(int a, int b){return not a or b;}' >conftest.cc
	if ${CXX} -c conftest.cc >/dev/null 2>&1
	then	m_cv_cxx_opernames=yes
	else	m_cv_cxx_opernames=no
	fi
	rm -f conftest*])

dnl really a subroutine to avoid nesting source lines too deeply
AC_DEFUN([M_OPER_NAMES],
[AC_CACHE_CHECK(if logical operator names can be disabled,
	m_cv_cxx_disableopernames,
	[case "$GXX" in
	yes)	echo 'void f(){}' >conftest.cc
		case "`${CXX-g++} -c -fno-operator-names conftest.cc 2>&1`" in
		'')	m_cv_cxx_disableopernames="-fno-operator-names"
		esac
		rm -f conftest* ;;
	esac
	### other tests here???
	case "$m_cv_cxx_disableopernames" in '')
		m_cv_cxx_disableopernames="none supported"
	esac])])

dnl really a subroutine to avoid nesting source lines too deeply
AC_DEFUN([M_GCC_BUGGY_NO_OPERATOR_NAMES],
[AC_CACHE_CHECK(if disabling the logical operator names works,
	m_cv_gcc_buggy_fno_operator_names,
	[case "$GCC" in
	yes)	echo '#define TEST 1
#if defined(TEST)
#undef TEST
#endif' >conftest.cc
		case "`${CXX-g++} -c -fno-operator-names conftest.cc 2>&1`" in
		'')	m_cv_gcc_buggy_fno_operator_names="no" ;;
		*)  m_cv_gcc_buggy_fno_operator_names="yes" ;;
		esac
		rm -f conftest* ;;
	esac])])

dnl if the compiler treats "or" and "not" as keywords, we must to get a
dnl workaround for compiling the c-client header files
case "$m_cv_cxx_opernames" in yes)
	dnl check whether is possible to redefine the logical operator
	dnl names.  cclient headers will not compile if the compiler
	dnl understands them as keywords.
	AC_CACHE_CHECK(if ${CXX} can redefine logical operator names,
		m_cv_cxx_redefineopernames,
		[echo '#define or m_or' >conftest.cc
		if ${CXX} -c conftest.cc >/dev/null 2>&1
		then	m_cv_cxx_redefineopernames=yes
		else	m_cv_cxx_redefineopernames=no
		fi
		rm -f conftest*])
	dnl if the operator names can't be redefined try to check
	dnl whether the compiler accepts some flag to disable them
	case "$m_cv_cxx_redefineopernames" in
	yes)	AC_DEFINE(M_LOGICAL_OP_NAMES) ;;
	no)	M_OPER_NAMES
		case "$m_cv_cxx_disableopernames" in
		"none supported") dnl Houston, we have a problem
	AC_MSG_ERROR([Sorry, the c-client library used by Mahogany uses some
	names which your compiler treats as keywords (the new logical
	operator names: and, or, not, etc.).  We currently don't know a
	workaround for your compiler.  If it does accept some flag for
	disabling them, please go to http://mahogany.sourceforge.net/bugz
	and submit a bug against the Build component telling us which
	flag will work.]) ;;
		*) M_GCC_BUGGY_NO_OPERATOR_NAMES
			case "$m_cv_gcc_buggy_fno_operator_names" in
			yes)
			if test -f /etc/redhat-release && ! grep "7\.0" /etc/redhat-release
			then workarroundmsg="
	It seems you are using Red Hat Linux 7.0. A workaround for your
	problem is to use egcs to compile wxWindows and Mahogany:
		- at your bash prompt type:
			export CC=egcs
			export CXX=egcs++
		- reconfigure and rebuild wxWindows and Mahogany
		(don't forget to remove the config.cache files
		located in the source code directories of
		wxWindows and Mahogany before reconfiguring them."
			else workarroundmsg=""
			fi
			AC_MSG_ERROR([Sorry, it seems that you have a buggy gcc version which is
	not able to compile Mahogany (gcc-2.96-69 shipped by Red Hat with Red
	Hat Linux 7.0 is one of them). Please upgrade it.$workaroundmsg]) ;;
			esac ;;
		esac ;;
	esac
esac

dnl Various other commands needed
dnl =============================

dnl set RANLIB to ranlib location or nothing
AC_PROG_RANLIB

dnl check for M4
AC_PATH_PROG(M4, m4)

dnl set YACC to yacc location
AC_PROG_YACC

AC_PROG_INSTALL

AC_PROG_MAKE_SET

dnl --------------------------------------------------------------------------
dnl check for features and functions
dnl --------------------------------------------------------------------------

dnl we use C++ so we always have prototypes - Python.h needs this
AC_DEFINE(HAVE_PROTOTYPES)

dnl used by python
AC_CACHE_CHECK(for variable length prototypes and stdarg.h,
	m_cv_stdarg_prototypes,
	[AC_TRY_COMPILE(
	[#include <stdarg.h>
	int foo(int x, ...) {
		va_list va;
		va_start(va, x);
		va_arg(va, int);
		va_arg(va, char *);
		va_arg(va, double);
		return 0;
	}], [return foo(10, "", 3.14);],
		m_cv_stdarg_prototypes=yes, m_cv_stdarg_prototypes=no)])
case "$m_cv_stdarg_prototypes" in yes)
	AC_DEFINE(HAVE_STDARG_PROTOTYPES)dnl
esac

AC_CACHE_CHECK(for bad exec* prototypes, m_cv_bad_exec,
	[AC_TRY_COMPILE([#include <unistd.h>], [char **t;execve("@",t,t);],
		m_cv_bad_exec=yes, m_cv_bad_exec=no)])
case "$m_cv_bad_exec" in yes)
	AC_DEFINE(BAD_EXEC_PROTOTYPES)dnl
esac

dnl Checks for typedefs and structures.
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_CHECK_FUNCS(strsep)

dnl --------------------------------------------------------------------------
dnl check for the debugging options
dnl --------------------------------------------------------------------------

dnl memory debug libraries get tested last to make sure they are linked last

dnl electric fence
case "$USE_EFENCE" in 1)
	AC_CHECK_LIB(efence,main,
		LIB_EFENCE="-lefence",
		AC_MSG_WARN(efence library configured but not available.))
esac

dnl dmalloc debugging lib
case "$USE_DMALLOC" in 1)
	AC_CHECK_LIB(dmalloc,main,
		[LIB_DMALLOC="-ldmalloc"
		 AC_DEFINE(USE_DMALLOC)],
		AC_MSG_WARN(dmalloc library not available, get it from http://dmalloc.com/.))
esac

dnl LeakTracer debugging lib
case "$USE_LEAKTRACER" in
1)	MAKE_USE_LEAKTRACER="USE_LEAKTRACER=yes" ;;
*)	MAKE_USE_LEAKTRACER="" ;;
esac
AC_SUBST(MAKE_USE_LEAKTRACER)

dnl set debug/optimisation flags

case "$USE_DEBUG" in
0|'')	DEBUG_OPTS="" ;;
1)	DEBUG_OPTS="${USER-$LOGNAME}" ;;
*)	DEBUG_OPTS="`echo $USE_DEBUG | tr -s -- '-,/:+ ' '_ '`" ;;
esac

MAKE_DEBUG='DEBUG :='
case "$DEBUG_OPTS" in '') ;; *)
	AC_DEFINE(DEBUG)
	CPPFLAGS="$CPPFLAGS -DDEBUG"
	for i in $DEBUG_OPTS
	do	CPPFLAGS="$CPPFLAGS -DDEBUG_$i"
		MAKE_DEBUG="$MAKE_DEBUG $i"
	done  
	USE_DEBUG_INFO=1
esac
AC_SUBST(MAKE_DEBUG)

if test "$USE_WXDEBUG" = 1; then
   USE_OPT=0
   WX_CONFIG="wxgtkd-config"
fi

case "$USE_DEBUG_INFO.$GXX.$ac_cv_prog_cc_g" in
1.yes.*)	CODE_GEN_FLAGS="$CODE_GEN_FLAGS -g3" 
		USE_OPT=0 ;;
1.no.yes)	CODE_GEN_FLAGS="$CODE_GEN_FLAGS -g" ;;
esac

dnl i18n support
if test "$USE_I18N" = 1; then
   AC_DEFINE(USE_I18N)
fi

dnl --------------------------------------------------------------------------
dnl check for misc other compilation options
dnl --------------------------------------------------------------------------

case "$USE_OPT" in
1)	CODE_GEN_FLAGS="$CODE_GEN_FLAGS -O2" ;;
*)	CODE_GEN_FLAGS="$CODE_GEN_FLAGS -O0" ;;
esac


case "$USE_PROFILER" in 1)
	CODE_GEN_FLAGS="$CODE_GEN_FLAGS -pg"
esac

case "$USE_EXPERIMENTAL" in
0|'')	EXPERIMENTAL="" ;;
1)	EXPERIMENTAL="${USER-$LOGNAME}" ;;
*)	EXPERIMENTAL="`echo $USE_EXPERIMENTAL | tr -s -- '-,/:+ ' '_ '`" ;;
esac

MAKE_EXPERIMENTAL='EXPERIMENTAL :='
case "$EXPERIMENTAL" in '') ;; *)
	# including this on the command line interferes
	# with its usage in wxMDialogs.cpp
	#CPPFLAGS="$CPPFLAGS -DEXPERIMENTAL"
	for i in $EXPERIMENTAL
	do	CPPFLAGS="$CPPFLAGS -DEXPERIMENTAL_$i"
		MAKE_EXPERIMENTAL="$MAKE_EXPERIMENTAL $i"
	done  
esac
AC_SUBST(MAKE_EXPERIMENTAL)

dnl --------------------------------------------------------------------------
dnl check for SSL
dnl --------------------------------------------------------------------------

case "$USE_SSL" in
0)	ssl_option=no
	;;

1|/*)	dnl be smart: if --with-ssl value already ends in include, don't do
	dnl anything, but if it doesn't then add it
	case "$USE_SSL" in
	/*/include) ssl_inc="$USE_SSL" ;;
	/*)	ssl_inc="$USE_SSL $USE_SSL/include" ;;
	*)	ssl_inc="$prefix/include" ;;
	esac

	M_CHECK_MYHEADER(openssl/ssl.h,
	[ \
		$ssl_inc \
		/include \
		/usr/ssl/include \
		/usr/local/include \
		/usr/local/ssl/include \
		/home/local/include \
		/home/local/ssl/include \
	],
	[
	   ssl_option=yes
	   ssl_inc=$m_cv_header_openssl_ssl_h
	],
	   ssl_option=no
	)

	if test "$ssl_option" != "no"; then
	    ssl_lib=`echo $ssl_inc | sed 's/include$/lib/'`
	    M_CHECK_MYLIB(ssl, main,
		    [ \
			$ssl_lib \
			/usr/lib \
			/usr/local/lib \
			/home/local/lib \
		    ],
		    LIBS_SSL="$libpath_ssl_main -lssl",
		    ssl_option=no
	    )
	fi

	dnl only test for other functions if ssl.h was found
	if test "$ssl_option" != "no"; then
	    AC_CHECK_FUNC(socket,,
	            AC_CHECK_LIB(socket,socket,, ssl_option=no))
	    AC_CHECK_FUNC(gethostname,,
	            AC_CHECK_LIB(resolv,gethostname,, ssl_option=no))
	    AC_CHECK_FUNC(gethostbyname,,
	            AC_CHECK_LIB(nsl,gethostbyname,, ssl_option=no))
	fi

	case "$ssl_option" in
	no*) 	AC_MSG_WARN([Cannot find libraries for SSL - SSL support disabled])
		;;
	*)  	dnl must check if ssl needs libcrypto
		LIBS_SAVE=$LIBS
		LIBS="$LIBS $LIBS_SSL"
		AC_CACHE_CHECK(if libssl needs libcrypto, m_cv_ssl_needs_crypto,
                    [
			dnl FIXME why AC_TRY_LINK and not AC_CHECK_LIB? (VZ)
			AC_TRY_LINK([#include <openssl/ssl.h>],
			    [
				SSLv2_client_method();
				return 0;
			    ],
			    m_cv_ssl_needs_crypto="no",
			    m_cv_ssl_needs_crypto="yes"
			)

			if test "$m_cv_ssl_needs_crypto" = "yes"; then
			    LIBS="$LIBS -lcrypto"
			    AC_TRY_LINK([#include <openssl/ssl.h>],
				[
				    SSLv2_client_method();
				    return 0;
				],
				m_cv_ssl_needs_crypto="yes"
			    )
			fi
		    ]
                )
		LIBS="$LIBS_SAVE";;
	esac
	;;
*)	AC_MSG_WARN([--with-ssl=$USE_SSL ignored, you must specify absolute path])
	ssl_option=no ;;
esac
MAKE_USESSL=
IMAP_SPECIALAUTHENTICATORS=
IMAP_CPPFLAGS=

if test "$ssl_option" = "yes"; then
	MAKE_USESSL="USESSL=yes"
	IMAP_SPECIALAUTHENTICATORS="$IMAP_SPECIALAUTHENTICATORS ssl"
	AC_DEFINE(USE_SSL)

	dnl We assume no IDEA/no DSA as this is easiest to compile. It doesn't
	dnl matter anyway as we load openssl later, but we must be able to
	dnl compile the header file (note that we can't give -DNO_RSA any longer
	dnl (starting with imap2000) or auth_ssl.cpp wouldn't compile!)
	IMAP_CPPFLAGS="-DNO_IDEA -DNO_DSA"

	dnl have to give the location of SSL headers to cclient if it is in a
	dnl non standard place: note that imap2000 includes <ssl.h> and not
	dnl <openssl/ssl.h> but SSL headers themselves use the second form, so
	dnl we need both
	case "$ssl_inc" in
	    /usr/include)
		IMAP_CPPFLAGS="-I/usr/include/openssl $IMAP_CPPFLAGS"
	        ;;
	    *)
		IMAP_CPPFLAGS="-I$ssl_inc -I$ssl_inc/openssl $IMAP_CPPFLAGS"
	esac

	dnl although we're loading libssl dynamically, cclient uses it
	dnl statically, so we still need it in LIBS
	LIBS="$LIBS $LIBS_SSL"
	if test "$m_cv_ssl_needs_crypto" = "yes"; then
            LIBS="$LIBS -lcrypto"
        fi
fi

AC_SUBST(MAKE_USESSL)
AC_SUBST(IMAP_SPECIALAUTHENTICATORS)
AC_SUBST(IMAP_CPPFLAGS)

dnl --------------------------------------------------------------------------
dnl check for other libraries
dnl --------------------------------------------------------------------------

dnl we might need dl (depending on wxGTK and python config),
dnl so link with it if it is available 
AC_CHECK_LIB(dl,main,,AC_MSG_WARN(dl library might be needed.))

dnl c-client library needs the crypt() function which is either in the 
dnl c library or in libcrypt
AC_CHECK_FUNC(crypt,,
  [AC_CHECK_LIB(crypt,crypt,,
    [AC_MSG_ERROR([Cannot find crypt function.
It appears that the c library does not contain it, nor is libcrypt
installed on your system.  It is needed for password authentication,
so before compiling Mahogany, you need to install libcrypt.  You
can download the source for a suitable libcrypt from the Mahogany
ftp server (ftp://ronnie.phy.hw.ac.uk/pub/Mahogany/Libraries).])])]) 

dnl If we have a libshadow, link with it. I am not sure whether we
dnl really need this.
AC_CHECK_LIB(shadow,main)

dnl libresolv or libbind (or simply libc under FreeBSD)
USE_RBL=1
AC_CHECK_FUNC(res_query,,
    AC_CHECK_LIB(resolv,res_query,,
	AC_CHECK_LIB(bind,res_query,,
	    [AC_MSG_WARN(cannot use RBL spam checker.); USE_RBL=0])))
case "$USE_RBL" in 1) AC_DEFINE(USE_RBL) ;; esac

dnl POSIX.2 regexp support
HAVE_POSIX_REGEX=0
AC_CHECK_HEADER(regex.h,
    AC_CHECK_FUNC(regcomp, HAVE_POSIX_REGEX=1,
	AC_CHECK_LIB(regex,regcomp,
	    [LIBS="-lregex $LIBS"; HAVE_POSIX_REGEX=1])))
case "$HAVE_POSIX_REGEX" in 1) AC_DEFINE(HAVE_POSIX_REGEX) ;; esac

dnl --------------------------------------------------------------------------
dnl check for python
dnl --------------------------------------------------------------------------

dnl Check for Python headers first: we need this for both dynamic and static
dnl linking
case "$USE_PYTHON" in
static|Static|STATIC|dynamic|Dynamic|DYNAMIC|1)
        M_CHECK_MYHEADER(Python.h,
        [ \
	    $prefix/include \
	    $prefix/include/python1.5 \
	    $prefix/include/python2.0 \
	    $prefix/include/python2.1 \
	    /usr/include/python1.5 \
	    /usr/include/python2.0 \
	    /usr/include/python2.1 \
	    /usr/local/include \
	    /usr/local/include/python1.5 \
	    /usr/local/include/python2.0 \
	    /usr/local/include/python2.1 \
        ],
	[
	],
        [
	    USE_PYTHON=0
	])
	;;

*)
	USE_PYTHON=0
	AC_MSG_WARN(Unreckognized --with-python option value.)
	;;
esac

dnl now check for the Python lib but only if linking statically
USE_PYTHON2=0
case "$USE_PYTHON" in
dynamic|Dynamic|DYNAMIC|1)
	dnl FIXME
	AC_MSG_WARN(Sorry, dynamic Python linking doesn't work currently)
	USE_PYTHON=0
	dnl AC_DEFINE(USE_PYTHON_DYNAMIC)
	;;

static|Static|STATIC)
	dnl argh, we have to check for 1.5, 2.0 and 2.1 - does any m4 guru
	dnl care to write a function to automate this
	M_CHECK_MYLIB(python1.5, main,
	[ \
	    $prefix/lib \
	    $prefix/lib/python1.5 \
	    $prefix/lib/python1.5/config \
	    /usr/lib \
	    /usr/lib/python1.5 \
	    /usr/lib/python1.5/config \
	    /usr/local/lib \
	    /usr/local/lib/python1.5 \
	    /usr/local/lib/python1.5/config \
	],
        [
	    PYTHON_LIBS="$libpath_python1_5_main -lpython1.5"
	    USE_PYTHON2=1
	],
        [
	    M_CHECK_MYLIB(python2.0, main,
	    [ \
		$prefix/lib \
		$prefix/lib/python2.0 \
		$prefix/lib/python2.0/config \
		/usr/lib \
		/usr/lib/python2.0 \
		/usr/lib/python2.0/config \
		/usr/local/lib \
		/usr/local/lib/python2.0 \
		/usr/local/lib/python2.0/config \
	    ],
	    [
		PYTHON_LIBS="$libpath_python2_0_main -lpython2.0"
		USE_PYTHON2=1
	    ],
	    [
		M_CHECK_MYLIB(python2.1, main,
		[ \
		    $prefix/lib \
		    $prefix/lib/python2.1 \
		    $prefix/lib/python2.1/config \
		    /usr/lib \
		    /usr/lib/python2.1 \
		    /usr/lib/python2.1/config \
		    /usr/local/lib \
		    /usr/local/lib/python2.1 \
		    /usr/local/lib/python2.1/config \
		],
		[
		    PYTHON_LIBS="$libpath_python2_1_main -lpython2.1"
		],
		[
		    USE_PYTHON=0
		])
	    ])
	])
	if test "$USE_PYTHON" != 0; then
	    dnl extra libs required by python on freebsd
	    case "$OSTYPE" in freebsd* | FreeBSD*)
		PYTHON_LIBS="-lreadline $PYTHON_LIBS"
		;;
	    esac

	    dnl Python2 uses forkpty() and openpty() which are not in libc
	    dnl under Linux but in libutil
	    if test "$USE_PYTHON2" != 0; then
		AC_CHECK_FUNC(openpty,,
			AC_CHECK_LIB(util,openpty,
			    PYTHON_LIBS="-lutil $PYTHON_LIBS"))
	    fi
	fi
	;;

0)
	;;

*)
	AC_MSG_WARN(configure logic error, please report this bug)
	;;
esac

case "$USE_PYTHON" in
0)	MAKE_USE_PYTHON=''
	AC_MSG_WARN(Building M without Python leads to reduced functionality!)
	PYTHON_LIBS=''
	;;

*)	AC_DEFINE(USE_PYTHON)
	MAKE_USE_PYTHON="USE_PYTHON=yes"
	AC_PATH_PROG(SWIG,swig)
	case "$SWIG" in '')
	    AC_MSG_WARN([cannot find SWIG - will try to use intermediate files
	    to compile Python support.  If possible, please install SWIG.]) ;;
	esac
	;;
esac
AC_SUBST(MAKE_USE_PYTHON)

dnl check for xgettext/msgmerge
MAKE_XLATE='TRANSLATIONS := yes'
AC_PATH_PROG(XGETTEXT,xgettext)
AC_PATH_PROG(MSGMERGE,msgmerge)
case ".$XGETTEXT.$MSGMERGE." in *..*)
	AC_MSG_WARN([cannot rebuild message translations.  You must
	install xgettext/msgmerge in order to rebuild translations.])
	MAKE_XLATE='TRANSLATIONS := no'
esac
AC_SUBST(MAKE_XLATE)

# compile/install binary translations
AC_PATH_PROG(MSGFMT,msgfmt)
case "$MSGFMT" in '')
	AC_MSG_WARN([cannot compile message translations.
	Binary translations will not be installed.  You need
	the 'msgfmt' program to compile message translations.]) ;;
esac

dnl --------------------------------------------------------------------------
dnl check for (wx)gtk libraries
dnl --------------------------------------------------------------------------

dnl check for wx-config

dnl check for 2.2.6 first as it has separate --cppflags, --cflags and --cxxflags
dnl and so should work in any case while previous version return switches for
dnl C++ compiler in --cflags which will lead to compilation errors sometimes
dnl (i.e. if wxWin was built with --enable-no_rtti, CC can choke on -fno_rtti)
AM_PATH_WXCONFIG(2.2.6, WX226=1)

if test "$WX226" != 1; then
   # I'm not sure that it still works with 2.2.1, bump the version checked
   # here if needed
   AM_PATH_WXCONFIG(2.2.1, WX221=1)
   if test "$WX221" != 1; then
       AC_MSG_ERROR([
               Mahogany requires wxWindows to be installed on your system
               but wx-config script couldn't be found.

               Please check that wx-config is in path, the directory
               where wxWindows libraries are installed (returned by
               'wx-config --libs' command) is in LD_LIBRARY_PATH or
               equivalent variable and wxWindows version is 2.2.1 or above.
       ])
   fi
fi

dnl set all flags
CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS"
CXXFLAGS="$CXXFLAGS $WX_CXXFLAGS_ONLY"
CFLAGS="$CFLAGS $WX_CFLAGS_ONLY"

WX_LDFLAGS="$WX_LIBS"
AC_SUBST(WX_LDFLAGS)

GUI_LIBS_STATIC=`echo $WX_LDFLAGS | sed '
s/-lgtk/-Wl,-Bstatic -lgtk/g
s/-lglib/-lglib -Wl,-Bdynamic/g'`
AC_SUBST(GUI_LIBS_STATIC)

case "$USE_THREADS" in 1)
	AC_CACHE_CHECK(if wxWindows was compiled with threads,
		m_cv_wx_threads,
		[AC_TRY_RUN([#include "wx/setup.h"
			int main(){
			#ifdef wxUSE_THREADS
				return 0;
			#else
				return 1;
			#endif
			}],
			m_cv_wx_threads=yes,
			m_cv_wx_threads=no,
			m_cv_wx_threads=x)])
	case "$m_cv_wx_threads" in
	yes)	AC_DEFINE(USE_THREADS) ;;
	no)	m_cv_USE_THREADS=0	# turn off our option
		AC_MSG_WARN([Threads configured but not available]) ;;
	x)	AC_MSG_WARN([Cross-compiling are we?
		Geeze, I hope you know what you're doing...])
		m_cv_wx_threads=yes
		AC_DEFINE(USE_THREADS) ;;
	esac
esac

dnl --------------------------------------------------------------------------
dnl c-client library: set the proper OSTYPE and compiler variables
dnl --------------------------------------------------------------------------

dnl we need to distinguish between different Linux versions before guessing
dnl CCOSTYPE
case "$OSTYPE" in
   linux* | Linux*)
      AC_CHECK_LIB(pam, pam_end, CCOSTYPE=lnp, CCOSTYPE=slx)
      ;;
esac

dnl we need to set the target for c-client library
case "$USE_CCOSTYPE" in
''|0|1)	AC_MSG_CHECKING(for c-client library OS type)
	case "$OSTYPE" in
	linux* | Linux*)
		;; dnl CCOSTYPE already set above
	Solaris* | solaris* | SunOS*)
		case "$GXX" in
		yes)	CCOSTYPE=gso ;;
		*)	CCOSTYPE=sol ;;
		esac ;;
	freebsd* | FreeBSD*)
		CCOSTYPE=bsf ;;
	hpux_9*)
		CCOSTYPE=hpp ;;
	hpux_10*)
		CCOSTYPE=hpx ;;
	OSF1*)
		case "$GXX" in
		yes)	CCOSTYPE=gof ;;
		*)	CCOSTYPE=osf ;;
		esac ;;
	*)
		AC_MSG_RESULT(unknown)
		AC_MSG_ERROR([cannot determine c-client OS type for $OSTYPE])
		;;
	esac
	dnl cache it to be picked up as a parameter next time
	m_cv_USE_CCOSTYPE="$CCOSTYPE"
	AC_MSG_RESULT($CCOSTYPE) ;;
*)	CCOSTYPE="$USE_CCOSTYPE" ;;
esac
AC_SUBST(CCOSTYPE)
case "$CCOSTYPE" in
lnp)	LIB_PAM="-lpam" ;;
*)	LIB_PAM= ;;
esac

dnl this must come after we checked for wxGTK and network libraries
dnl Check if we have the pi-sock library and headers for PalmOS support.
MAKE_PISOCKLIB=
AC_CHECK_HEADER(pi-source.h,
 AC_CHECK_LIB(pisock, main,
  [ AC_DEFINE(USE_PISOCK)
    MAKE_PISOCKLIB="PISOCK_LIB:=-lpisock"
    AC_CHECK_LIB(pisock, pi_setmaxspeed,AC_DEFINE(HAVE_PI_SETMAXSPEED),
    AC_MSG_WARN(Your pisock library is old - some functionality will be disabled.))
    AC_CHECK_LIB(pisock, pi_accept_to,AC_DEFINE(HAVE_PI_ACCEPT_TO),
    AC_MSG_WARN(Your pisock library is old - some functionality will be disabled.))
  ],
  AC_MSG_WARN(Cannot find pisock library - support for PalmOS disabled.)
 ),
 AC_MSG_WARN(Cannot find pisock headers - support for PalmOS disabled.)
)
AC_SUBST(MAKE_PISOCKLIB)

dnl Check if we have libmal source in extra/src
MAKE_HAVE_LIBMAL=
case "$MAKE_PISOCKLIB" in '') ;; *)
	AC_MSG_CHECKING(for libmal in extra/src)
	if test ! -d $srcdir/extra/src/libmal 
	then	AC_MSG_RESULT(not found - no MAL synch for PalmOS)
	elif test -f $srcdir/extra/src/libmal/Makefile.in \
		-a "$SOURCEDIR" != "$BUILDDIR"
	then	AC_MSG_RESULT(old-style libmal not supported in separate build tree)
	else	AC_MSG_RESULT(found - MAL synch for PalmOS activiated)
		MAKE_HAVE_LIBMAL="HAVE_LIBMAL=yes"
	fi
esac
AC_SUBST(MAKE_HAVE_LIBMAL)


dnl --------------------------------------------------------------------------
dnl How do we want to use modules?
dnl --------------------------------------------------------------------------
dnl must be done after configuring wxWin
case "$USE_MODULES" in
none|None|NONE|0|'')
	m_cv_USE_MODULES=none
	MAKE_USE_MODULES=
	;;
dynamic|Dynamic|DYNAMIC)
	m_cv_USE_MODULES=dynamic
	AC_DEFINE(USE_MODULES)
	MAKE_USE_MODULES="USE_MODULES=dynamic"
	;;
static|Static|STATIC)
	m_cv_USE_MODULES=static
	AC_DEFINE(USE_MODULES_STATIC)
	AC_DEFINE(USE_MODULES)
	MAKE_USE_MODULES="USE_MODULES=static"
	;;
auto|Auto|AUTO|1)
	dnl check for wxGTK dynamic linkage
	echo "int main() { return 0; }" >conftest.c
	if $CXX -o conftest $WX_LDFLAGS conftest.c && \
		ldd conftest | fgrep libwx  >/dev/null
	then
		m_cv_USE_MODULES=dynamic
		MAKE_USE_MODULES="USE_MODULES=dynamic"
	else
		m_cv_USE_MODULES=static
		MAKE_USE_MODULES="USE_MODULES=static"
		AC_DEFINE(USE_MODULES_STATIC)
	fi
	rm -f conftest*
	AC_DEFINE(USE_MODULES)
	;;
*)
	AC_MSG_ERROR(Set --with-modules= to one of static/dynamic/none)
esac
AC_SUBST(MAKE_USE_MODULES)

dnl --------------------------------------------------------------------------
dnl set up generators for class documentation
dnl --------------------------------------------------------------------------

dnl use scandoc
DOCHTML="\$(SCANDOCHTML)"	AC_SUBST(DOCHTML)
DOCTEX="\$(SCANDOCTEX)"		AC_SUBST(DOCTEX)

AC_DEFUN([M_DOC_TOOL], [AC_PATH_PROG($1,$2)dnl
case "$$1" in '') MAKE_HAVE_DOCTOOLS='' $1='false "No $2 available"';; esac])dnl

dnl check for latex/dvips
MAKE_HAVE_DOCTOOLS='HAVE_DOCTOOLS=yes'
M_DOC_TOOL(PERL,perl)
M_DOC_TOOL(LATEX,latex)
M_DOC_TOOL(MAKEINDEX,makeindex)
M_DOC_TOOL(DVIPS,dvips)
M_DOC_TOOL(PSTOPDF,ps2pdf)
M_DOC_TOOL(LATEX2HTML,latex2html)
case "$MAKE_HAVE_DOCTOOLS" in '')
AC_MSG_WARN([One of the tools required to build documentation
is missing.  Documentation cannot be built on this system and you will need
a pre-built Mdocs.tar.gz instead.]) ;;
esac
AC_SUBST(MAKE_HAVE_DOCTOOLS)

dnl --------------------------------------------------------------------------
dnl add our extra directories to the search path
dnl --------------------------------------------------------------------------

dnl set the extra include and lib directories
CPPFLAGS="-I$SOURCEDIR/include $CPPFLAGS -I$SOURCEDIR/extra/include"
case "$BUILDDIR" in "$SOURCEDIR") ;; *)
	CPPFLAGS="-I$BUILDDIR/include $CPPFLAGS" ;;
esac

dnl add all extra/src directories to the search paths
dnl	c-client
CPPFLAGS="$CPPFLAGS -I$BUILDDIR/extra/src/c-client"
LIBS="$BUILDDIR/extra/src/c-client/c-client.a $LIBS"
dnl	compface
CPPFLAGS="$CPPFLAGS -I$SOURCEDIR/extra/src/compface"
LIBS="$LIBS -L$BUILDDIR/extra/src/compface -lMcompface"

dnl --------------------------------------------------------------------------
dnl final settings, concatenation of args, etc
dnl --------------------------------------------------------------------------

dnl add other flags
CFLAGS="$CFLAGS $CODE_GEN_FLAGS"
CXXFLAGS="$CXXFLAGS $CODE_GEN_FLAGS"
LIBS="$LIBS $PYTHON_LIBS $LIB_EFENCE $LIB_DMALLOC $LIB_PAM"

dnl Only now can we add them, or otherwise some tests would have failed
case "$GCC" in yes)
	case "$USE_STRICT" in
	1)	CFLAGS="$CFLAGS -Werror -pedantic -Wno-long-long" ;;
	*)	CFLAGS="$CFLAGS -Wall" ;;
	esac ;;	
esac

dnl Only now can we add them, or otherwise some tests would have failed
dnl how to generate dependencies...
dnl for now, we just support -MD on g++
case "$GXX" in
yes)	CXXFLAGS="$CXXFLAGS -MD" ;;
*)	AC_MSG_WARN([*** dependencies not supported ***
	Dependencies are not supported for this compiler.  If this
	message appears, then we need to talk---we think we know
	how to fix this, but we don't have a machine where we can
	test it.  Please go to http://mahogany.sourceforge.net/bugz
	and submit a bug against the Build component so we can give
	you some code to try.]);;
esac

dnl Python code produces warnings, so don't break compilation:
CXXFLAGS_RELAXED="$CXXFLAGS"
case "$GXX" in yes)
	case "$USE_STRICT" in
	1)	CXXFLAGS_RELAXED="$CXXFLAGS_RELAXED -Wall -pedantic -Wno-long-long"
		CXXFLAGS="$CXXFLAGS -Werror -pedantic -Wno-long-long" ;;
	*)	CXXFLAGS_RELAXED="$CXXFLAGS_RELAXED -Wall"
		CXXFLAGS="$CXXFLAGS -Wall" ;;
	esac ;;	
esac
AC_SUBST(CXXFLAGS_RELAXED)

dnl Make sure we get statically linked against wxGTK
LIBS_STATIC=`echo $LIBS | sed 's/-lwx_gtk./-Wl,-Bstatic & -Wl,-Bdynamic/g'`
dnl libtool does not like -L.
LIBS=`echo $LIBS | sed 's/-L\.//g'`
AC_SUBST(LIBS_STATIC)

OUTPUT="makeopts"
COPY=Makefile
DIR=
for dir in `cd $srcdir; find include extra src locale doc -type d -print`
do	case "$dir" in
	CVS | */CVS)		continue ;;
	extra/src)		DIR="$DIR $dir" ;;   # no Makefile in this dir
	extra/src/libmal)	DIR="$DIR $dir"; continue ;;
	extra/src/libmal*)	continue ;;
	esac
	if test -f $srcdir/$dir/Names.mk
	then
		DIR="$DIR $dir"
	elif test -f $srcdir/$dir/Makefile
	then	COPY="$COPY $dir/Makefile"
		DIR="$DIR $dir"
	fi
done
# HACK for backward compatibility; clean it up when old libmal is dead
case "$MAKE_HAVE_LIBMAL" in '') ;; *)
	if test -f $srcdir/extra/src/libmal/Makefile.in
	then	OUTPUT="$OUTPUT extra/src/libmal/Makefile"
	else	COPY="$COPY extra/src/libmal/Makefile"
	fi ;;
esac

AC_OUTPUT_COMMANDS(
[
	case "$SRC" in
	    "$OBJ")	# source and object jumbled together
		for dir in . $DIR
		do
		    rm -f $dir/.src
		    ln -s . $dir/.src
		done
		;;

	    *)	# using separate object directories
		rm -f .src Makefile makerules
		ln -s $src .src
		ln -s .src/Makefile Makefile
		ln -s .src/makerules makerules
		for dir in $DIR
		do
		    test -d $dir || mkdir $dir
		    rm -f $dir/.src
		    case "$src" in
		    /*)	ln -s $src/$dir $dir/.src ;;
		    *)	lnk=`echo "$dir" | sed 's,\([^/][^/]*\),..,g'`
			ln -s $lnk/$src/$dir $dir/.src ;;
		    esac
		done
		for mf in $COPY
		do
		    echo "linking $mf"
		    rm -f $mf
		    ln -s .src/Makefile $mf
		done
		;;
	esac
	sh .src/makeversion.in
],
src="$srcdir" SRC="$SOURCEDIR" OBJ="$BUILDDIR"
DIR="$DIR"
COPY="$COPY")

AC_OUTPUT($OUTPUT)
exit

dnl vi: set noet ts=8 sw=4 nolist sta:
