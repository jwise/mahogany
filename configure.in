dnl $Id$
dnl Process this file with autoconf to produce a configure script.

dnl ######################## Here the actual script begins ###############

AC_INIT(configure.in)
OS="${OSTYPE}"

if test "x$OS" = "x"; then
  UNAME=`uname`
  AC_MSG_ERROR("The system variable OS has not been set"
               "please set is everytime befor compiling on this system"
               "A good example for this system would be:"
               "setenv OSTYPE $UNAME        for csh as a SHELL"
               "EXPORT OSTYPE=$UNAME        for sh as SHELL"
               "please set this and restart again."
              )
fi
CWD=`pwd`
AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR($CWD/extra/scripts)

dnl --------------------------------------------------------------------------
dnl overrides, all --with/--without options
dnl --------------------------------------------------------------------------

M_OVERRIDES_PREPARE

DEFAULT_USE_EFENCE=0
DEFAULT_USE_DMALLOC=0
DEFAULT_USE_DEBUG=0
DEFAULT_USE_OPT=1
DEFAULT_USE_DEBUG_FLAG=0
DEFAULT_USE_WXDEBUG=0
DEFAULT_USE_PYTHON=1
DEFAULT_USE_THREADS=0
DEFAULT_USE_KDOC=0
DEFAULT_USE_DOCXX=1
DEFAULT_USE_EXPERIMENTAL=0
dnl DEFAULT_USE_LIBTOOL=0
DEFAULT_USE_DOCXX=0
DEFAULT_USE_MODULES=auto
DEFAULT_USE_LEAKTRACER=0
DEFAULT_USE_STRICT=0
DEFAULT_USE_SSL=0
DEFAULT_USE_NO_DSA=0
DEFAULT_USE_NO_IDEA=1	# illegal to use in most of Europe due to ASCOM patent
DEFAULT_USE_NO_RSA=0

M_OVERRIDES(python,python,
--with-python   use python scripting,
USE_PYTHON)

M_OVERRIDES(threads,threads,
--with-threads    link with pthread(s) library,
USE_THREADS)

M_OVERRIDES(dmalloc,dmalloc,
--with-dmalloc  use dmalloc library for debugging,
USE_DMALLOC)

M_OVERRIDES(leaktracer,leaktracer,
--with-leaktracer  use LeakTracer for debugging,
USE_LEAKTRACER)

M_OVERRIDES(efence,efence,
--with-efence   use ElectricFence,
USE_EFENCE)

M_OVERRIDES(debug,debug,
--with-debug    use debug code,
USE_DEBUG)

M_OVERRIDES(opt,opt,
--with-opt    use compiler optimisations,
USE_OPT)

M_OVERRIDES(debuginfo, debuginfo,
--with-debuginfo    use debug info from compiler,
USE_DEBUG_FLAG)

M_OVERRIDES(wxdebug,wxdebug,
--with-wxdebug    use debug wxWindows,
USE_WXDEBUG)


M_OVERRIDES(experimental,experimental,
--with-experimental    use experimental code,
USE_EXPERIMENTAL)

dnl no longer updated in makefiles
dnl M_OVERRIDES(libtool,libtool,
dnl --with-libtool    use GNU libtool,
dnl USE_LIBTOOL)

M_OVERRIDES(ccostype,ccostype,
--with-ccostype=xxx    use OS type xxx for c-client compilation,
USE_CCOSTYPE)

M_OVERRIDES(modules,modules,
--with-modules    either =static =none or =dynamic,
USE_MODULES)

M_OVERRIDES(strict, strict,
--with-strict            Strict compiler flags - may not work on all systems,
USE_STRICT)

M_OVERRIDES(docxx,docxx,
--with-doc++      use DOC++ for class documentation generation,
USE_DOCXX)

M_OVERRIDES(ssl,ssl,
--with-ssl      compile in SSL support (requires openSSL),
USE_SSL)

M_OVERRIDES(no_dsa,no_dsa,
--with-no_dsa      use SSL without DSA,
USE_NO_DSA)

M_OVERRIDES(no_idea,no_idea,
--with-no_idea      use SSL without IDEA,
USE_NO_IDEA)

M_OVERRIDES(no_rsa,no_rsa,
--with-no_rsa      use SSL without RSA,
USE_NO_RSA)

M_OVERRIDES_DONE

dnl --------------------------------------------------------------------------
dnl testing operating system and compilers
dnl --------------------------------------------------------------------------

AC_CANONICAL_HOST

dnl ###################
dnl # checks programs #
dnl ###################

dnl C-compiler checks
dnl =================
dnl use what compiler
AC_PROG_CC
dnl   defines CC with the compiler to use
dnl   defines GCC with yes if using gcc
dnl   defines GCC empty if not using gcc
dnl   defines CFLAGS

dnl does compiler support -c and -o simultaniously
AC_PROG_CC_C_O
dnl   defines NO_MINUS_C_MINUS_O if compiler does not accept 
dnl                              both switches simultaniously
dnl what is the c-preprocessor
AC_PROG_CPP
dnl   defines CPP with the c-preprocessor
dnl is -traditional needed for correct compilations
AC_PROG_GCC_TRADITIONAL
dnl   adds -traditional for gcc if needed

dnl sets RANLIB to ranlib location or nothing
AC_PROG_RANLIB

dnl sets YACC to yacc location
AC_PROG_YACC

AC_LANG_SAVE

AC_PROG_INSTALL

dnl C++-compiler checks
dnl ===================
dnl use what compiler
AC_PROG_CXX
dnl   defines CXX with the compiler to use
dnl   defines GXX with yes if using gxx
dnl   defines GXX empty if not using gxx
dnl   defines CXXFLAGS

AC_PROG_CXX_WORKS
dnl check if the c++-compiler is working

dnl what is the C++-preprocessor
AC_PROG_CXXCPP
dnl   defines CXXCPP with the C++-preprocessor

dnl Karsten: why removing the -g flags??
CXXFLAGS=`echo "$CXXFLAGS" | sed 's/-g./ /g'`

AC_LANG_RESTORE

AC_PROG_MAKE_SET
AC_ISC_POSIX

AC_LANG_CPLUSPLUS

AC_PROG_YACC

dnl Are we using libtool?
MAKE_LIBTOOL=	
if test "$USE_LIBTOOL" = 1; then
	AM_PROG_LIBTOOL
	MAKE_LIBTOOL="USE_LIBTOOL=yes"
else
	LIBTOOL=
	AC_SUBST(LIBTOOL)
fi
AC_SUBST(MAKE_LIBTOOL)

dnl check for M4
AC_PATH_PROG(M4, m4)

dnl
dnl Here we disable support for exceptions if the compiler is gcc and
dnl new enough to support it.
dnl
AC_PATH_PROG(GREP, grep)
if test "$GCC" = "yes"
then
	dnl first, for gcc set our own debug flags
	CFLAGS=`echo "$CFLAGS" | sed 's/-g//g'`
	CXXFLAGS=`echo "$CXXFLAGS" | sed 's/-g//g'`

	dnl now check for exception disabling
	AC_MSG_CHECKING(for gcc with 2.8 style options)
	CFLAGS="$CFLAGS -DCC_GCC -Wall "
	CXXFLAGS="$CXXFLAGS -DCC_GCC -Wall"
	newgcc=
	dnl is it gcc 2.8 or newer?
	$CXX -v 2>&1 | $GREP 2.8 >/dev/null
	if test $? = 0 ; then newgcc=yes ; fi
	dnl is it egcs?
	$CXX -v 2>&1 | $GREP egcs >/dev/null
	if test $? = 0 ; then newgcc=yes ; fi
	dnl or is it pgcc?
	$CXX -v 2>&1 | $GREP pgcc >/dev/null
	if test $? = 0 ; then newgcc=yes ; fi
	if test "x$newgcc" = "xyes"
	then
		CXXFLAGS="$CXXFLAGS -fno-exceptions "
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
	fi
fi

dnl --------------------------------------------------------------------------
dnl add our extra directories to the search path
dnl --------------------------------------------------------------------------

dnl set the top level directory
BUILDDIR=`pwd`
AC_SUBST(BUILDDIR)

dnl set the extra include and lib directories
LDFLAGS="$LDFLAGS -L$BUILDDIR/extra/lib"
CPPFLAGS="$CPPFLAGS -D__WXGTK__ -I$BUILDDIR/extra/include"

dnl add all extra/src directories to the search paths
EXTRA_SRC_LIB=
EXTRA_SRC_INC=
for i in `pwd`/extra/src/*
do
	if test "x$i" != "xCVS" -a -d $i; then
		LIBS="$LIBS -L$i"
		CPPFLAGS="$CPPFLAGS -I$i"
	fi
done


dnl --------------------------------------------------------------------------
dnl check for featurs and functions
dnl --------------------------------------------------------------------------

dnl we use C++ so we always have prototypes - Python.h needs this
AC_DEFINE(HAVE_PROTOTYPES)

dnl used by python
works=no
AC_MSG_CHECKING(for variable length prototypes and stdarg.h)
AC_TRY_COMPILE([
#include <stdarg.h>
int foo(int x, ...) {
	va_list va;
	va_start(va, x);
	va_arg(va, int);
	va_arg(va, char *);
	va_arg(va, double);
	return 0;
}
], [return foo(10, "", 3.14);],
AC_DEFINE(HAVE_STDARG_PROTOTYPES) works=yes)
AC_MSG_RESULT($works)

if test "$have_prototypes" = yes; then
	bad_prototypes=no
	AC_MSG_CHECKING(for bad exec* prototypes)
	AC_TRY_COMPILE([#include <unistd.h>], [char **t;execve("@",t,t);], ,
	AC_DEFINE(BAD_EXEC_PROTOTYPES) bad_prototypes=yes)
	AC_MSG_RESULT($bad_prototypes)
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_CHECK_FUNCS(strerror strstr strsep)

dnl --------------------------------------------------------------------------
dnl check for header files
dnl --------------------------------------------------------------------------

AC_CHECK_HEADERS(strings.h unistd.h stdlib.h stdarg.h)
dnl no longer testing for compface.h because it is included with M

dnl --------------------------------------------------------------------------
dnl check for the overridable options
dnl --------------------------------------------------------------------------

dnl memory debug libraries get tested last to make sure they are linked last

dnl electric fence
if test "$USE_EFENCE" = 1; then
	AC_CHECK_LIB(efence,main,LIB_EFENCE="-lefence",AC_MSG_WARN("efence library configured but not available."))
fi

dnl dmalloc debugging lib
if test "$USE_DMALLOC" = 1; then
	AC_CHECK_LIB(dmalloc,main,LIB_DMALLOC="-ldmalloc",AC_MSG_WARN("dmalloc library configured but not available."))
fi

dnl LeakTracer debugging lib
MAKE_USE_LEAKTRACER=
if test "$USE_LEAKTRACER" = 1; then
	MAKE_USE_LEAKTRACER="USE_LEAKTRACER=yes"
fi
	AC_SUBST(MAKE_USE_LEAKTRACER)

if test "$USE_THREADS" = 1
then
	AC_CHECK_LIB(pthread,main,,AC_CHECK_LIB(pthreads,main))
	AC_DEFINE(USE_THREADS)
	LDFLAGS="$LDFLAGS -lpthread"
fi


dnl set debug/optimisation flags
DBGFLAGS=
MAKE_DEBUG=

if test "$USE_WXDEBUG" = 1; then
	DBGFLAGS="-D__WXDEBUG__"
	WXCONFIG_NAME="wxd-config"
else
	WXCONFIG_NAME="wx-config"
fi

if test "$USE_DEBUG" = 1; then
	DBGFLAGS="$DBGFLAGS -DDEBUG"
	MAKE_DEBUG="DEBUG=yes"
	USE_DEBUG_FLAG=1
fi
AC_SUBST(MAKE_DEBUG)

if test "$USE_DEBUG_FLAG" = 1; then
	if test "$GCC" = "yes"
	then
		DBGFLAGS="$DBGFLAGS -O0 -g3"
	else
		DBGFLAGS="$DBGFLAGS -g"
	fi
fi

if test "$USE_OPT" != 1; then
	OPT="-O0"
fi


dnl experimental code (unstable!)
MAKE_EXPERIMENTAL=
if test "$USE_EXPERIMENTAL" = 1; then
	DBGFLAGS="$DBGFLAGS -DEXPERIMENTAL=1"
	MAKE_EXPERIMENTAL="EXPERIMENTAL=yes"
fi
AC_SUBST(MAKE_EXPERIMENTAL)

dnl precompiled headers
if test "$USE_PCH" = 1; then
	AC_DEFINE(USE_PCH)
fi

dnl Use SSL (requires openSSL)
MAKE_USESSL=
CCLIENT_EXTRAAUTHENTICATORS=
CCLIENT_EXTRACFLAGS=
EXTRACFLAGS=
if test "$USE_SSL" = 1; then
	AC_CHECK_LIB(c, socket,, AC_CHECK_LIB(socket,socket))
	AC_CHECK_LIB(c, gethostname,, AC_CHECK_LIB(resolv,gethostname))
	AC_CHECK_LIB(c, gethostbyname,, AC_CHECK_LIB(nsl,gethostbyname))
	AC_CHECK_LIB(crypto,CRYPTO_free,
		AC_CHECK_LIB(ssl,ssl3_connect,
		[ 	MAKE_USESSL="USESSL=yes"
			AC_DEFINE(USE_SSL)
			SSL_LIBS="-lssl -lcrypto"
			CCLIENT_EXTRAAUTHENTICATORS="\"EXTRAAUTHENTICATORS=ssl\""
		] ,AC_MSG_ERROR("Cannot find openSSL library libssl."), -lcrypto) ,
	AC_MSG_ERROR("Cannot find openSSL library libcrypto."))

	if test "$USE_NO_IDEA" = 1; then
		EXTRACFLAGS="$EXTRACFLAGS -DNO_IDEA"
		CPPFLAGS="$CPPFLAGS -DNO_IDEA"
	fi

	if test "$USE_NO_DSA" = 1; then
		EXTRACFLAGS="$EXTRACFLAGS -DNO_DSA"
		CPPFLAGS="$CPPFLAGS -DNO_DSA"
	fi
	if test "$USE_NO_RSA" = 1; then
		EXTRACFLAGS="$EXTRACFLAGS -DNO_RSA"
		CPPFLAGS="$CPPFLAGS -DNO_RSA"
	fi
	CCLIENT_EXTRACFLAGS="\"EXTRACFLAGS=$EXTRACFLAGS\""
fi
AC_SUBST(MAKE_USESSL)
AC_SUBST(CCLIENT_EXTRAAUTHENTICATORS)
AC_SUBST(CCLIENT_EXTRACFLAGS)
AC_SUBST(SSL_LIBS)

dnl kdoc/docxx have their own section further down

dnl --------------------------------------------------------------------------
dnl check for other libraries
dnl --------------------------------------------------------------------------

dnl we might need dl (depending on wxGTK and python config), so link with it if
dnl it is available 
AC_CHECK_LIB(dl,main,,AC_MSG_WARN("dl library might be needed."))

dnl c-client library needs the crypt() function which is either in the 
dnl c library or in libcrypt
AC_CHECK_LIB(c,crypt,,
  AC_CHECK_LIB(crypt,crypt,,[
    AC_MSG_ERROR(
    "Cannot find crypt function."
    "It appears that the c library does not contain it nor is libcrypt"
     "installed on your system. Before compiling Mahogany you need to"
     "install libcrypt which is needed for password authentication."
     "You can download the source for a suitable libcrypt from the"
     "Mahogany ftp server: ftp://ronnie.phy.hw.ac.uk/pub/Mahogany/Libraries"
)
]
))

dnl If we have a libshadow, link with it. I am not sure whether we
dnl really need this.
AC_CHECK_LIB(shadow,main)


dnl libresolv or libbind
USE_RBL=1
AC_CHECK_LIB(resolv,res_init,,
AC_CHECK_LIB(bind,res_init,, [ AC_MSG_WARN("Cannot use RBL spam checker.")
USE_RBL=0 ] ))
AC_DEFINE(USE_RBL)

dnl POSIX.2 regexp support
HAVE_POSIX_REGEX=0
AC_CHECK_HEADERS(regexp.h,
AC_CHECK_LIB(c, regcomp, HAVE_POSIX_REGEX=1,
AC_CHECK_LIB(regex,regcomp, [ LIBS="$LIBS -lregex"
HAVE_POSIX_REGEX=1 ] )))
AC_DEFINE(HAVE_POSIX_REGEX)

dnl --------------------------------------------------------------------------
dnl check for python ( a bit lengthy thanks to its stupid installation)
dnl --------------------------------------------------------------------------

MAKE_USE_PYTHON=
MAKE_USE_SWIG=
PYTHON_LIBS=
if test "$USE_PYTHON" = 1 ; then
   M_CHECK_MYHEADER(Python.h,
       [ /usr \
         /usr/include \
         /usr/include/python1.5 \
         /usr/local \
         /usr/local/include \
         /usr/local/include/python1.5 \
         /home/local \
         /home/local/include \
         /home/local/include/python1.5 \
       ],
       [ M_CHECK_MYLIB(python1.5,main,
           [ /usr \
             /usr/lib \
             /usr/lib/python1.5 \
             /usr/lib/python1.5/config \
             /usr/local \
             /usr/local/lib \
             /usr/local/lib/python1.5 \
             /usr/local/lib/python1.5/config \
             /usr/local/python1.5/config\
             /home/local \
             /home/local/lib \
             /home/local/lib/python1.5 \
             /home/local/lib/python1.5/config \
             /home/local/python1.5/config\
           ],
             [ AC_DEFINE(USE_PYTHON)
               MAKE_USE_PYTHON="USE_PYTHON=yes"
#               AC_CHECK_LIB(swigpy,main,
#             [  AC_DEFINE(HAVE_SWIGLIB)
#                PYTHON_LIBS="$libpath_python1_5_main -lpython1.5 -lswigpy"
#              ],
#              [ AC_MSG_WARN("Cannot find SWIG library for python - trying anyway.")
                PYTHON_LIBS="$libpath_python1_5_main -lpython1.5"
#              ],
#              [$libpath_python1_5_main -lpython1.5]
#             )
           ], [ USE_PYTHON=0 ]
         )
       ], [ USE_PYTHON=0 ]
   )
   AC_PATH_PROG(SWIG,swig)
   if test "x$SWIG" != "x"
   then
	MAKE_USE_SWIG="USE_SWIG=yes"
   fi
fi

if test "$USE_PYTHON" = 1
then
  MAKE_USE_PYTHON="USE_PYTHON=yes"
  AC_SUBST(MAKE_USE_PYTHON)
  AC_SUBST(MAKE_USE_SWIG)
else
  AC_MSG_WARN("Building M without Python leads to reduced functionality!")
fi

dnl check for xgettext
AC_PATH_PROG(XGETTEXT,xgettext)
if test "x$XGETTEXT" = x
then
  AC_MSG_WARN("Cannot generate messages.po for translations.")
  XGETTEXT="echo xgettext "
  AC_SUBST(XGETTEXT)
fi

dnl check for msgfmt
AC_PATH_PROG(MSGFMT,msgfmt)
if test "x$MSGFMT" = x
then
  AC_MSG_WARN("Cannot translate messages.")
  MSGFMT="echo msgfmt "
  AC_SUBST(MSGFMT)
fi

dnl --------------------------------------------------------------------------
dnl check for (wx)gtk libraries
dnl --------------------------------------------------------------------------

GTK_LDFLAGS=
dnl check for wx-config
AC_PATH_PROG(WX_CONFIG,WXCONFIG_NAME)
if test "x$WX_CONFIG" != "x"
then
	GTK_CFLAGS=`$WX_CONFIG --cflags`
	GTK_LDFLAGS=`$WX_CONFIG --libs`
else
	AC_MSG_ERROR("Cannot find wx-config program.")
fi
AC_SUBST(GTK_LDFLAGS)
GUI_LIBS_STATIC=`echo $GTK_LDFLAGS | sed '
s/-lgtk/-Wl,-Bstatic -lgtk/g
s/-lglib/-lglib -Wl,-Bdynamic/g'`
AC_SUBST(GUI_LIBS_STATIC)

CPPFLAGS="$CPPFLAGS $GTK_CFLAGS"
dnl only now can we check for wx.h because it would fail without the
dnl gtk headers
AC_CHECK_HEADERS(wx/wx.h,,AC_MSG_ERROR("Cannot find wx/wx.h header file."))

dnl --------------------------------------------------------------------------
dnl c-client library: set the proper OSTYPE and compiler variables
dnl --------------------------------------------------------------------------

dnl This code also sets the EXTRALIBS setting with any OS 
dnl specific flags that cannot otherwise be tested for.
EXTRALIBS=

dnl we need to set the target for c-client library:


if test "x$USE_CCOSTYPE" != "x"; then
	CCOSTYPE="$USE_CCOSTYPE"
else
	CCOSTYPE=
	AC_MSG_CHECKING(for c-client library OS type)
	case "${OSTYPE}" in
	linux* | Linux*)
	  CCOSTYPE=slx
	  ;;
	Solaris* | solaris* | SunOS*)
	  if test "$GCC" = "yes"
	  then
	    CCOSTYPE=gso
	  else
	    CCOSTYPE=sol
	  fi
	  ;;
	freebsd* | FreeBSD*)
	  CCOSTYPE=bsf
dnl extra libs as required by python on freebsd:
	  EXTRALIBS="-lreadline"
	  ;;
	hpux_9*)
	  CCOSTYPE=hpp
	  ;;
	hpux_10*)
	  CCOSTYPE=hpx
	  ;;
	OSF1*)
	  if test "$GCC" = "yes"
	  then
	    CCOSTYPE=gof
	  else
			    CCOSTYPE=osf
	  fi
	  ;;
	esac
fi

AC_MSG_RESULT($CCOSTYPE)
if test "x$CCOSTYPE" = "x" ; then
	AC_MSG_ERROR("Cannot determine OS type for c-client library for your OS: ${OSTYPE}.")
fi
AC_SUBST(CCOSTYPE)

MAKE_HAVE_LIBMAL=
dnl this must come after we checked for wxGTK and network libraries
dnl Check if we have the pi-sock library and headers for PalmOS support.
MAKE_PISOCKLIB=
AC_CHECK_HEADERS(pi-source.h,
 AC_CHECK_LIB(pisock, main,
  [ AC_DEFINE(USE_PISOCK)
    MAKE_PISOCKLIB="PISOCK_LIB=-lpisock"
    AC_CHECK_LIB(pisock, pi_setmaxspeed,AC_DEFINE(HAVE_PI_SETMAXSPEED),
    AC_MSG_WARN("Your pisock library is old - some functionality will be disabled."))
  ],
  AC_MSG_WARN("Cannot find pisock library - support for PalmOS disabled.")
 ),
 AC_MSG_WARN("Cannot find pisock library headers - support for PalmOS disabled.")
)
AC_SUBST(MAKE_PISOCKLIB)    

if test "x$MAKE_PISOCKLIB" != "x" ; then
dnl Check if we have libmal source in extra/src
    AC_MSG_CHECKING(for libmal library source in ./extra/src)
    if  test -d ./extra/src/libmal 
    then
	AC_MSG_RESULT(found - MAL synchronisation for PalmOS activated)
	dnl the following settings are used by the libmal/Makefile
	dnl MALTOP=$BUILDDIR/extra/src/libmal/malsync_src
	MALTOP=./malsync_src
	AC_SUBST(MALTOP)
	cflags="$CFLAGS -I$MALTOP/mal/client/common -I$MALTOP/mal/common"
	AC_SUBST(cflags)
	libs=
	llibs=
	ccoptions=
	AC_SUBST(libs)
	AC_SUBST(llibs)
	AC_SUBST(ccoptions)
	PILOT_LIBS=$PISOCK_LIB
	AC_SUBST(PILOT_LIBS)
	MAKE_HAVE_LIBMAL="HAVE_LIBMAL=yes"
    else
      AC_MSG_RESULT(not found - MAL synchronisation for PalmOS not available)
    fi
fi
AC_SUBST(MAKE_HAVE_LIBMAL)


dnl --------------------------------------------------------------------------
dnl How do we want to use modules?
dnl --------------------------------------------------------------------------
if test "x$USE_MODULES" != "x"; then
   MODULES="${USE_MODULES}"
   case "$MODULES" in
     none|None|NONE|0)
       USE_MODULES=
       MAKE_USE_MODULES=
       ;;
     dynamic|Dynamic|DYNAMIC)
       USE_MODULES=1
       USE_MODULES_STATIC=
       MAKE_USE_MODULES="USE_MODULES=dynamic"
       AC_DEFINE(USE_MODULES)
       ;;
     static|Static|STATIC|1)
       USE_MODULES=1
       USE_MODULES_STATIC=1
       MAKE_USE_MODULES="USE_MODULES=static"
       AC_DEFINE(USE_MODULES_STATIC)
       AC_DEFINE(USE_MODULES)
	;;
     auto|Auto|AUTO)
	USE_MODULES=1
	dnl check for wxGTK dynamic linkage?
	echo "main() { return 0; }" >conftest.c
	$CXX -o conftest conftest.c `wx-config --libs` && \
	ldd conftest | fgrep libwx  >/dev/null
	if test $? = 0
	then
		MAKE_USE_MODULES="USE_MODULES=dynamic"
	else
 		USE_MODULES_STATIC=1
	       	MAKE_USE_MODULES="USE_MODULES=static"
	       	AC_DEFINE(USE_MODULES_STATIC)
	       	AC_DEFINE(USE_MODULES)
	fi
	rm -f conftest
	AC_DEFINE(USE_MODULES)
	;;
     *)
       AC_MSG_ERROR(Set --with-modules= to either static/dynamic/none!)
  esac
 fi
AC_SUBST(MAKE_USE_MODULES)


dnl --------------------------------------------------------------------------
dnl set up generators for class documentation
dnl --------------------------------------------------------------------------

AC_PATH_PROG(PERL,perl)

dnl use scandoc
DOCHTML="\$(SCANDOCHTML)"

if test "x$USE_DOCXX" != "x"; then
	AC_PATH_PROG(DOCXX,doc++)
	if test "x$DOCXX" != "x"
	then
		DOCHTML="\$(DOCXXHTML)"
	fi
fi
AC_SUBST(DOCHTML)

dnl check for latex/dvips

AC_PATH_PROG(LATEX,latex)
AC_PATH_PROG(MAKEINDEX,makeindex)
AC_PATH_PROG(DVIPS,dvips)
AC_PATH_PROG(PSTOPDF,ps2pdf)
if test "x$PSTOPDF" = x
then
	PSTOPDF="echo \"ps2pdf not available.\""
	AC_SUBST(PSTOPDF)
fi
if test "x$LATEX" = x -o "x$DVIPS" = x -o "x$MAKEINDEX" = x
then
	LATEX="echo \"No latex available.\""
	DVIPS="echo \"No dvips available.\""
	MAKEINDEX="echo \"No makeindex available.\""
	AC_SUBST(LATEX)
	AC_SUBST(DVIPS)
	AC_SUBST(MAKEINDEX)
fi

MAKE_HAVE_LATEX2HTML=
LATEX2HTML="echo \"No doc generator(html) available.\""
AC_PATH_PROG(LATEX2HTML,latex2html)
if test "x$LATEX2HTML" != "x"
then
  MAKE_HAVE_SGMLTOOLS="HAVE_LATEX2HTML=yes"
fi
AC_SUBST(MAKE_HAVE_LATEX2HTML)
AC_SUBST(LATEX2HTML)

dnl --------------------------------------------------------------------------
dnl final settings, concatenation of args, etc
dnl --------------------------------------------------------------------------

dnl setting the OS type for information
OSINFO=`uname -s -r -m`
OSINFO="\"$OSINFO\""
AC_DEFINE_UNQUOTED(M_OSINFO,$OSINFO)

dnl just a file where to dump some unneeded code in the python dir
MAKE_LOCAL_LIBS_DEFINE="junk"

dnl compface is included in M source
LIBS="$LIBS -lMcompface $EXTRALIBS"

dnl Only now can we add them, or otherwise some tests would have failed
if test "$GCC" = "yes"
then
	if test "$USE_STRICT" = 1; then
		CXXFLAGS="$CXXFLAGS -Werror -pedantic"
	fi
fi

dnl add other flags
LIBS="$LIBS $PYTHON_LIBS $LIB_PNG $LIB_JPEG $LIB_EFENCE $LIB_DMALLOC"
CXXFLAGS="$CXXFLAGS $DBGFLAGS $OPT"
CFLAGS="$CFLAGS $DBGFLAGS $OPT"

dnl Python code produces warnings at present, so don't break compilation:
CXXFLAGS_RELAXED=`echo $CXXFLAGS | sed 's/-Werror//g'`
AC_SUBST(CXXFLAGS_RELAXED)

dnl Make sure, we get statically linked against wxGTK:
LIBS_STATIC=`echo $LIBS | sed 's/-lwx_gtk./-Wl,-Bstatic & -Wl,-Bdynamic/g'`
dnl libtool does not like -L.
LIBS=`echo $LIBS | sed 's/-L\.//g'`
AC_SUBST(LIBS_STATIC)

OUTPUT=makeopts

if test "x$MAKE_HAVE_LIBMAL" != "x"; then
	OUTPUT="$OUTPUT extra/src/libmal/Makefile makeopts"
fi

AC_OUTPUT($OUTPUT)

