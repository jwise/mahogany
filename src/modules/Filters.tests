# This is the grammar that we are testing.  The implemented grammar
# should match this exactly.  If it doesn't, one or the other is wrong.

#Question: This grammar doesn't accept {} as a Block (with a value of
#	zero?).  Should it?
#
#Program := Filters eof
#
#Filters := Filter
#	| Filter Filters
#
#Filter	:= Block
#	| IfElse
##	| something to define a function
#
#Block	:= '{' Block '}'
#	| '{' Stmts '}'
#Stmts	:= Stmt ';'
#	| Stmt Stmts
#
#Stmt	:= IfElse
#	| identifier '(' Args ')'	# function
##	| identifier ':=' Expression
##	| identifier '[' Expression ']' ':=' Expression
#
#IfPart	:=  'if' '(' Condition ')' Block
#IfElse	:= IfPart
#	| IfPart 'else' Block
#
## implemented separately for error messages
#Expression := QueryOp
#Condition := QueryOp
#
#QueryOp := Ors
#	| Ors '?' Expression ':' QueryOp
#
#Ors	:= Iffs
#	| Ors OrOp Iffs
#OrOp	:= '||' | '|' | 'or'
#
#Iffs	:= Ands
#	#| Iffs IffOp Ands
#IffOp	:= '^^' | 'iff'
#
#Ands	:= BitOrs
#	| Ands AndOp BitOrs
#AndOp	:= '&&' | '&' | 'and'
#
#BitOrs	:= Xors
#	#| BitOrs BOrOp Xors
#BOrOp	:= '|'
#
#Xors	:= BitAnds
#	#| Xors XorOp BitAnds
#XorOp	:= '^' | 'xor'
#
#BitAnds := Relational
#	#| BitAnds BAndOp Relational
#BAndOp	:= '&'
#
#Relational := Term
#	| Term EqOp Term
#	| Term RelOp Term
#EqOp	:= '==' | '=' | '!=' | '<>'
#RelOp	:= '<' | '<=' | '>' | '>='
#
#Term	:= Factor
#	| Term AddOp Factor
#AddOp	:= '+' | '-'
#
#Factor	:= Unary
#	| Factor MulOp Unary
#MulOp	:= '*' | '/' | '%'
#
#Unary	:= '(' Expression ')'
#	| UnaryOp Unary
#	| identifier '(' Args ')'	# function
##	| identifier '[' Expression ']'
##	| identifier
#	| integer
#	| string
#UnaryOp := '!' | '+' | '-'
#
#Args	:= empty | ArgList
#ArgList := Expression
#	| Expression ',' ArgList

# And here are the tests...

# invalid expressions
expr	reject	3 + 5 +
expr	reject	9 * (7 - 2
# these two seem to tickle a compiler bug?
#expr	reject	"unterminated
#expr	reject	"unterminated\

# unary
expr	-1	-1
expr	1	+1
expr	0	!1
expr	1	!0
expr	9	arg(9)
expr	0	nargs()
expr	1	nargs("one")
expr	2	nargs("one", 2)
expr	1	(1)
expr	-1	-(1)
expr	1	--(1)
expr	1	--1
expr	10	"terminated"
expr	reject	(
expr	reject	(11
expr	reject	-
expr	reject	!
expr	reject	xxx
expr	reject	xxx(
expr	reject	xxx(11
expr	reject	xxx(11,

# factor
expr	99	9 * 11
expr	11	99 / 9
expr	1	10 % 9

# term
expr	11	7 + 4
expr	9	11 - 2

# assoc
expr	6	(9 - 5) + 2
expr	2	9 - (5 + 2)
expr	6	9 - 5 + 2
expr	45	(2 + 7)*5
expr	37	2 + (7*5)
expr	37	2 + 7*5
expr	37	7*5 + 2

# relational
expr	1	1 == 1
expr	1	1 = 1
expr	0	1 == 0
expr	1	"a" == "a"
expr	0	"a" == "b"
expr	0	1 != 1
expr	0	1 <> 1
expr	1	1 != 0
expr	0	"a" != "a"
expr	1	"a" != "b"

expr	1	9 > 7
expr	0	7 > 9
expr	0	7 > 7
expr	0	"a" > "z"
expr	1	"z" > "a"
expr	0	"z" > "z"
expr	1	7 < 9
expr	0	9 < 7
expr	0	7 < 7
expr	1	"a" < "z"
expr	0	"z" < "a"
expr	0	"z" < "z"
expr	1	9 >= 7
expr	0	7 >= 9
expr	1	7 >= 7
expr	0	"a" >= "z"
expr	1	"z" >= "a"
expr	1	"z" >= "z"
expr	1	7 <= 9
expr	0	9 <= 7
expr	1	7 <= 7
expr	1	"a" <= "z"
expr	0	"z" <= "a"
expr	1	"z" <= "z"

expr	1	7 == 9 - 2
expr	1	7 + 2 == 9
expr	0	7*5 + 2 != 37

# ands
expr	1	9 && 7
expr	1	7 & 3
expr	0	1 && 0
expr	0	0 && 1
expr	0	0 && 0

expr	1	9>7 && 11>9
expr	0	9<7 && 11>9
expr	1	7 == 9 - 2 && 7 + 2 == 9

# ors
expr	1	1 || 1
expr	1	1 | 1
expr	1	1 || 0
expr	1	0 || 1
expr	0	0 || 0

expr	1	9>7 || 11>9
expr	1	9<7 || 11>9
expr	0	7 != 9 - 2 || 7 + 2 != 9

# query
expr	9	9 > 7 ? 9 : 7
expr	7	9 < 7 ? 9 : 7
expr	5	9 < 7 ? 9 : 7 < 5 ? 7 : 5
expr	7	9 < 7 ? 7 < 5 ? 7 : 5 : 7
expr	reject	9 > 7 ? 9 : 
expr	reject	9 > 7 ? 9 
expr	reject	9 > 7 ? 

# block
# although all the standard functions are recognized, we must be careful
# to only use those that do not refer to the mailbox or we will crash.
#??	pgm	0	{}
pgm	9	{ arg(9); }
pgm	9	{{ arg(9); }}
pgm	9	{{{ arg(9); }}}
pgm	0	{ nargs(); }
pgm	1	{ nargs(1); }
pgm	2	{ nargs("one", "two"); }
pgm	1	{ nargs(); nargs("one", "two"); nargs("only one"); }

# if/else
pgm	0	if (9 < 7) { nargs(1,2,3); }
pgm	3	if (9 > 7) { nargs(1,2,3); }
pgm	2	if (9 < 7) { nargs(1,2,3); } else { nargs(1,2); }
pgm	3	if (9 > 7) { nargs(1,2,3); } else { nargs(1,2); }
pgm	0	if (9 < 7) { arg(1); } else if (9 < 7) { arg(2); }
pgm	2	if (9 < 7) { arg(1); } else if (9 > 7) { arg(2); }
pgm	3	if (9 < 7) { arg(1); } else if (9 < 7) { arg(2); } else { arg(3); }

# filter list
pgm	9	{ arg(3); } { arg(9); }
pgm	9	if (9 < 7) { nargs(1,2,3); } else { arg(3); } { arg(9); }
pgm	2	{ arg(9); } if (9 > 7) { nargs(1,2); } else { arg(3); }

# real filters, generated by the GUI
# we only accept these, since running them will cause a crash
pgm	accept	if((containsi(subject(),"[M-Dev]"))|(containsi(subject(),"[M-User]"))){setcolour("medium blue");}
pgm	accept	if(((now()-date()) > "7")){delete();}
pgm	accept	if(((now()-date()) > 7)){delete();}

pgm	reject	
pgm	reject	if { arg(1) } { arg(2); }
pgm	reject	if ( arg(1) } { arg(2); }
pgm	reject	if ( arg(1) ) ( arg(2); }
pgm	reject	{ }
pgm	reject	{ nargs(); )
pgm	reject	{ nargs() }
