# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _MimeType
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class MimeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MimeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MimeType, name)
    __repr__ = _swig_repr
    TEXT = _MimeType.MimeType_TEXT
    MULTIPART = _MimeType.MimeType_MULTIPART
    MESSAGE = _MimeType.MimeType_MESSAGE
    APPLICATION = _MimeType.MimeType_APPLICATION
    AUDIO = _MimeType.MimeType_AUDIO
    IMAGE = _MimeType.MimeType_IMAGE
    VIDEO = _MimeType.MimeType_VIDEO
    MODEL = _MimeType.MimeType_MODEL
    OTHER = _MimeType.MimeType_OTHER
    CUSTOM1 = _MimeType.MimeType_CUSTOM1
    CUSTOM2 = _MimeType.MimeType_CUSTOM2
    CUSTOM3 = _MimeType.MimeType_CUSTOM3
    CUSTOM4 = _MimeType.MimeType_CUSTOM4
    CUSTOM5 = _MimeType.MimeType_CUSTOM5
    CUSTOM6 = _MimeType.MimeType_CUSTOM6
    INVALID = _MimeType.MimeType_INVALID
    def __init__(self, *args): 
        this = _MimeType.new_MimeType(*args)
        try: self.this.append(this)
        except: self.this = this
    def Assign(*args): return _MimeType.MimeType_Assign(*args)
    def IsOk(*args): return _MimeType.MimeType_IsOk(*args)
    def IsWildcard(*args): return _MimeType.MimeType_IsWildcard(*args)
    def IsText(*args): return _MimeType.MimeType_IsText(*args)
    def GetPrimary(*args): return _MimeType.MimeType_GetPrimary(*args)
    def GetType(*args): return _MimeType.MimeType_GetType(*args)
    def GetSubType(*args): return _MimeType.MimeType_GetSubType(*args)
    def GetFull(*args): return _MimeType.MimeType_GetFull(*args)
    def ShouldShowInline(*args): return _MimeType.MimeType_ShouldShowInline(*args)
    def __ne__(*args): return _MimeType.MimeType___ne__(*args)
    def Matches(*args): return _MimeType.MimeType_Matches(*args)
    def __eq__(*args): return _MimeType.MimeType___eq__(*args)
    __swig_destroy__ = _MimeType.delete_MimeType
    __del__ = lambda self : None;
MimeType_swigregister = _MimeType.MimeType_swigregister
MimeType_swigregister(MimeType)



