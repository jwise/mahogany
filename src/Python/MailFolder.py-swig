# This file was created automatically by SWIG.
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.
import _MailFolder
def _swig_setattr(self,class_type,name,value):
    if (name == "this"):
        if isinstance(value, class_type):
            self.__dict__[name] = value.this
            if hasattr(value,"thisown"): self.__dict__["thisown"] = value.thisown
            del value.thisown
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    self.__dict__[name] = value

def _swig_getattr(self,class_type,name):
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import MString
import MProfile
import MObject
import Message
class MailFolder(MObject.MObjectRC):
    __swig_setmethods__ = {}
    for _s in [MObject.MObjectRC]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, MailFolder, name, value)
    __swig_getmethods__ = {}
    for _s in [MObject.MObjectRC]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, MailFolder, name)
    MSG_STAT_NEW = _MailFolder.MailFolder_MSG_STAT_NEW
    MSG_STAT_SEEN = _MailFolder.MailFolder_MSG_STAT_SEEN
    MSG_STAT_DELETED = _MailFolder.MailFolder_MSG_STAT_DELETED
    MSG_STAT_ANSWERED = _MailFolder.MailFolder_MSG_STAT_ANSWERED
    MSG_STAT_RECENT = _MailFolder.MailFolder_MSG_STAT_RECENT
    MSG_STAT_SEARCHED = _MailFolder.MailFolder_MSG_STAT_SEARCHED
    MSG_STAT_FLAGGED = _MailFolder.MailFolder_MSG_STAT_FLAGGED
    REPLY_SENDER = _MailFolder.MailFolder_REPLY_SENDER
    REPLY_ALL = _MailFolder.MailFolder_REPLY_ALL
    REPLY_LIST = _MailFolder.MailFolder_REPLY_LIST
    FOLLOWUP_TO_NEWSGROUP = _MailFolder.MailFolder_FOLLOWUP_TO_NEWSGROUP
    REPLY = _MailFolder.MailFolder_REPLY
    __swig_getmethods__["OpenFolder"] = lambda x: _MailFolder.MailFolder_OpenFolder
    if _newclass:OpenFolder = staticmethod(_MailFolder.MailFolder_OpenFolder)
    __swig_getmethods__["DeleteFolder"] = lambda x: _MailFolder.MailFolder_DeleteFolder
    if _newclass:DeleteFolder = staticmethod(_MailFolder.MailFolder_DeleteFolder)
    __swig_getmethods__["CreateFolder"] = lambda x: _MailFolder.MailFolder_CreateFolder
    if _newclass:CreateFolder = staticmethod(_MailFolder.MailFolder_CreateFolder)
    __swig_getmethods__["CanExit"] = lambda x: _MailFolder.MailFolder_CanExit
    if _newclass:CanExit = staticmethod(_MailFolder.MailFolder_CanExit)
    __swig_getmethods__["ConvertMessageStatusToString"] = lambda x: _MailFolder.MailFolder_ConvertMessageStatusToString
    if _newclass:ConvertMessageStatusToString = staticmethod(_MailFolder.MailFolder_ConvertMessageStatusToString)
    __swig_getmethods__["Subscribe"] = lambda x: _MailFolder.MailFolder_Subscribe
    if _newclass:Subscribe = staticmethod(_MailFolder.MailFolder_Subscribe)
    def ListFolders(*args): return apply(_MailFolder.MailFolder_ListFolders,args)
    def GetName(*args): return apply(_MailFolder.MailFolder_GetName,args)
    def CountNewMessages(*args): return apply(_MailFolder.MailFolder_CountNewMessages,args)
    def CountRecentMessages(*args): return apply(_MailFolder.MailFolder_CountRecentMessages,args)
    def Ping(*args): return apply(_MailFolder.MailFolder_Ping,args)
    def GetMessage(*args): return apply(_MailFolder.MailFolder_GetMessage,args)
    def DeleteMessage(*args): return apply(_MailFolder.MailFolder_DeleteMessage,args)
    def UnDeleteMessage(*args): return apply(_MailFolder.MailFolder_UnDeleteMessage,args)
    def SetMessageFlag(*args): return apply(_MailFolder.MailFolder_SetMessageFlag,args)
    def SetFlag(*args): return apply(_MailFolder.MailFolder_SetFlag,args)
    def SetSequenceFlag(*args): return apply(_MailFolder.MailFolder_SetSequenceFlag,args)
    def AppendMessage(*args): return apply(_MailFolder.MailFolder_AppendMessage,args)
    def ExpungeMessages(*args): return apply(_MailFolder.MailFolder_ExpungeMessages,args)
    def SearchMessages(*args): return apply(_MailFolder.MailFolder_SearchMessages,args)
    def GetProfile(*args): return apply(_MailFolder.MailFolder_GetProfile,args)
    def GetClassName(*args): return apply(_MailFolder.MailFolder_GetClassName,args)
    def SaveMessages(*args): return apply(_MailFolder.MailFolder_SaveMessages,args)
    def SaveMessagesToFile(*args): return apply(_MailFolder.MailFolder_SaveMessagesToFile,args)
    def DeleteOrTrashMessages(*args): return apply(_MailFolder.MailFolder_DeleteOrTrashMessages,args)
    def DeleteMessages(*args): return apply(_MailFolder.MailFolder_DeleteMessages,args)
    def UnDeleteMessages(*args): return apply(_MailFolder.MailFolder_UnDeleteMessages,args)
    def ReplyMessages(*args): return apply(_MailFolder.MailFolder_ReplyMessages,args)
    def ForwardMessages(*args): return apply(_MailFolder.MailFolder_ForwardMessages,args)
    def Lock(*args): return apply(_MailFolder.MailFolder_Lock,args)
    def UnLock(*args): return apply(_MailFolder.MailFolder_UnLock,args)
    def IsLocked(*args): return apply(_MailFolder.MailFolder_IsLocked,args)
    def GetHeaders(*args): return apply(_MailFolder.MailFolder_GetHeaders,args)
    def GetType(*args): return apply(_MailFolder.MailFolder_GetType,args)
    def GetFlags(*args): return apply(_MailFolder.MailFolder_GetFlags,args)
    def ApplyFilterRules(*args): return apply(_MailFolder.MailFolder_ApplyFilterRules,args)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C MailFolder instance at %s>" % (self.this,)

class MailFolderPtr(MailFolder):
    def __init__(self,this):
        _swig_setattr(self, MailFolder, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MailFolder, 'thisown', 0)
        _swig_setattr(self, MailFolder,self.__class__,MailFolder)
_MailFolder.MailFolder_swigregister(MailFolderPtr)
MailFolder_OpenFolder = _MailFolder.MailFolder_OpenFolder

MailFolder_DeleteFolder = _MailFolder.MailFolder_DeleteFolder

MailFolder_CreateFolder = _MailFolder.MailFolder_CreateFolder

MailFolder_CanExit = _MailFolder.MailFolder_CanExit

MailFolder_ConvertMessageStatusToString = _MailFolder.MailFolder_ConvertMessageStatusToString

MailFolder_Subscribe = _MailFolder.MailFolder_Subscribe


class HeaderInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeaderInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeaderInfo, name)
    def GetSubject(*args): return apply(_MailFolder.HeaderInfo_GetSubject,args)
    def GetFrom(*args): return apply(_MailFolder.HeaderInfo_GetFrom,args)
    def GetDate(*args): return apply(_MailFolder.HeaderInfo_GetDate,args)
    def GetId(*args): return apply(_MailFolder.HeaderInfo_GetId,args)
    def GetReferences(*args): return apply(_MailFolder.HeaderInfo_GetReferences,args)
    def GetUId(*args): return apply(_MailFolder.HeaderInfo_GetUId,args)
    def GetStatus(*args): return apply(_MailFolder.HeaderInfo_GetStatus,args)
    def GetSize(*args): return apply(_MailFolder.HeaderInfo_GetSize,args)
    def GetLines(*args): return apply(_MailFolder.HeaderInfo_GetLines,args)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C HeaderInfo instance at %s>" % (self.this,)

class HeaderInfoPtr(HeaderInfo):
    def __init__(self,this):
        _swig_setattr(self, HeaderInfo, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HeaderInfo, 'thisown', 0)
        _swig_setattr(self, HeaderInfo,self.__class__,HeaderInfo)
_MailFolder.HeaderInfo_swigregister(HeaderInfoPtr)

class HeaderInfoList(MObject.MObjectRC):
    __swig_setmethods__ = {}
    for _s in [MObject.MObjectRC]: __swig_setmethods__.update(_s.__swig_setmethods__)
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeaderInfoList, name, value)
    __swig_getmethods__ = {}
    for _s in [MObject.MObjectRC]: __swig_getmethods__.update(_s.__swig_getmethods__)
    __getattr__ = lambda self, name: _swig_getattr(self, HeaderInfoList, name)
    def Count(*args): return apply(_MailFolder.HeaderInfoList_Count,args)
    def GetItem(*args): return apply(_MailFolder.HeaderInfoList_GetItem,args)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C HeaderInfoList instance at %s>" % (self.this,)

class HeaderInfoListPtr(HeaderInfoList):
    def __init__(self,this):
        _swig_setattr(self, HeaderInfoList, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, HeaderInfoList, 'thisown', 0)
        _swig_setattr(self, HeaderInfoList,self.__class__,HeaderInfoList)
_MailFolder.HeaderInfoList_swigregister(HeaderInfoListPtr)

class FolderListingEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FolderListingEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FolderListingEntry, name)
    def GetName(*args): return apply(_MailFolder.FolderListingEntry_GetName,args)
    def GetAttribute(*args): return apply(_MailFolder.FolderListingEntry_GetAttribute,args)
    def __del__(self, destroy= _MailFolder.delete_FolderListingEntry):
        try:
            if self.thisown: destroy(self)
        except: pass
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<C FolderListingEntry instance at %s>" % (self.this,)

class FolderListingEntryPtr(FolderListingEntry):
    def __init__(self,this):
        _swig_setattr(self, FolderListingEntry, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, FolderListingEntry, 'thisown', 0)
        _swig_setattr(self, FolderListingEntry,self.__class__,FolderListingEntry)
_MailFolder.FolderListingEntry_swigregister(FolderListingEntryPtr)


