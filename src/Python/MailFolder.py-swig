# This file was created automatically by SWIG.
import MailFolderc

from MString import *

from MProfile import *

from MObject import *

from Message import *
class MailFolderPtr(MObjectRCPtr):
    MSG_STAT_NONE = MailFolderc.MailFolder_MSG_STAT_NONE
    MSG_STAT_SEEN = MailFolderc.MailFolder_MSG_STAT_SEEN
    MSG_STAT_DELETED = MailFolderc.MailFolder_MSG_STAT_DELETED
    MSG_STAT_ANSWERED = MailFolderc.MailFolder_MSG_STAT_ANSWERED
    MSG_STAT_RECENT = MailFolderc.MailFolder_MSG_STAT_RECENT
    MSG_STAT_SEARCHED = MailFolderc.MailFolder_MSG_STAT_SEARCHED
    MSG_STAT_FLAGGED = MailFolderc.MailFolder_MSG_STAT_FLAGGED
    NONE = MailFolderc.MailFolder_NONE
    REPLY_FOLLOWUP = MailFolderc.MailFolder_REPLY_FOLLOWUP
    UF_Undefined = MailFolderc.MailFolder_UF_Undefined
    UF_UpdateCount = MailFolderc.MailFolder_UF_UpdateCount
    UF_DetectNewMail = MailFolderc.MailFolder_UF_DetectNewMail
    UF_Default = MailFolderc.MailFolder_UF_Default
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def ListFolders(self,arg0,arg1,arg2,arg3,arg4,arg5):
        val = MailFolderc.MailFolder_ListFolders(self.this,arg0,arg1.this,arg2,arg3.this,arg4,arg5)
        return val
    def GetName(self):
        val = MailFolderc.MailFolder_GetName(self.this)
        val = StringPtr(val)
        val.thisown = 1
        return val
    def CountMessages(self,arg0,arg1):
        val = MailFolderc.MailFolder_CountMessages(self.this,arg0,arg1)
        return val
    def CountNewMessages(self):
        val = MailFolderc.MailFolder_CountNewMessages(self.this)
        return val
    def CountRecentMessages(self):
        val = MailFolderc.MailFolder_CountRecentMessages(self.this)
        return val
    def CountNewMessagesQuick(self):
        val = MailFolderc.MailFolder_CountNewMessagesQuick(self.this)
        return val
    def Ping(self):
        val = MailFolderc.MailFolder_Ping(self.this)
        return val
    def GetMessage(self,arg0):
        val = MailFolderc.MailFolder_GetMessage(self.this,arg0)
        val = MessagePtr(val)
        return val
    def DeleteMessage(self,arg0):
        val = MailFolderc.MailFolder_DeleteMessage(self.this,arg0)
        return val
    def UnDeleteMessage(self,arg0):
        val = MailFolderc.MailFolder_UnDeleteMessage(self.this,arg0)
        return val
    def SetMessageFlag(self,arg0,arg1,*args):
        val = apply(MailFolderc.MailFolder_SetMessageFlag,(self.this,arg0,arg1,)+args)
        return val
    def SetFlag(self,arg0,arg1,*args):
        val = apply(MailFolderc.MailFolder_SetFlag,(self.this,arg0,arg1,)+args)
        return val
    def SetSequenceFlag(self,arg0,arg1,*args):
        val = apply(MailFolderc.MailFolder_SetSequenceFlag,(self.this,arg0.this,arg1,)+args)
        return val
    def AppendMessage(self,arg0):
        val = MailFolderc.MailFolder_AppendMessage(self.this,arg0.this)
        return val
    def ExpungeMessages(self):
        val = MailFolderc.MailFolder_ExpungeMessages(self.this)
        return val
    def SearchMessages(self,arg0):
        val = MailFolderc.MailFolder_SearchMessages(self.this,arg0.this)
        return val
    def GetProfile(self):
        val = MailFolderc.MailFolder_GetProfile(self.this)
        val = ProfilePtr(val)
        return val
    def GetClassName(self):
        val = MailFolderc.MailFolder_GetClassName(self.this)
        return val
    def SetUpdateFlags(self,arg0):
        val = MailFolderc.MailFolder_SetUpdateFlags(self.this,arg0)
        return val
    def GetUpdateFlags(self):
        val = MailFolderc.MailFolder_GetUpdateFlags(self.this)
        return val
    def SaveMessages(self,arg0,arg1,arg2,arg3):
        val = MailFolderc.MailFolder_SaveMessages(self.this,arg0,arg1.this,arg2,arg3)
        return val
    def SaveMessagesToFile(self,arg0,arg1):
        val = MailFolderc.MailFolder_SaveMessagesToFile(self.this,arg0,arg1.this)
        return val
    def DeleteOrTrashMessages(self,arg0):
        val = MailFolderc.MailFolder_DeleteOrTrashMessages(self.this,arg0)
        return val
    def DeleteMessages(self,arg0,arg1):
        val = MailFolderc.MailFolder_DeleteMessages(self.this,arg0,arg1)
        return val
    def UnDeleteMessages(self,arg0):
        val = MailFolderc.MailFolder_UnDeleteMessages(self.this,arg0)
        return val
    def SaveMessagesToFolder(self,arg0,arg1):
        val = MailFolderc.MailFolder_SaveMessagesToFolder(self.this,arg0,arg1.this)
        return val
    def ReplyMessages(self,arg0,arg1,arg2):
        val = MailFolderc.MailFolder_ReplyMessages(self.this,arg0,arg1,arg2.this)
        return val
    def ForwardMessages(self,arg0,arg1,arg2):
        val = MailFolderc.MailFolder_ForwardMessages(self.this,arg0,arg1,arg2.this)
        return val
    def Lock(self):
        val = MailFolderc.MailFolder_Lock(self.this)
        return val
    def UnLock(self):
        val = MailFolderc.MailFolder_UnLock(self.this)
        return val
    def IsLocked(self):
        val = MailFolderc.MailFolder_IsLocked(self.this)
        return val
    def GetHeaders(self):
        val = MailFolderc.MailFolder_GetHeaders(self.this)
        val = HeaderInfoListPtr(val)
        return val
    def GetType(self):
        val = MailFolderc.MailFolder_GetType(self.this)
        return val
    def GetFlags(self):
        val = MailFolderc.MailFolder_GetFlags(self.this)
        return val
    def NeedsNetwork(self):
        val = MailFolderc.MailFolder_NeedsNetwork(self.this)
        return val
    def SetRetrievalLimit(self,arg0):
        val = MailFolderc.MailFolder_SetRetrievalLimit(self.this,arg0)
        return val
    def GetAuthInfo(self,arg0,arg1):
        val = MailFolderc.MailFolder_GetAuthInfo(self.this,arg0.this,arg1.this)
        return val
    def ApplyFilterRules(self,arg0):
        val = MailFolderc.MailFolder_ApplyFilterRules(self.this,arg0)
        return val
    def RequestUpdate(self):
        val = MailFolderc.MailFolder_RequestUpdate(self.this)
        return val
    def __repr__(self):
        return "<C MailFolder instance>"
class MailFolder(MailFolderPtr):
    def __init__(self,this):
        self.this = this




class MailFolderLockPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def __del__(self):
        if self.thisown == 1 :
            MailFolderc.delete_MailFolderLock(self.this)
    def Locked(self):
        val = MailFolderc.MailFolderLock_Locked(self.this)
        return val
    def __repr__(self):
        return "<C MailFolderLock instance>"
class MailFolderLock(MailFolderLockPtr):
    def __init__(self,arg0) :
        self.this = MailFolderc.new_MailFolderLock(arg0.this)
        self.thisown = 1




class HeaderInfoPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def GetSubject(self):
        val = MailFolderc.HeaderInfo_GetSubject(self.this)
        val = StringPtr(val)
        return val
    def GetFrom(self):
        val = MailFolderc.HeaderInfo_GetFrom(self.this)
        val = StringPtr(val)
        return val
    def GetDate(self):
        val = MailFolderc.HeaderInfo_GetDate(self.this)
        return val
    def GetId(self):
        val = MailFolderc.HeaderInfo_GetId(self.this)
        val = StringPtr(val)
        return val
    def GetReferences(self):
        val = MailFolderc.HeaderInfo_GetReferences(self.this)
        val = StringPtr(val)
        return val
    def GetUId(self):
        val = MailFolderc.HeaderInfo_GetUId(self.this)
        return val
    def GetStatus(self):
        val = MailFolderc.HeaderInfo_GetStatus(self.this)
        return val
    def GetSize(self):
        val = MailFolderc.HeaderInfo_GetSize(self.this)
        return val
    def SizeOf(self):
        val = MailFolderc.HeaderInfo_SizeOf(self.this)
        return val
    def GetIndentation(self):
        val = MailFolderc.HeaderInfo_GetIndentation(self.this)
        return val
    def SetIndentation(self,arg0):
        val = MailFolderc.HeaderInfo_SetIndentation(self.this,arg0)
        return val
    def __repr__(self):
        return "<C HeaderInfo instance>"
class HeaderInfo(HeaderInfoPtr):
    def __init__(self,this):
        self.this = this




class HeaderInfoListPtr(MObjectRCPtr):
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def Count(self):
        val = MailFolderc.HeaderInfoList_Count(self.this)
        return val
    def GetArray(self):
        val = MailFolderc.HeaderInfoList_GetArray(self.this)
        val = HeaderInfoPtr(val)
        return val
    def Swap(self,arg0,arg1):
        val = MailFolderc.HeaderInfoList_Swap(self.this,arg0,arg1)
        return val
    def SetTranslationTable(self,arg0):
        val = MailFolderc.HeaderInfoList_SetTranslationTable(self.this,arg0)
        return val
    def __repr__(self):
        return "<C HeaderInfoList instance>"
class HeaderInfoList(HeaderInfoListPtr):
    def __init__(self,this):
        self.this = this




class FolderListingEntryPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def GetName(self):
        val = MailFolderc.FolderListingEntry_GetName(self.this)
        val = StringPtr(val)
        return val
    def GetAttribute(self):
        val = MailFolderc.FolderListingEntry_GetAttribute(self.this)
        return val
    def __del__(self):
        if self.thisown == 1 :
            MailFolderc.delete_FolderListingEntry(self.this)
    def __repr__(self):
        return "<C FolderListingEntry instance>"
class FolderListingEntry(FolderListingEntryPtr):
    def __init__(self,this):
        self.this = this




class FolderListingPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def GetDelimiter(self):
        val = MailFolderc.FolderListing_GetDelimiter(self.this)
        return val
    def CountEntries(self):
        val = MailFolderc.FolderListing_CountEntries(self.this)
        return val
    def GetFirstEntry(self,arg0):
        val = MailFolderc.FolderListing_GetFirstEntry(self.this,arg0)
        val = FolderListingEntryPtr(val)
        return val
    def GetNextEntry(self,arg0):
        val = MailFolderc.FolderListing_GetNextEntry(self.this,arg0)
        val = FolderListingEntryPtr(val)
        return val
    def __del__(self):
        if self.thisown == 1 :
            MailFolderc.delete_FolderListing(self.this)
    def __repr__(self):
        return "<C FolderListing instance>"
class FolderListing(FolderListingPtr):
    def __init__(self,this):
        self.this = this




class SearchCriteriumPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def __setattr__(self,name,value):
        if name == "m_What" :
            MailFolderc.SearchCriterium_m_What_set(self.this,value)
            return
        if name == "m_Invert" :
            MailFolderc.SearchCriterium_m_Invert_set(self.this,value)
            return
        if name == "m_Key" :
            MailFolderc.SearchCriterium_m_Key_set(self.this,value.this)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "m_What" : 
            return MailFolderc.SearchCriterium_m_What_get(self.this)
        if name == "m_Invert" : 
            return MailFolderc.SearchCriterium_m_Invert_get(self.this)
        if name == "m_Key" : 
            return StringPtr(MailFolderc.SearchCriterium_m_Key_get(self.this))
        raise AttributeError,name
    def __repr__(self):
        return "<C SearchCriterium instance>"
class SearchCriterium(SearchCriteriumPtr):
    def __init__(self) :
        self.this = MailFolderc.new_SearchCriterium()
        self.thisown = 1






#-------------- FUNCTION WRAPPERS ------------------

def MailFolder_OpenFolder(arg0,arg1,*args):
    argl = map(None,args)
    try: argl[0] = argl[0].this
    except: pass
    try: argl[1] = argl[1].this
    except: pass
    try: argl[2] = argl[2].this
    except: pass
    try: argl[3] = argl[3].this
    except: pass
    try: argl[4] = argl[4].this
    except: pass
    args = tuple(argl)
    val = apply(MailFolderc.MailFolder_OpenFolder,(arg0,arg1.this,)+args)
    val = MailFolderPtr(val)
    return val

MailFolder_DeleteFolder = MailFolderc.MailFolder_DeleteFolder

def MailFolder_CreateFolder(arg0,arg1,arg2,arg3,arg4):
    val = MailFolderc.MailFolder_CreateFolder(arg0.this,arg1,arg2,arg3.this,arg4.this)
    return val

def MailFolder_CanExit(arg0):
    val = MailFolderc.MailFolder_CanExit(arg0.this)
    return val

def MailFolder_ConvertMessageStatusToString(arg0):
    val = MailFolderc.MailFolder_ConvertMessageStatusToString(arg0)
    val = StringPtr(val)
    val.thisown = 1
    return val

def MailFolder_Subscribe(arg0,arg1,arg2,*args):
    val = apply(MailFolderc.MailFolder_Subscribe,(arg0.this,arg1,arg2.this,)+args)
    return val



#-------------- VARIABLE WRAPPERS ------------------

MSO_NONE = MailFolderc.MSO_NONE
MSO_DATE = MailFolderc.MSO_DATE
MSO_DATE_REV = MailFolderc.MSO_DATE_REV
MSO_SUBJECT = MailFolderc.MSO_SUBJECT
MSO_SUBJECT_REV = MailFolderc.MSO_SUBJECT_REV
MSO_AUTHOR = MailFolderc.MSO_AUTHOR
MSO_AUTHOR_REV = MailFolderc.MSO_AUTHOR_REV
MSO_STATUS = MailFolderc.MSO_STATUS
MSO_STATUS_REV = MailFolderc.MSO_STATUS_REV
MSO_SCORE = MailFolderc.MSO_SCORE
MSO_SCORE_REV = MailFolderc.MSO_SCORE_REV
MSO_THREAD = MailFolderc.MSO_THREAD
MSO_THREAD_REV = MailFolderc.MSO_THREAD_REV
