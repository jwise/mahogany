# This file was created automatically by SWIG.
import MailFolderc

from MString import *

from MProfile import *

from MObject import *

from Message import *
class MailFolderPtr(MObjectRCPtr):
    MSG_STAT_NONE = MailFolderc.MailFolder_MSG_STAT_NONE
    MSG_STAT_SEEN = MailFolderc.MailFolder_MSG_STAT_SEEN
    MSG_STAT_DELETED = MailFolderc.MailFolder_MSG_STAT_DELETED
    MSG_STAT_ANSWERED = MailFolderc.MailFolder_MSG_STAT_ANSWERED
    MSG_STAT_RECENT = MailFolderc.MailFolder_MSG_STAT_RECENT
    MSG_STAT_SEARCHED = MailFolderc.MailFolder_MSG_STAT_SEARCHED
    MSG_STAT_FLAGGED = MailFolderc.MailFolder_MSG_STAT_FLAGGED
    NONE = MailFolderc.MailFolder_NONE
    REPLY_FOLLOWUP = MailFolderc.MailFolder_REPLY_FOLLOWUP
    UF_Undefined = MailFolderc.MailFolder_UF_Undefined
    UF_UpdateCount = MailFolderc.MailFolder_UF_UpdateCount
    UF_DetectNewMail = MailFolderc.MailFolder_UF_DetectNewMail
    UF_Default = MailFolderc.MailFolder_UF_Default
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def ListFolders(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_ListFolders,(self,) + _args, _kwargs)
        return val
    def GetName(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetName,(self,) + _args, _kwargs)
        if val: val = StringPtr(val) ; val.thisown = 1
        return val
    def CountMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_CountMessages,(self,) + _args, _kwargs)
        return val
    def CountNewMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_CountNewMessages,(self,) + _args, _kwargs)
        return val
    def CountRecentMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_CountRecentMessages,(self,) + _args, _kwargs)
        return val
    def CountNewMessagesQuick(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_CountNewMessagesQuick,(self,) + _args, _kwargs)
        return val
    def Ping(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_Ping,(self,) + _args, _kwargs)
        return val
    def GetMessage(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetMessage,(self,) + _args, _kwargs)
        if val: val = MessagePtr(val) 
        return val
    def DeleteMessage(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_DeleteMessage,(self,) + _args, _kwargs)
        return val
    def UnDeleteMessage(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_UnDeleteMessage,(self,) + _args, _kwargs)
        return val
    def SetMessageFlag(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SetMessageFlag,(self,) + _args, _kwargs)
        return val
    def SetFlag(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SetFlag,(self,) + _args, _kwargs)
        return val
    def SetSequenceFlag(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SetSequenceFlag,(self,) + _args, _kwargs)
        return val
    def AppendMessage(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_AppendMessage,(self,) + _args, _kwargs)
        return val
    def ExpungeMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_ExpungeMessages,(self,) + _args, _kwargs)
        return val
    def SearchMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SearchMessages,(self,) + _args, _kwargs)
        return val
    def GetProfile(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetProfile,(self,) + _args, _kwargs)
        if val: val = ProfileBasePtr(val) 
        return val
    def GetClassName(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetClassName,(self,) + _args, _kwargs)
        return val
    def SetUpdateFlags(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SetUpdateFlags,(self,) + _args, _kwargs)
        return val
    def GetUpdateFlags(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetUpdateFlags,(self,) + _args, _kwargs)
        return val
    def SaveMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SaveMessages,(self,) + _args, _kwargs)
        return val
    def SaveMessagesToFile(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SaveMessagesToFile,(self,) + _args, _kwargs)
        return val
    def DeleteOrTrashMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_DeleteOrTrashMessages,(self,) + _args, _kwargs)
        return val
    def DeleteMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_DeleteMessages,(self,) + _args, _kwargs)
        return val
    def UnDeleteMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_UnDeleteMessages,(self,) + _args, _kwargs)
        return val
    def SaveMessagesToFolder(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SaveMessagesToFolder,(self,) + _args, _kwargs)
        return val
    def ReplyMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_ReplyMessages,(self,) + _args, _kwargs)
        return val
    def ForwardMessages(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_ForwardMessages,(self,) + _args, _kwargs)
        return val
    def Lock(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_Lock,(self,) + _args, _kwargs)
        return val
    def UnLock(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_UnLock,(self,) + _args, _kwargs)
        return val
    def IsLocked(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_IsLocked,(self,) + _args, _kwargs)
        return val
    def GetHeaders(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetHeaders,(self,) + _args, _kwargs)
        if val: val = HeaderInfoListPtr(val) 
        return val
    def GetType(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetType,(self,) + _args, _kwargs)
        return val
    def GetFlags(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetFlags,(self,) + _args, _kwargs)
        return val
    def NeedsNetwork(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_NeedsNetwork,(self,) + _args, _kwargs)
        return val
    def SetRetrievalLimit(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_SetRetrievalLimit,(self,) + _args, _kwargs)
        return val
    def GetAuthInfo(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_GetAuthInfo,(self,) + _args, _kwargs)
        return val
    def ApplyFilterRules(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_ApplyFilterRules,(self,) + _args, _kwargs)
        return val
    def RequestUpdate(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolder_RequestUpdate,(self,) + _args, _kwargs)
        return val
    def __repr__(self):
        return "<C MailFolder instance at %s>" % (self.this,)
class MailFolder(MailFolderPtr):
    def __init__(self,this):
        self.this = this




class MailFolderLockPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def __del__(self,MailFolderc=MailFolderc):
        if self.thisown == 1 :
            MailFolderc.delete_MailFolderLock(self)
    def Locked(self, *_args, **_kwargs):
        val = apply(MailFolderc.MailFolderLock_Locked,(self,) + _args, _kwargs)
        return val
    def __repr__(self):
        return "<C MailFolderLock instance at %s>" % (self.this,)
class MailFolderLock(MailFolderLockPtr):
    def __init__(self,*_args,**_kwargs):
        self.this = apply(MailFolderc.new_MailFolderLock,_args,_kwargs)
        self.thisown = 1




class HeaderInfoPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def GetSubject(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetSubject,(self,) + _args, _kwargs)
        if val: val = StringPtr(val) 
        return val
    def GetFrom(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetFrom,(self,) + _args, _kwargs)
        if val: val = StringPtr(val) 
        return val
    def GetDate(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetDate,(self,) + _args, _kwargs)
        return val
    def GetId(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetId,(self,) + _args, _kwargs)
        if val: val = StringPtr(val) 
        return val
    def GetReferences(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetReferences,(self,) + _args, _kwargs)
        if val: val = StringPtr(val) 
        return val
    def GetUId(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetUId,(self,) + _args, _kwargs)
        return val
    def GetStatus(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetStatus,(self,) + _args, _kwargs)
        return val
    def GetSize(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetSize,(self,) + _args, _kwargs)
        return val
    def SizeOf(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_SizeOf,(self,) + _args, _kwargs)
        return val
    def GetIndentation(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_GetIndentation,(self,) + _args, _kwargs)
        return val
    def SetIndentation(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfo_SetIndentation,(self,) + _args, _kwargs)
        return val
    def __repr__(self):
        return "<C HeaderInfo instance at %s>" % (self.this,)
class HeaderInfo(HeaderInfoPtr):
    def __init__(self,this):
        self.this = this




class HeaderInfoListPtr(MObjectRCPtr):
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def Count(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfoList_Count,(self,) + _args, _kwargs)
        return val
    def GetArray(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfoList_GetArray,(self,) + _args, _kwargs)
        if val: val = HeaderInfoPtr(val) 
        return val
    def Swap(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfoList_Swap,(self,) + _args, _kwargs)
        return val
    def SetTranslationTable(self, *_args, **_kwargs):
        val = apply(MailFolderc.HeaderInfoList_SetTranslationTable,(self,) + _args, _kwargs)
        return val
    def __repr__(self):
        return "<C HeaderInfoList instance at %s>" % (self.this,)
class HeaderInfoList(HeaderInfoListPtr):
    def __init__(self,this):
        self.this = this




class FolderListingEntryPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def GetName(self, *_args, **_kwargs):
        val = apply(MailFolderc.FolderListingEntry_GetName,(self,) + _args, _kwargs)
        if val: val = StringPtr(val) 
        return val
    def GetAttribute(self, *_args, **_kwargs):
        val = apply(MailFolderc.FolderListingEntry_GetAttribute,(self,) + _args, _kwargs)
        return val
    def __del__(self,MailFolderc=MailFolderc):
        if self.thisown == 1 :
            MailFolderc.delete_FolderListingEntry(self)
    def __repr__(self):
        return "<C FolderListingEntry instance at %s>" % (self.this,)
class FolderListingEntry(FolderListingEntryPtr):
    def __init__(self,this):
        self.this = this




class FolderListingPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def GetDelimiter(self, *_args, **_kwargs):
        val = apply(MailFolderc.FolderListing_GetDelimiter,(self,) + _args, _kwargs)
        return val
    def CountEntries(self, *_args, **_kwargs):
        val = apply(MailFolderc.FolderListing_CountEntries,(self,) + _args, _kwargs)
        return val
    def GetFirstEntry(self, *_args, **_kwargs):
        val = apply(MailFolderc.FolderListing_GetFirstEntry,(self,) + _args, _kwargs)
        if val: val = FolderListingEntryPtr(val) 
        return val
    def GetNextEntry(self, *_args, **_kwargs):
        val = apply(MailFolderc.FolderListing_GetNextEntry,(self,) + _args, _kwargs)
        if val: val = FolderListingEntryPtr(val) 
        return val
    def __del__(self,MailFolderc=MailFolderc):
        if self.thisown == 1 :
            MailFolderc.delete_FolderListing(self)
    def __repr__(self):
        return "<C FolderListing instance at %s>" % (self.this,)
class FolderListing(FolderListingPtr):
    def __init__(self,this):
        self.this = this




class SearchCriteriumPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def __setattr__(self,name,value):
        if name == "m_What" :
            MailFolderc.SearchCriterium_m_What_set(self,value)
            return
        if name == "m_Invert" :
            MailFolderc.SearchCriterium_m_Invert_set(self,value)
            return
        if name == "m_Key" :
            MailFolderc.SearchCriterium_m_Key_set(self,value.this)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "m_What" : 
            return MailFolderc.SearchCriterium_m_What_get(self)
        if name == "m_Invert" : 
            return MailFolderc.SearchCriterium_m_Invert_get(self)
        if name == "m_Key" : 
            return StringPtr(MailFolderc.SearchCriterium_m_Key_get(self))
        raise AttributeError,name
    def __repr__(self):
        return "<C SearchCriterium instance at %s>" % (self.this,)
class SearchCriterium(SearchCriteriumPtr):
    def __init__(self,*_args,**_kwargs):
        self.this = apply(MailFolderc.new_SearchCriterium,_args,_kwargs)
        self.thisown = 1






#-------------- FUNCTION WRAPPERS ------------------

def MailFolder_OpenFolder(*_args, **_kwargs):
    val = apply(MailFolderc.MailFolder_OpenFolder,_args,_kwargs)
    if val: val = MailFolderPtr(val)
    return val

MailFolder_DeleteFolder = MailFolderc.MailFolder_DeleteFolder

MailFolder_CreateFolder = MailFolderc.MailFolder_CreateFolder

MailFolder_CanExit = MailFolderc.MailFolder_CanExit

def MailFolder_ConvertMessageStatusToString(*_args, **_kwargs):
    val = apply(MailFolderc.MailFolder_ConvertMessageStatusToString,_args,_kwargs)
    if val: val = StringPtr(val); val.thisown = 1
    return val

MailFolder_Subscribe = MailFolderc.MailFolder_Subscribe



#-------------- VARIABLE WRAPPERS ------------------

MSO_NONE = MailFolderc.MSO_NONE
MSO_DATE = MailFolderc.MSO_DATE
MSO_DATE_REV = MailFolderc.MSO_DATE_REV
MSO_SUBJECT = MailFolderc.MSO_SUBJECT
MSO_SUBJECT_REV = MailFolderc.MSO_SUBJECT_REV
MSO_AUTHOR = MailFolderc.MSO_AUTHOR
MSO_AUTHOR_REV = MailFolderc.MSO_AUTHOR_REV
MSO_STATUS = MailFolderc.MSO_STATUS
MSO_STATUS_REV = MailFolderc.MSO_STATUS_REV
MSO_SCORE = MailFolderc.MSO_SCORE
MSO_SCORE_REV = MailFolderc.MSO_SCORE_REV
MSO_THREAD = MailFolderc.MSO_THREAD
MSO_THREAD_REV = MailFolderc.MSO_THREAD_REV
