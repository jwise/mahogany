# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MailFolder', [dirname(__file__)])
        except ImportError:
            import _MailFolder
            return _MailFolder
        if fp is not None:
            try:
                _mod = imp.load_module('_MailFolder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MailFolder = swig_import_helper()
    del swig_import_helper
else:
    import _MailFolder
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class MailFolder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MailFolder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MailFolder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MSG_STAT_NEW = _MailFolder.MailFolder_MSG_STAT_NEW
    MSG_STAT_SEEN = _MailFolder.MailFolder_MSG_STAT_SEEN
    MSG_STAT_DELETED = _MailFolder.MailFolder_MSG_STAT_DELETED
    MSG_STAT_ANSWERED = _MailFolder.MailFolder_MSG_STAT_ANSWERED
    MSG_STAT_RECENT = _MailFolder.MailFolder_MSG_STAT_RECENT
    MSG_STAT_SEARCHED = _MailFolder.MailFolder_MSG_STAT_SEARCHED
    MSG_STAT_FLAGGED = _MailFolder.MailFolder_MSG_STAT_FLAGGED
    REPLY_SENDER = _MailFolder.MailFolder_REPLY_SENDER
    REPLY_ALL = _MailFolder.MailFolder_REPLY_ALL
    REPLY_LIST = _MailFolder.MailFolder_REPLY_LIST
    FOLLOWUP_TO_NEWSGROUP = _MailFolder.MailFolder_FOLLOWUP_TO_NEWSGROUP
    REPLY = _MailFolder.MailFolder_REPLY
    Normal = _MailFolder.MailFolder_Normal
    ReadOnly = _MailFolder.MailFolder_ReadOnly
    HalfOpen = _MailFolder.MailFolder_HalfOpen
    SEQ_UID = _MailFolder.MailFolder_SEQ_UID
    SEQ_MSGNO = _MailFolder.MailFolder_SEQ_MSGNO
    SEARCH_MSGNO = _MailFolder.MailFolder_SEARCH_MSGNO
    SEARCH_SET = _MailFolder.MailFolder_SEARCH_SET
    SEARCH_UNSET = _MailFolder.MailFolder_SEARCH_UNSET
    SEARCH_UNDELETED = _MailFolder.MailFolder_SEARCH_UNDELETED
    SEARCH_UID = _MailFolder.MailFolder_SEARCH_UID
    DELETE_ALLOW_TRASH = _MailFolder.MailFolder_DELETE_ALLOW_TRASH
    DELETE_NO_TRASH = _MailFolder.MailFolder_DELETE_NO_TRASH
    DELETE_NO_EXPUNGE = _MailFolder.MailFolder_DELETE_NO_EXPUNGE
    DELETE_EXPUNGE = _MailFolder.MailFolder_DELETE_EXPUNGE
    __swig_getmethods__["OpenFolder"] = lambda x: _MailFolder.MailFolder_OpenFolder
    if _newclass:OpenFolder = staticmethod(_MailFolder.MailFolder_OpenFolder)
    __swig_getmethods__["HalfOpenFolder"] = lambda x: _MailFolder.MailFolder_HalfOpenFolder
    if _newclass:HalfOpenFolder = staticmethod(_MailFolder.MailFolder_HalfOpenFolder)
    __swig_getmethods__["CloseFolder"] = lambda x: _MailFolder.MailFolder_CloseFolder
    if _newclass:CloseFolder = staticmethod(_MailFolder.MailFolder_CloseFolder)
    __swig_getmethods__["CheckFolder"] = lambda x: _MailFolder.MailFolder_CheckFolder
    if _newclass:CheckFolder = staticmethod(_MailFolder.MailFolder_CheckFolder)
    __swig_getmethods__["GetOpenedFolderFor"] = lambda x: _MailFolder.MailFolder_GetOpenedFolderFor
    if _newclass:GetOpenedFolderFor = staticmethod(_MailFolder.MailFolder_GetOpenedFolderFor)
    __swig_getmethods__["CloseAll"] = lambda x: _MailFolder.MailFolder_CloseAll
    if _newclass:CloseAll = staticmethod(_MailFolder.MailFolder_CloseAll)
    __swig_getmethods__["PingAllOpened"] = lambda x: _MailFolder.MailFolder_PingAllOpened
    if _newclass:PingAllOpened = staticmethod(_MailFolder.MailFolder_PingAllOpened)
    __swig_getmethods__["DeleteFolder"] = lambda x: _MailFolder.MailFolder_DeleteFolder
    if _newclass:DeleteFolder = staticmethod(_MailFolder.MailFolder_DeleteFolder)
    __swig_getmethods__["Rename"] = lambda x: _MailFolder.MailFolder_Rename
    if _newclass:Rename = staticmethod(_MailFolder.MailFolder_Rename)
    __swig_getmethods__["ClearFolder"] = lambda x: _MailFolder.MailFolder_ClearFolder
    if _newclass:ClearFolder = staticmethod(_MailFolder.MailFolder_ClearFolder)
    __swig_getmethods__["CanExit"] = lambda x: _MailFolder.MailFolder_CanExit
    if _newclass:CanExit = staticmethod(_MailFolder.MailFolder_CanExit)
    __swig_getmethods__["SaveMessageAsMBOX"] = lambda x: _MailFolder.MailFolder_SaveMessageAsMBOX
    if _newclass:SaveMessageAsMBOX = staticmethod(_MailFolder.MailFolder_SaveMessageAsMBOX)
    __swig_getmethods__["ForwardMessage"] = lambda x: _MailFolder.MailFolder_ForwardMessage
    if _newclass:ForwardMessage = staticmethod(_MailFolder.MailFolder_ForwardMessage)
    __swig_getmethods__["ReplyMessage"] = lambda x: _MailFolder.MailFolder_ReplyMessage
    if _newclass:ReplyMessage = staticmethod(_MailFolder.MailFolder_ReplyMessage)
    __swig_getmethods__["Subscribe"] = lambda x: _MailFolder.MailFolder_Subscribe
    if _newclass:Subscribe = staticmethod(_MailFolder.MailFolder_Subscribe)
    def ListFolders(self, *args): return _MailFolder.MailFolder_ListFolders(self, *args)
    def IsOpened(self): return _MailFolder.MailFolder_IsOpened(self)
    def IsReadOnly(self): return _MailFolder.MailFolder_IsReadOnly(self)
    def CanSetFlag(self, *args): return _MailFolder.MailFolder_CanSetFlag(self, *args)
    def GetName(self): return _MailFolder.MailFolder_GetName(self)
    def GetType(self): return _MailFolder.MailFolder_GetType(self)
    def GetFlags(self): return _MailFolder.MailFolder_GetFlags(self)
    def GetProfile(self): return _MailFolder.MailFolder_GetProfile(self)
    def IsInCriticalSection(self): return _MailFolder.MailFolder_IsInCriticalSection(self)
    def GetClassName(self): return _MailFolder.MailFolder_GetClassName(self)
    def CreateServerInfo(self, *args): return _MailFolder.MailFolder_CreateServerInfo(self, *args)
    __swig_getmethods__["GetFolderDelimiter"] = lambda x: _MailFolder.MailFolder_GetFolderDelimiter
    if _newclass:GetFolderDelimiter = staticmethod(_MailFolder.MailFolder_GetFolderDelimiter)
    __swig_getmethods__["GetLogicalMailboxName"] = lambda x: _MailFolder.MailFolder_GetLogicalMailboxName
    if _newclass:GetLogicalMailboxName = staticmethod(_MailFolder.MailFolder_GetLogicalMailboxName)
    def NeedsNetwork(self): return _MailFolder.MailFolder_NeedsNetwork(self)
    def GetHeaders(self): return _MailFolder.MailFolder_GetHeaders(self)
    def GetHeaderInfo(self, *args): return _MailFolder.MailFolder_GetHeaderInfo(self, *args)
    def GetMessageCount(self): return _MailFolder.MailFolder_GetMessageCount(self)
    def IsEmpty(self): return _MailFolder.MailFolder_IsEmpty(self)
    def CountNewMessages(self): return _MailFolder.MailFolder_CountNewMessages(self)
    def CountRecentMessages(self): return _MailFolder.MailFolder_CountRecentMessages(self)
    def CountUnseenMessages(self): return _MailFolder.MailFolder_CountUnseenMessages(self)
    def CountDeletedMessages(self): return _MailFolder.MailFolder_CountDeletedMessages(self)
    def CountAllMessages(self, *args): return _MailFolder.MailFolder_CountAllMessages(self, *args)
    def GetMsgnoFromUID(self, *args): return _MailFolder.MailFolder_GetMsgnoFromUID(self, *args)
    def Ping(self): return _MailFolder.MailFolder_Ping(self)
    def Checkpoint(self): return _MailFolder.MailFolder_Checkpoint(self)
    def GetMessage(self, *args): return _MailFolder.MailFolder_GetMessage(self, *args)
    def DeleteMessage(self, *args): return _MailFolder.MailFolder_DeleteMessage(self, *args)
    def UnDeleteMessage(self, *args): return _MailFolder.MailFolder_UnDeleteMessage(self, *args)
    def SetMessageFlag(self, *args): return _MailFolder.MailFolder_SetMessageFlag(self, *args)
    def SetSequenceFlag(self, *args): return _MailFolder.MailFolder_SetSequenceFlag(self, *args)
    def SetFlagForAll(self, *args): return _MailFolder.MailFolder_SetFlagForAll(self, *args)
    def SetFlag(self, *args): return _MailFolder.MailFolder_SetFlag(self, *args)
    def AppendMessage(self, *args): return _MailFolder.MailFolder_AppendMessage(self, *args)
    def ExpungeMessages(self): return _MailFolder.MailFolder_ExpungeMessages(self)
    def SearchByFlag(self, *args): return _MailFolder.MailFolder_SearchByFlag(self, *args)
    def SearchMessages(self, *args): return _MailFolder.MailFolder_SearchMessages(self, *args)
    def SaveMessages(self, *args): return _MailFolder.MailFolder_SaveMessages(self, *args)
    def SaveMessagesToFile(self, *args): return _MailFolder.MailFolder_SaveMessagesToFile(self, *args)
    def DeleteOrTrashMessages(self, *args): return _MailFolder.MailFolder_DeleteOrTrashMessages(self, *args)
    def DeleteMessages(self, *args): return _MailFolder.MailFolder_DeleteMessages(self, *args)
    def UnDeleteMessages(self, *args): return _MailFolder.MailFolder_UnDeleteMessages(self, *args)
    def ReplyMessages(self, *args): return _MailFolder.MailFolder_ReplyMessages(self, *args)
    def ForwardMessages(self, *args): return _MailFolder.MailFolder_ForwardMessages(self, *args)
    def SortMessages(self, *args): return _MailFolder.MailFolder_SortMessages(self, *args)
    def ThreadMessages(self, *args): return _MailFolder.MailFolder_ThreadMessages(self, *args)
    def Lock(self): return _MailFolder.MailFolder_Lock(self)
    def UnLock(self): return _MailFolder.MailFolder_UnLock(self)
    def IsLocked(self): return _MailFolder.MailFolder_IsLocked(self)
    def ProcessNewMail(self, *args): return _MailFolder.MailFolder_ProcessNewMail(self, *args)
    def ApplyFilterRules(self, *args): return _MailFolder.MailFolder_ApplyFilterRules(self, *args)
    __swig_getmethods__["ExistsMH"] = lambda x: _MailFolder.MailFolder_ExistsMH
    if _newclass:ExistsMH = staticmethod(_MailFolder.MailFolder_ExistsMH)
    __swig_getmethods__["InitializeMH"] = lambda x: _MailFolder.MailFolder_InitializeMH
    if _newclass:InitializeMH = staticmethod(_MailFolder.MailFolder_InitializeMH)
    __swig_getmethods__["InitializeNewsSpool"] = lambda x: _MailFolder.MailFolder_InitializeNewsSpool
    if _newclass:InitializeNewsSpool = staticmethod(_MailFolder.MailFolder_InitializeNewsSpool)
    __swig_getmethods__["GetImapSpec"] = lambda x: _MailFolder.MailFolder_GetImapSpec
    if _newclass:GetImapSpec = staticmethod(_MailFolder.MailFolder_GetImapSpec)
    __swig_getmethods__["SpecToFolderName"] = lambda x: _MailFolder.MailFolder_SpecToFolderName
    if _newclass:SpecToFolderName = staticmethod(_MailFolder.MailFolder_SpecToFolderName)
    __swig_getmethods__["GetMHFolderName"] = lambda x: _MailFolder.MailFolder_GetMHFolderName
    if _newclass:GetMHFolderName = staticmethod(_MailFolder.MailFolder_GetMHFolderName)
    __swig_getmethods__["ImportFoldersMH"] = lambda x: _MailFolder.MailFolder_ImportFoldersMH
    if _newclass:ImportFoldersMH = staticmethod(_MailFolder.MailFolder_ImportFoldersMH)
    __swig_getmethods__["Init"] = lambda x: _MailFolder.MailFolder_Init
    if _newclass:Init = staticmethod(_MailFolder.MailFolder_Init)
    __swig_getmethods__["CleanUp"] = lambda x: _MailFolder.MailFolder_CleanUp
    if _newclass:CleanUp = staticmethod(_MailFolder.MailFolder_CleanUp)
    def SetInteractiveFrame(self, *args): return _MailFolder.MailFolder_SetInteractiveFrame(self, *args)
    def GetInteractiveFrame(self): return _MailFolder.MailFolder_GetInteractiveFrame(self)
    __swig_getmethods__["GetLogCircle"] = lambda x: _MailFolder.MailFolder_GetLogCircle
    if _newclass:GetLogCircle = staticmethod(_MailFolder.MailFolder_GetLogCircle)
    def RequestUpdate(self): return _MailFolder.MailFolder_RequestUpdate(self)
    def SuspendUpdates(self): return _MailFolder.MailFolder_SuspendUpdates(self)
    def ResumeUpdates(self): return _MailFolder.MailFolder_ResumeUpdates(self)
    __swig_destroy__ = _MailFolder.delete_MailFolder
    __del__ = lambda self : None;
MailFolder_swigregister = _MailFolder.MailFolder_swigregister
MailFolder_swigregister(MailFolder)

def MailFolder_OpenFolder(*args):
  return _MailFolder.MailFolder_OpenFolder(*args)
MailFolder_OpenFolder = _MailFolder.MailFolder_OpenFolder

def MailFolder_HalfOpenFolder(*args):
  return _MailFolder.MailFolder_HalfOpenFolder(*args)
MailFolder_HalfOpenFolder = _MailFolder.MailFolder_HalfOpenFolder

def MailFolder_CloseFolder(*args):
  return _MailFolder.MailFolder_CloseFolder(*args)
MailFolder_CloseFolder = _MailFolder.MailFolder_CloseFolder

def MailFolder_CheckFolder(*args):
  return _MailFolder.MailFolder_CheckFolder(*args)
MailFolder_CheckFolder = _MailFolder.MailFolder_CheckFolder

def MailFolder_GetOpenedFolderFor(*args):
  return _MailFolder.MailFolder_GetOpenedFolderFor(*args)
MailFolder_GetOpenedFolderFor = _MailFolder.MailFolder_GetOpenedFolderFor

def MailFolder_CloseAll(opened = None):
  return _MailFolder.MailFolder_CloseAll(opened)
MailFolder_CloseAll = _MailFolder.MailFolder_CloseAll

def MailFolder_PingAllOpened(frame = None):
  return _MailFolder.MailFolder_PingAllOpened(frame)
MailFolder_PingAllOpened = _MailFolder.MailFolder_PingAllOpened

def MailFolder_DeleteFolder(*args):
  return _MailFolder.MailFolder_DeleteFolder(*args)
MailFolder_DeleteFolder = _MailFolder.MailFolder_DeleteFolder

def MailFolder_Rename(*args):
  return _MailFolder.MailFolder_Rename(*args)
MailFolder_Rename = _MailFolder.MailFolder_Rename

def MailFolder_ClearFolder(*args):
  return _MailFolder.MailFolder_ClearFolder(*args)
MailFolder_ClearFolder = _MailFolder.MailFolder_ClearFolder

def MailFolder_CanExit(*args):
  return _MailFolder.MailFolder_CanExit(*args)
MailFolder_CanExit = _MailFolder.MailFolder_CanExit

def MailFolder_SaveMessageAsMBOX(*args):
  return _MailFolder.MailFolder_SaveMessageAsMBOX(*args)
MailFolder_SaveMessageAsMBOX = _MailFolder.MailFolder_SaveMessageAsMBOX

def MailFolder_ForwardMessage(*args):
  return _MailFolder.MailFolder_ForwardMessage(*args)
MailFolder_ForwardMessage = _MailFolder.MailFolder_ForwardMessage

def MailFolder_ReplyMessage(*args):
  return _MailFolder.MailFolder_ReplyMessage(*args)
MailFolder_ReplyMessage = _MailFolder.MailFolder_ReplyMessage

def MailFolder_Subscribe(*args):
  return _MailFolder.MailFolder_Subscribe(*args)
MailFolder_Subscribe = _MailFolder.MailFolder_Subscribe

def MailFolder_GetFolderDelimiter(*args):
  return _MailFolder.MailFolder_GetFolderDelimiter(*args)
MailFolder_GetFolderDelimiter = _MailFolder.MailFolder_GetFolderDelimiter

def MailFolder_GetLogicalMailboxName(*args):
  return _MailFolder.MailFolder_GetLogicalMailboxName(*args)
MailFolder_GetLogicalMailboxName = _MailFolder.MailFolder_GetLogicalMailboxName

def MailFolder_ExistsMH():
  return _MailFolder.MailFolder_ExistsMH()
MailFolder_ExistsMH = _MailFolder.MailFolder_ExistsMH

def MailFolder_InitializeMH():
  return _MailFolder.MailFolder_InitializeMH()
MailFolder_InitializeMH = _MailFolder.MailFolder_InitializeMH

def MailFolder_InitializeNewsSpool():
  return _MailFolder.MailFolder_InitializeNewsSpool()
MailFolder_InitializeNewsSpool = _MailFolder.MailFolder_InitializeNewsSpool

def MailFolder_GetImapSpec(*args):
  return _MailFolder.MailFolder_GetImapSpec(*args)
MailFolder_GetImapSpec = _MailFolder.MailFolder_GetImapSpec

def MailFolder_SpecToFolderName(*args):
  return _MailFolder.MailFolder_SpecToFolderName(*args)
MailFolder_SpecToFolderName = _MailFolder.MailFolder_SpecToFolderName

def MailFolder_GetMHFolderName(*args):
  return _MailFolder.MailFolder_GetMHFolderName(*args)
MailFolder_GetMHFolderName = _MailFolder.MailFolder_GetMHFolderName

def MailFolder_ImportFoldersMH(*args):
  return _MailFolder.MailFolder_ImportFoldersMH(*args)
MailFolder_ImportFoldersMH = _MailFolder.MailFolder_ImportFoldersMH

def MailFolder_Init():
  return _MailFolder.MailFolder_Init()
MailFolder_Init = _MailFolder.MailFolder_Init

def MailFolder_CleanUp():
  return _MailFolder.MailFolder_CleanUp()
MailFolder_CleanUp = _MailFolder.MailFolder_CleanUp

def MailFolder_GetLogCircle():
  return _MailFolder.MailFolder_GetLogCircle()
MailFolder_GetLogCircle = _MailFolder.MailFolder_GetLogCircle

class SuspendFolderUpdates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SuspendFolderUpdates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SuspendFolderUpdates, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MailFolder.new_SuspendFolderUpdates(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MailFolder.delete_SuspendFolderUpdates
    __del__ = lambda self : None;
SuspendFolderUpdates_swigregister = _MailFolder.SuspendFolderUpdates_swigregister
SuspendFolderUpdates_swigregister(SuspendFolderUpdates)



