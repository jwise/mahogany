/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "MPython.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "MPython.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink(void);
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_MObjectRC swig_types[0] 
#define  SWIGTYPE_p_MailFolder__Params swig_types[1] 
#define  SWIGTYPE_p_size_t swig_types[2] 
#define  SWIGTYPE_p_SearchCriterium swig_types[3] 
#define  SWIGTYPE_p_HeaderInfoList swig_types[4] 
#define  SWIGTYPE_p_wxWindow swig_types[5] 
#define  SWIGTYPE_p_Profile swig_types[6] 
#define  SWIGTYPE_p_time_t swig_types[7] 
#define  SWIGTYPE_p_MFolderType swig_types[8] 
#define  SWIGTYPE_p_String swig_types[9] 
#define  SWIGTYPE_p_Message swig_types[10] 
#define  SWIGTYPE_p_Ticket swig_types[11] 
#define  SWIGTYPE_p_MFolder swig_types[12] 
#define  SWIGTYPE_p_UIdArray swig_types[13] 
#define  SWIGTYPE_p_UIdType swig_types[14] 
#define  SWIGTYPE_p_ASMailFolder swig_types[15] 
#define  SWIGTYPE_p_MailFolder swig_types[16] 
#define  SWIGTYPE_p_HeaderInfo swig_types[17] 
#define  SWIGTYPE_p_UserData swig_types[18] 
#define  SWIGTYPE_p_FolderListingEntry swig_types[19] 
#define  SWIGTYPE_p_MObject swig_types[20] 
static swig_type_info *swig_types[22];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _MailFolder.so
  ------------------------------------------------*/
#define SWIG_init    init_MailFolder

#define SWIG_name    "_MailFolder"

#include   "Mswig.h"
#include   "Mcommon.h"
#include   "MailFolder.h"
#include   "Profile.h"
#include   "HeaderInfo.h"
#include   "UIdArray.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_MailFolder_OpenFolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MFolder *arg1 = (MFolder *) 0 ;
    MailFolder *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_OpenFolder",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (MailFolder *)MailFolder::OpenFolder((MFolder const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MailFolder, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_DeleteFolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MFolder *arg1 = (MFolder *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_DeleteFolder",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)MailFolder::DeleteFolder((MFolder const *)arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_CreateFolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = 0 ;
    MFolderType arg2 ;
    int arg3 ;
    String *arg4 = 0 ;
    String *arg5 = 0 ;
    bool result;
    MFolderType *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOiOO:MailFolder_CreateFolder",&obj0,&obj1,&arg3,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_MFolderType,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)MailFolder::CreateFolder((String const &)*arg1,arg2,arg3,(String const &)*arg4,(String const &)*arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_CanExit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = (String *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_CanExit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)MailFolder::CanExit(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_ConvertMessageStatusToString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    SwigValueWrapper< String > result;
    
    if(!PyArg_ParseTuple(args,(char *)"i:MailFolder_ConvertMessageStatusToString",&arg1)) goto fail;
    result = MailFolder::ConvertMessageStatusToString(arg1);
    
    {
        String * resultptr;
        resultptr = new String((String &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_String, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_Subscribe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = 0 ;
    MFolderType arg2 ;
    String *arg3 = 0 ;
    bool arg4 = (bool) true ;
    bool result;
    MFolderType *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:MailFolder_Subscribe",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_MFolderType,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)MailFolder::Subscribe((String const &)*arg1,arg2,(String const &)*arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_ListFolders(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    ASMailFolder *arg2 = (ASMailFolder *) 0 ;
    String *arg3 = 0 ;
    bool arg4 ;
    String *arg5 = 0 ;
    UserData arg6 ;
    Ticket arg7 ;
    UserData *argp6 ;
    Ticket *argp7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:MailFolder_ListFolders",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ASMailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj5,(void **) &argp6, SWIGTYPE_p_UserData,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg6 = *argp6; 
    if ((SWIG_ConvertPtr(obj6,(void **) &argp7, SWIGTYPE_p_Ticket,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg7 = *argp7; 
    (arg1)->ListFolders(arg2,(String const &)*arg3,arg4,(String const &)*arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_GetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    SwigValueWrapper< String > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->GetName();
    
    {
        String * resultptr;
        resultptr = new String((String &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_String, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_CountNewMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_CountNewMessages",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->CountNewMessages();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_CountRecentMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_CountRecentMessages",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->CountRecentMessages();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_Ping(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_Ping",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->Ping();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_GetMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    unsigned long arg2 ;
    Message *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_GetMessage",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (Message *)(arg1)->GetMessage(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Message, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_DeleteMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    unsigned long arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_DeleteMessage",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->DeleteMessage(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_UnDeleteMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    unsigned long arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_UnDeleteMessage",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->UnDeleteMessage(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_SetMessageFlag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    unsigned long arg2 ;
    int arg3 ;
    bool arg4 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi|O:MailFolder_SetMessageFlag",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->SetMessageFlag(arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_SetFlag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray *arg2 = (UIdArray *) 0 ;
    int arg3 ;
    bool arg4 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi|O:MailFolder_SetFlag",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->SetFlag((UIdArray const *)arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_SetSequenceFlag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    String *arg2 = 0 ;
    int arg3 ;
    bool arg4 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi|O:MailFolder_SetSequenceFlag",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->SetSequenceFlag((String const &)*arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_AppendMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    Message *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_AppendMessage",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->AppendMessage((Message const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_ExpungeMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_ExpungeMessages",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ExpungeMessages();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_SearchMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    SearchCriterium *arg2 = (SearchCriterium *) 0 ;
    UIdArray *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_SearchMessages",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SearchCriterium,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (UIdArray *)(arg1)->SearchMessages((SearchCriterium const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_UIdArray, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_GetProfile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    Profile *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetProfile",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Profile *)(arg1)->GetProfile();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Profile, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_GetClassName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetClassName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->GetClassName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_SaveMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray *arg2 = (UIdArray *) 0 ;
    String *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MailFolder_SaveMessages",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->SaveMessages((UIdArray const *)arg2,(String const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_SaveMessagesToFile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray *arg2 = (UIdArray *) 0 ;
    String *arg3 = 0 ;
    wxWindow *arg4 = (wxWindow *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MailFolder_SaveMessagesToFile",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->SaveMessagesToFile((UIdArray const *)arg2,(String const &)*arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_DeleteOrTrashMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray *arg2 = (UIdArray *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_DeleteOrTrashMessages",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->DeleteOrTrashMessages((UIdArray const *)arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_DeleteMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray *arg2 = (UIdArray *) 0 ;
    bool arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MailFolder_DeleteMessages",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->DeleteMessages((UIdArray const *)arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_UnDeleteMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray *arg2 = (UIdArray *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_UnDeleteMessages",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->UnDeleteMessages((UIdArray const *)arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_ReplyMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray *arg2 = (UIdArray *) 0 ;
    MailFolder::Params *arg3 = 0 ;
    wxWindow *arg4 = (wxWindow *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MailFolder_ReplyMessages",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_MailFolder__Params,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ReplyMessages((UIdArray const *)arg2,(MailFolder::Params const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_ForwardMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray *arg2 = (UIdArray *) 0 ;
    MailFolder::Params *arg3 = 0 ;
    wxWindow *arg4 = (wxWindow *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MailFolder_ForwardMessages",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_MailFolder__Params,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_wxWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ForwardMessages((UIdArray const *)arg2,(MailFolder::Params const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_Lock(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_Lock",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->Lock();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_UnLock(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_UnLock",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->UnLock();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_IsLocked(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_IsLocked",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsLocked();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_GetHeaders(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    HeaderInfoList *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetHeaders",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (HeaderInfoList *)(arg1)->GetHeaders();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_HeaderInfoList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_GetType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    MFolderType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->GetType();
    
    {
        MFolderType * resultptr;
        resultptr = new MFolderType((MFolderType &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_MFolderType, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_GetFlags(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetFlags",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->GetFlags();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MailFolder_ApplyFilterRules(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg1 = (MailFolder *) 0 ;
    UIdArray arg2 ;
    int result;
    UIdArray *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_ApplyFilterRules",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MailFolder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_UIdArray,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (int)(arg1)->ApplyFilterRules(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MailFolder_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_MailFolder, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_HeaderInfo_GetSubject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetSubject",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        String const &_result_ref = (arg1)->GetSubject();
        result = (String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfo_GetFrom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetFrom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        String const &_result_ref = (arg1)->GetFrom();
        result = (String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfo_GetDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    time_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->GetDate();
    
    {
        time_t * resultptr;
        resultptr = new time_t((time_t &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_time_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfo_GetId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetId",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        String const &_result_ref = (arg1)->GetId();
        result = (String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfo_GetReferences(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetReferences",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        String const &_result_ref = (arg1)->GetReferences();
        result = (String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfo_GetUId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    UIdType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetUId",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->GetUId();
    
    {
        UIdType * resultptr;
        resultptr = new UIdType((UIdType &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_UIdType, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfo_GetStatus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetStatus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->GetStatus();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfo_GetSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetSize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->GetSize();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfo_GetLines(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg1 = (HeaderInfo *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetLines",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->GetLines();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HeaderInfo_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_HeaderInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_HeaderInfoList_Count(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfoList *arg1 = (HeaderInfoList *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfoList_Count",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfoList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Count();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderInfoList_GetItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfoList *arg1 = (HeaderInfoList *) 0 ;
    size_t arg2 ;
    HeaderInfo *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HeaderInfoList_GetItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderInfoList,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (size_t) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (HeaderInfo *)(arg1)->GetItem(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_HeaderInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HeaderInfoList_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_HeaderInfoList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_FolderListingEntry_GetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FolderListingEntry *arg1 = (FolderListingEntry *) 0 ;
    String *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FolderListingEntry_GetName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FolderListingEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        String const &_result_ref = (arg1)->GetName();
        result = (String *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FolderListingEntry_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FolderListingEntry *arg1 = (FolderListingEntry *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FolderListingEntry_GetAttribute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FolderListingEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->GetAttribute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FolderListingEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FolderListingEntry *arg1 = (FolderListingEntry *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FolderListingEntry",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FolderListingEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FolderListingEntry_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_FolderListingEntry, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"MailFolder_OpenFolder", _wrap_MailFolder_OpenFolder, METH_VARARGS },
	 { (char *)"MailFolder_DeleteFolder", _wrap_MailFolder_DeleteFolder, METH_VARARGS },
	 { (char *)"MailFolder_CreateFolder", _wrap_MailFolder_CreateFolder, METH_VARARGS },
	 { (char *)"MailFolder_CanExit", _wrap_MailFolder_CanExit, METH_VARARGS },
	 { (char *)"MailFolder_ConvertMessageStatusToString", _wrap_MailFolder_ConvertMessageStatusToString, METH_VARARGS },
	 { (char *)"MailFolder_Subscribe", _wrap_MailFolder_Subscribe, METH_VARARGS },
	 { (char *)"MailFolder_ListFolders", _wrap_MailFolder_ListFolders, METH_VARARGS },
	 { (char *)"MailFolder_GetName", _wrap_MailFolder_GetName, METH_VARARGS },
	 { (char *)"MailFolder_CountNewMessages", _wrap_MailFolder_CountNewMessages, METH_VARARGS },
	 { (char *)"MailFolder_CountRecentMessages", _wrap_MailFolder_CountRecentMessages, METH_VARARGS },
	 { (char *)"MailFolder_Ping", _wrap_MailFolder_Ping, METH_VARARGS },
	 { (char *)"MailFolder_GetMessage", _wrap_MailFolder_GetMessage, METH_VARARGS },
	 { (char *)"MailFolder_DeleteMessage", _wrap_MailFolder_DeleteMessage, METH_VARARGS },
	 { (char *)"MailFolder_UnDeleteMessage", _wrap_MailFolder_UnDeleteMessage, METH_VARARGS },
	 { (char *)"MailFolder_SetMessageFlag", _wrap_MailFolder_SetMessageFlag, METH_VARARGS },
	 { (char *)"MailFolder_SetFlag", _wrap_MailFolder_SetFlag, METH_VARARGS },
	 { (char *)"MailFolder_SetSequenceFlag", _wrap_MailFolder_SetSequenceFlag, METH_VARARGS },
	 { (char *)"MailFolder_AppendMessage", _wrap_MailFolder_AppendMessage, METH_VARARGS },
	 { (char *)"MailFolder_ExpungeMessages", _wrap_MailFolder_ExpungeMessages, METH_VARARGS },
	 { (char *)"MailFolder_SearchMessages", _wrap_MailFolder_SearchMessages, METH_VARARGS },
	 { (char *)"MailFolder_GetProfile", _wrap_MailFolder_GetProfile, METH_VARARGS },
	 { (char *)"MailFolder_GetClassName", _wrap_MailFolder_GetClassName, METH_VARARGS },
	 { (char *)"MailFolder_SaveMessages", _wrap_MailFolder_SaveMessages, METH_VARARGS },
	 { (char *)"MailFolder_SaveMessagesToFile", _wrap_MailFolder_SaveMessagesToFile, METH_VARARGS },
	 { (char *)"MailFolder_DeleteOrTrashMessages", _wrap_MailFolder_DeleteOrTrashMessages, METH_VARARGS },
	 { (char *)"MailFolder_DeleteMessages", _wrap_MailFolder_DeleteMessages, METH_VARARGS },
	 { (char *)"MailFolder_UnDeleteMessages", _wrap_MailFolder_UnDeleteMessages, METH_VARARGS },
	 { (char *)"MailFolder_ReplyMessages", _wrap_MailFolder_ReplyMessages, METH_VARARGS },
	 { (char *)"MailFolder_ForwardMessages", _wrap_MailFolder_ForwardMessages, METH_VARARGS },
	 { (char *)"MailFolder_Lock", _wrap_MailFolder_Lock, METH_VARARGS },
	 { (char *)"MailFolder_UnLock", _wrap_MailFolder_UnLock, METH_VARARGS },
	 { (char *)"MailFolder_IsLocked", _wrap_MailFolder_IsLocked, METH_VARARGS },
	 { (char *)"MailFolder_GetHeaders", _wrap_MailFolder_GetHeaders, METH_VARARGS },
	 { (char *)"MailFolder_GetType", _wrap_MailFolder_GetType, METH_VARARGS },
	 { (char *)"MailFolder_GetFlags", _wrap_MailFolder_GetFlags, METH_VARARGS },
	 { (char *)"MailFolder_ApplyFilterRules", _wrap_MailFolder_ApplyFilterRules, METH_VARARGS },
	 { (char *)"MailFolder_swigregister", MailFolder_swigregister, METH_VARARGS },
	 { (char *)"HeaderInfo_GetSubject", _wrap_HeaderInfo_GetSubject, METH_VARARGS },
	 { (char *)"HeaderInfo_GetFrom", _wrap_HeaderInfo_GetFrom, METH_VARARGS },
	 { (char *)"HeaderInfo_GetDate", _wrap_HeaderInfo_GetDate, METH_VARARGS },
	 { (char *)"HeaderInfo_GetId", _wrap_HeaderInfo_GetId, METH_VARARGS },
	 { (char *)"HeaderInfo_GetReferences", _wrap_HeaderInfo_GetReferences, METH_VARARGS },
	 { (char *)"HeaderInfo_GetUId", _wrap_HeaderInfo_GetUId, METH_VARARGS },
	 { (char *)"HeaderInfo_GetStatus", _wrap_HeaderInfo_GetStatus, METH_VARARGS },
	 { (char *)"HeaderInfo_GetSize", _wrap_HeaderInfo_GetSize, METH_VARARGS },
	 { (char *)"HeaderInfo_GetLines", _wrap_HeaderInfo_GetLines, METH_VARARGS },
	 { (char *)"HeaderInfo_swigregister", HeaderInfo_swigregister, METH_VARARGS },
	 { (char *)"HeaderInfoList_Count", _wrap_HeaderInfoList_Count, METH_VARARGS },
	 { (char *)"HeaderInfoList_GetItem", _wrap_HeaderInfoList_GetItem, METH_VARARGS },
	 { (char *)"HeaderInfoList_swigregister", HeaderInfoList_swigregister, METH_VARARGS },
	 { (char *)"FolderListingEntry_GetName", _wrap_FolderListingEntry_GetName, METH_VARARGS },
	 { (char *)"FolderListingEntry_GetAttribute", _wrap_FolderListingEntry_GetAttribute, METH_VARARGS },
	 { (char *)"delete_FolderListingEntry", _wrap_delete_FolderListingEntry, METH_VARARGS },
	 { (char *)"FolderListingEntry_swigregister", FolderListingEntry_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_MailFolderTo_p_MObjectRC(void *x) {
    return (void *)((MObjectRC *)  ((MailFolder *) x));
}
static void *_p_ProfileTo_p_MObjectRC(void *x) {
    return (void *)((MObjectRC *)  ((Profile *) x));
}
static void *_p_HeaderInfoListTo_p_MObjectRC(void *x) {
    return (void *)((MObjectRC *)  ((HeaderInfoList *) x));
}
static void *_p_MailFolderTo_p_MObject(void *x) {
    return (void *)((MObject *) (MObjectRC *) ((MailFolder *) x));
}
static void *_p_MObjectRCTo_p_MObject(void *x) {
    return (void *)((MObject *)  ((MObjectRC *) x));
}
static void *_p_ProfileTo_p_MObject(void *x) {
    return (void *)((MObject *) (MObjectRC *) ((Profile *) x));
}
static void *_p_HeaderInfoListTo_p_MObject(void *x) {
    return (void *)((MObject *) (MObjectRC *) ((HeaderInfoList *) x));
}
static swig_type_info _swigt__p_MObjectRC[] = {{"_p_MObjectRC", 0, "MObjectRC *", 0},{"_p_MailFolder", _p_MailFolderTo_p_MObjectRC},{"_p_MObjectRC"},{"_p_Profile", _p_ProfileTo_p_MObjectRC},{"_p_HeaderInfoList", _p_HeaderInfoListTo_p_MObjectRC},{0}};
static swig_type_info _swigt__p_MailFolder__Params[] = {{"_p_MailFolder__Params", 0, "MailFolder::Params *", 0},{"_p_MailFolder__Params"},{0}};
static swig_type_info _swigt__p_size_t[] = {{"_p_size_t", 0, "size_t *", 0},{"_p_size_t"},{0}};
static swig_type_info _swigt__p_SearchCriterium[] = {{"_p_SearchCriterium", 0, "SearchCriterium *", 0},{"_p_SearchCriterium"},{0}};
static swig_type_info _swigt__p_HeaderInfoList[] = {{"_p_HeaderInfoList", 0, "HeaderInfoList *", 0},{"_p_HeaderInfoList"},{0}};
static swig_type_info _swigt__p_wxWindow[] = {{"_p_wxWindow", 0, "wxWindow *", 0},{"_p_wxWindow"},{0}};
static swig_type_info _swigt__p_Profile[] = {{"_p_Profile", 0, "Profile *", 0},{"_p_Profile"},{0}};
static swig_type_info _swigt__p_time_t[] = {{"_p_time_t", 0, "time_t *", 0},{"_p_time_t"},{0}};
static swig_type_info _swigt__p_MFolderType[] = {{"_p_MFolderType", 0, "MFolderType *", 0},{"_p_MFolderType"},{0}};
static swig_type_info _swigt__p_String[] = {{"_p_String", 0, "String *", 0},{"_p_String"},{0}};
static swig_type_info _swigt__p_Message[] = {{"_p_Message", 0, "Message *", 0},{"_p_Message"},{0}};
static swig_type_info _swigt__p_Ticket[] = {{"_p_Ticket", 0, "Ticket *", 0},{"_p_Ticket"},{0}};
static swig_type_info _swigt__p_MFolder[] = {{"_p_MFolder", 0, "MFolder *", 0},{"_p_MFolder"},{0}};
static swig_type_info _swigt__p_UIdArray[] = {{"_p_UIdArray", 0, "UIdArray *", 0},{"_p_UIdArray"},{0}};
static swig_type_info _swigt__p_UIdType[] = {{"_p_UIdType", 0, "UIdType *", 0},{"_p_UIdType"},{0}};
static swig_type_info _swigt__p_ASMailFolder[] = {{"_p_ASMailFolder", 0, "ASMailFolder *", 0},{"_p_ASMailFolder"},{0}};
static swig_type_info _swigt__p_MailFolder[] = {{"_p_MailFolder", 0, "MailFolder *", 0},{"_p_MailFolder"},{0}};
static swig_type_info _swigt__p_HeaderInfo[] = {{"_p_HeaderInfo", 0, "HeaderInfo *", 0},{"_p_HeaderInfo"},{0}};
static swig_type_info _swigt__p_UserData[] = {{"_p_UserData", 0, "UserData *", 0},{"_p_UserData"},{0}};
static swig_type_info _swigt__p_FolderListingEntry[] = {{"_p_FolderListingEntry", 0, "FolderListingEntry *", 0},{"_p_FolderListingEntry"},{0}};
static swig_type_info _swigt__p_MObject[] = {{"_p_MObject", 0, "MObject *", 0},{"_p_MailFolder", _p_MailFolderTo_p_MObject},{"_p_MObjectRC", _p_MObjectRCTo_p_MObject},{"_p_Profile", _p_ProfileTo_p_MObject},{"_p_HeaderInfoList", _p_HeaderInfoListTo_p_MObject},{"_p_MObject"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_MObjectRC, 
_swigt__p_MailFolder__Params, 
_swigt__p_size_t, 
_swigt__p_SearchCriterium, 
_swigt__p_HeaderInfoList, 
_swigt__p_wxWindow, 
_swigt__p_Profile, 
_swigt__p_time_t, 
_swigt__p_MFolderType, 
_swigt__p_String, 
_swigt__p_Message, 
_swigt__p_Ticket, 
_swigt__p_MFolder, 
_swigt__p_UIdArray, 
_swigt__p_UIdType, 
_swigt__p_ASMailFolder, 
_swigt__p_MailFolder, 
_swigt__p_HeaderInfo, 
_swigt__p_UserData, 
_swigt__p_FolderListingEntry, 
_swigt__p_MObject, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"MailFolder_MSG_STAT_NEW", (long) MailFolder::MSG_STAT_NEW, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_MSG_STAT_SEEN", (long) MailFolder::MSG_STAT_SEEN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_MSG_STAT_DELETED", (long) MailFolder::MSG_STAT_DELETED, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_MSG_STAT_ANSWERED", (long) MailFolder::MSG_STAT_ANSWERED, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_MSG_STAT_RECENT", (long) MailFolder::MSG_STAT_RECENT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_MSG_STAT_SEARCHED", (long) MailFolder::MSG_STAT_SEARCHED, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_MSG_STAT_FLAGGED", (long) MailFolder::MSG_STAT_FLAGGED, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_REPLY_SENDER", (long) MailFolder::REPLY_SENDER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_REPLY_ALL", (long) MailFolder::REPLY_ALL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_REPLY_LIST", (long) MailFolder::REPLY_LIST, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_FOLLOWUP_TO_NEWSGROUP", (long) MailFolder::FOLLOWUP_TO_NEWSGROUP, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MailFolder_REPLY", (long) MailFolder::REPLY, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

