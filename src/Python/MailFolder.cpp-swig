/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.9u-20011023-2139
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#       endif
#endif
#else
#       define SWIGEXPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

typedef void *(*swig_converter_func)(void *);

#ifdef __cplusplus
extern "C" {
#endif

typedef struct swig_type_info {
  const char  *name;                 
  swig_converter_func converter;
  const char  *str;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
SWIGEXPORT(swig_type_info *) SWIG_TypeQuery(const char *);
#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  }
  return 0;
}

/* Cast a pointer (needed for C++ inheritance */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

#endif

#ifdef __cplusplus
}
#endif



/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include <stdlib.h>
#include "MPython.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) Py_DECREF(obj);
      return 0;
    } else {
      if (newref) Py_DECREF(obj);
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) Py_DECREF(obj);
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }
  return 0;

type_error:
  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[512];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif







/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_MObjectRC swig_types[0] 
#define  SWIGTYPE_p_MailFolder__Params swig_types[1] 
#define  SWIGTYPE_p_size_t swig_types[2] 
#define  SWIGTYPE_p_SearchCriterium swig_types[3] 
#define  SWIGTYPE_p_HeaderInfoList swig_types[4] 
#define  SWIGTYPE_p_wxWindow swig_types[5] 
#define  SWIGTYPE_p_Profile swig_types[6] 
#define  SWIGTYPE_p_time_t swig_types[7] 
#define  SWIGTYPE_p_FolderType swig_types[8] 
#define  SWIGTYPE_p_String swig_types[9] 
#define  SWIGTYPE_p_Message swig_types[10] 
#define  SWIGTYPE_p_Ticket swig_types[11] 
#define  SWIGTYPE_p_MFolder swig_types[12] 
#define  SWIGTYPE_p_UIdArray swig_types[13] 
#define  SWIGTYPE_p_UIdType swig_types[14] 
#define  SWIGTYPE_p_ASMailFolder swig_types[15] 
#define  SWIGTYPE_p_MailFolder swig_types[16] 
#define  SWIGTYPE_p_HeaderInfo swig_types[17] 
#define  SWIGTYPE_p_UserData swig_types[18] 
#define  SWIGTYPE_p_FolderListingEntry swig_types[19] 
#define  SWIGTYPE_p_MObject swig_types[20] 
static swig_type_info *swig_types[22];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= MailFolderc.so
  ------------------------------------------------*/
#define SWIG_init    initMailFolderc

#define SWIG_name    "MailFolderc"

#include   "Mswig.h"
#include   "MailFolder.h"
#include   "Profile.h"
#include   "HeaderInfo.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_MailFolder_OpenFolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    class MFolder *arg0 ;
    PyObject * argo0 =0 ;
    MailFolder *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_OpenFolder",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MFolder,1)) == -1) return NULL;
    result = (MailFolder *)MailFolder::OpenFolder((class MFolder const *)arg0);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MailFolder);
    return resultobj;
}


static PyObject *_wrap_MailFolder_DeleteFolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MFolder *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_DeleteFolder",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MFolder,1)) == -1) return NULL;
    result = (bool )MailFolder::DeleteFolder((MFolder const *)arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_CreateFolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg0 ;
    FolderType *arg1 ;
    int arg2 ;
    String *arg3 ;
    String *arg4 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo3 =0 ;
    PyObject * argo4 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOiOO:MailFolder_CreateFolder",&argo0,&argo1,&arg2,&argo3,&argo4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_String,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_FolderType,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_String,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_String,1)) == -1) return NULL;
    result = (bool )MailFolder::CreateFolder((String const &)*arg0,*arg1,arg2,(String const &)*arg3,(String const &)*arg4);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_CanExit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_CanExit",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_String,1)) == -1) return NULL;
    result = (bool )MailFolder::CanExit(arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_ConvertMessageStatusToString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    String *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"i:MailFolder_ConvertMessageStatusToString",&arg0)) return NULL;
    result = new String (MailFolder::ConvertMessageStatusToString(arg0));
    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_String);
    return resultobj;
}


static PyObject *_wrap_MailFolder_Subscribe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg0 ;
    FolderType *arg1 ;
    String *arg2 ;
    bool arg3 = true ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    int tempbool3 = (int) true ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|i:MailFolder_Subscribe",&argo0,&argo1,&argo2,&tempbool3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_String,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_FolderType,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_String,1)) == -1) return NULL;
    arg3 = (bool ) tempbool3;
    result = (bool )MailFolder::Subscribe((String const &)*arg0,*arg1,(String const &)*arg2,arg3);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_ListFolders(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    class ASMailFolder *arg1 ;
    String *arg2 ;
    bool arg3 ;
    String *arg4 ;
    UserData *arg5 ;
    Ticket *arg6 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    int tempbool3 ;
    PyObject * argo4 =0 ;
    PyObject * argo5 =0 ;
    PyObject * argo6 =0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOiOOO:MailFolder_ListFolders",&argo0,&argo1,&argo2,&tempbool3,&argo4,&argo5,&argo6)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_ASMailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_String,1)) == -1) return NULL;
    arg3 = (bool ) tempbool3;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_String,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo5,(void **) &arg5,SWIGTYPE_p_UserData,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo6,(void **) &arg6,SWIGTYPE_p_Ticket,1)) == -1) return NULL;
    arg0->ListFolders(arg1,(String const &)*arg2,arg3,(String const &)*arg4,*arg5,*arg6);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_MailFolder_GetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    String *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetName",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = new String (arg0->GetName());
    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_String);
    return resultobj;
}


static PyObject *_wrap_MailFolder_CountNewMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    unsigned long result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_CountNewMessages",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (unsigned long )arg0->CountNewMessages();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_CountRecentMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    unsigned long result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_CountRecentMessages",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (unsigned long )arg0->CountRecentMessages();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_Ping(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_Ping",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    arg0->Ping();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_MailFolder_GetMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    unsigned long arg1 ;
    PyObject * argo0 =0 ;
    Message *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:MailFolder_GetMessage",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (Message *)arg0->GetMessage(arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Message);
    return resultobj;
}


static PyObject *_wrap_MailFolder_DeleteMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    unsigned long arg1 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:MailFolder_DeleteMessage",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (bool )arg0->DeleteMessage(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_UnDeleteMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    unsigned long arg1 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:MailFolder_UnDeleteMessage",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (bool )arg0->UnDeleteMessage(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_SetMessageFlag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    unsigned long arg1 ;
    int arg2 ;
    bool arg3 = true ;
    PyObject * argo0 =0 ;
    int tempbool3 = (int) true ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oli|i:MailFolder_SetMessageFlag",&argo0,&arg1,&arg2,&tempbool3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    arg3 = (bool ) tempbool3;
    result = (bool )arg0->SetMessageFlag(arg1,arg2,arg3);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_SetFlag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    int arg2 ;
    bool arg3 = true ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int tempbool3 = (int) true ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi|i:MailFolder_SetFlag",&argo0,&argo1,&arg2,&tempbool3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    arg3 = (bool ) tempbool3;
    result = (bool )arg0->SetFlag((UIdArray const *)arg1,arg2,arg3);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_SetSequenceFlag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    String *arg1 ;
    int arg2 ;
    bool arg3 = true ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int tempbool3 = (int) true ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi|i:MailFolder_SetSequenceFlag",&argo0,&argo1,&arg2,&tempbool3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_String,1)) == -1) return NULL;
    arg3 = (bool ) tempbool3;
    result = (bool )arg0->SetSequenceFlag((String const &)*arg1,arg2,arg3);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_AppendMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    Message *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_AppendMessage",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Message,1)) == -1) return NULL;
    result = (bool )arg0->AppendMessage((Message const &)*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_ExpungeMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_ExpungeMessages",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    arg0->ExpungeMessages();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_MailFolder_SearchMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    class SearchCriterium *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    UIdArray *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_SearchMessages",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_SearchCriterium,1)) == -1) return NULL;
    result = (UIdArray *)arg0->SearchMessages((class SearchCriterium const *)arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_UIdArray);
    return resultobj;
}


static PyObject *_wrap_MailFolder_GetProfile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    Profile *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetProfile",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (Profile *)arg0->GetProfile();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Profile);
    return resultobj;
}


static PyObject *_wrap_MailFolder_GetClassName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    char *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetClassName",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (char *)arg0->GetClassName();
    resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_SaveMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    String *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MailFolder_SaveMessages",&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_String,1)) == -1) return NULL;
    result = (bool )arg0->SaveMessages((UIdArray const *)arg1,(String const &)*arg2);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_SaveMessagesToFile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    String *arg2 ;
    wxWindow *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    PyObject * argo3 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MailFolder_SaveMessagesToFile",&argo0,&argo1,&argo2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_String,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_wxWindow,1)) == -1) return NULL;
    result = (bool )arg0->SaveMessagesToFile((UIdArray const *)arg1,(String const &)*arg2,arg3);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_DeleteOrTrashMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_DeleteOrTrashMessages",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    result = (bool )arg0->DeleteOrTrashMessages((UIdArray const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_DeleteMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    bool arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int tempbool2 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:MailFolder_DeleteMessages",&argo0,&argo1,&tempbool2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    arg2 = (bool ) tempbool2;
    result = (bool )arg0->DeleteMessages((UIdArray const *)arg1,arg2);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_UnDeleteMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_UnDeleteMessages",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    result = (bool )arg0->UnDeleteMessages((UIdArray const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_ReplyMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    MailFolder::Params *arg2 ;
    wxWindow *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MailFolder_ReplyMessages",&argo0,&argo1,&argo2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_MailFolder__Params,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_wxWindow,1)) == -1) return NULL;
    arg0->ReplyMessages((UIdArray const *)arg1,(MailFolder::Params const &)*arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_MailFolder_ForwardMessages(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    MailFolder::Params *arg2 ;
    wxWindow *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MailFolder_ForwardMessages",&argo0,&argo1,&argo2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_MailFolder__Params,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_wxWindow,1)) == -1) return NULL;
    arg0->ForwardMessages((UIdArray const *)arg1,(MailFolder::Params const &)*arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_MailFolder_Lock(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_Lock",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (bool )arg0->Lock();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_UnLock(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_UnLock",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    arg0->UnLock();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_MailFolder_IsLocked(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_IsLocked",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (bool )arg0->IsLocked();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_GetHeaders(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    class HeaderInfoList *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetHeaders",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (class HeaderInfoList *)arg0->GetHeaders();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_HeaderInfoList);
    return resultobj;
}


static PyObject *_wrap_MailFolder_GetType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    FolderType *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetType",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = new FolderType (arg0->GetType());
    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_FolderType);
    return resultobj;
}


static PyObject *_wrap_MailFolder_GetFlags(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MailFolder_GetFlags",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    result = (int )arg0->GetFlags();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_MailFolder_ApplyFilterRules(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MailFolder *arg0 ;
    UIdArray *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MailFolder_ApplyFilterRules",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_MailFolder,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_UIdArray,1)) == -1) return NULL;
    result = (int )arg0->ApplyFilterRules(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetSubject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    String *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetSubject",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    String const &_result_ref = arg0->GetSubject();
    result = (String *) &_result_ref;
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetFrom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    String *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetFrom",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    String const &_result_ref = arg0->GetFrom();
    result = (String *) &_result_ref;
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    time_t *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetDate",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    result = new time_t (arg0->GetDate());
    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_time_t);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    String *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetId",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    String const &_result_ref = arg0->GetId();
    result = (String *) &_result_ref;
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetReferences(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    String *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetReferences",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    String const &_result_ref = arg0->GetReferences();
    result = (String *) &_result_ref;
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetUId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    UIdType *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetUId",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    result = new UIdType (arg0->GetUId());
    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_UIdType);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetStatus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetStatus",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    result = (int )arg0->GetStatus();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    unsigned long result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetSize",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    result = (unsigned long )arg0->GetSize();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_HeaderInfo_GetLines(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfo *arg0 ;
    PyObject * argo0 =0 ;
    unsigned long result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfo_GetLines",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfo,1)) == -1) return NULL;
    result = (unsigned long )arg0->GetLines();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_HeaderInfoList_Count(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfoList *arg0 ;
    PyObject * argo0 =0 ;
    size_t *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderInfoList_Count",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfoList,1)) == -1) return NULL;
    result = new size_t (arg0->Count());
    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_size_t);
    return resultobj;
}


static PyObject *_wrap_HeaderInfoList_GetItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderInfoList *arg0 ;
    size_t *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    HeaderInfo *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HeaderInfoList_GetItem",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_HeaderInfoList,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_size_t,1)) == -1) return NULL;
    result = (HeaderInfo *)arg0->GetItem(*arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_HeaderInfo);
    return resultobj;
}


static PyObject *_wrap_FolderListingEntry_GetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FolderListingEntry *arg0 ;
    PyObject * argo0 =0 ;
    String *result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FolderListingEntry_GetName",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FolderListingEntry,1)) == -1) return NULL;
    String const &_result_ref = arg0->GetName();
    result = (String *) &_result_ref;
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_String);
    return resultobj;
}


static PyObject *_wrap_FolderListingEntry_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FolderListingEntry *arg0 ;
    PyObject * argo0 =0 ;
    long result ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FolderListingEntry_GetAttribute",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FolderListingEntry,1)) == -1) return NULL;
    result = (long )arg0->GetAttribute();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_delete_FolderListingEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FolderListingEntry *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FolderListingEntry",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FolderListingEntry,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyMethodDef MailFoldercMethods[] = {
	 { (char *)"MailFolder_OpenFolder", _wrap_MailFolder_OpenFolder, METH_VARARGS },
	 { (char *)"MailFolder_DeleteFolder", _wrap_MailFolder_DeleteFolder, METH_VARARGS },
	 { (char *)"MailFolder_CreateFolder", _wrap_MailFolder_CreateFolder, METH_VARARGS },
	 { (char *)"MailFolder_CanExit", _wrap_MailFolder_CanExit, METH_VARARGS },
	 { (char *)"MailFolder_ConvertMessageStatusToString", _wrap_MailFolder_ConvertMessageStatusToString, METH_VARARGS },
	 { (char *)"MailFolder_Subscribe", _wrap_MailFolder_Subscribe, METH_VARARGS },
	 { (char *)"MailFolder_ListFolders", _wrap_MailFolder_ListFolders, METH_VARARGS },
	 { (char *)"MailFolder_GetName", _wrap_MailFolder_GetName, METH_VARARGS },
	 { (char *)"MailFolder_CountNewMessages", _wrap_MailFolder_CountNewMessages, METH_VARARGS },
	 { (char *)"MailFolder_CountRecentMessages", _wrap_MailFolder_CountRecentMessages, METH_VARARGS },
	 { (char *)"MailFolder_Ping", _wrap_MailFolder_Ping, METH_VARARGS },
	 { (char *)"MailFolder_GetMessage", _wrap_MailFolder_GetMessage, METH_VARARGS },
	 { (char *)"MailFolder_DeleteMessage", _wrap_MailFolder_DeleteMessage, METH_VARARGS },
	 { (char *)"MailFolder_UnDeleteMessage", _wrap_MailFolder_UnDeleteMessage, METH_VARARGS },
	 { (char *)"MailFolder_SetMessageFlag", _wrap_MailFolder_SetMessageFlag, METH_VARARGS },
	 { (char *)"MailFolder_SetFlag", _wrap_MailFolder_SetFlag, METH_VARARGS },
	 { (char *)"MailFolder_SetSequenceFlag", _wrap_MailFolder_SetSequenceFlag, METH_VARARGS },
	 { (char *)"MailFolder_AppendMessage", _wrap_MailFolder_AppendMessage, METH_VARARGS },
	 { (char *)"MailFolder_ExpungeMessages", _wrap_MailFolder_ExpungeMessages, METH_VARARGS },
	 { (char *)"MailFolder_SearchMessages", _wrap_MailFolder_SearchMessages, METH_VARARGS },
	 { (char *)"MailFolder_GetProfile", _wrap_MailFolder_GetProfile, METH_VARARGS },
	 { (char *)"MailFolder_GetClassName", _wrap_MailFolder_GetClassName, METH_VARARGS },
	 { (char *)"MailFolder_SaveMessages", _wrap_MailFolder_SaveMessages, METH_VARARGS },
	 { (char *)"MailFolder_SaveMessagesToFile", _wrap_MailFolder_SaveMessagesToFile, METH_VARARGS },
	 { (char *)"MailFolder_DeleteOrTrashMessages", _wrap_MailFolder_DeleteOrTrashMessages, METH_VARARGS },
	 { (char *)"MailFolder_DeleteMessages", _wrap_MailFolder_DeleteMessages, METH_VARARGS },
	 { (char *)"MailFolder_UnDeleteMessages", _wrap_MailFolder_UnDeleteMessages, METH_VARARGS },
	 { (char *)"MailFolder_ReplyMessages", _wrap_MailFolder_ReplyMessages, METH_VARARGS },
	 { (char *)"MailFolder_ForwardMessages", _wrap_MailFolder_ForwardMessages, METH_VARARGS },
	 { (char *)"MailFolder_Lock", _wrap_MailFolder_Lock, METH_VARARGS },
	 { (char *)"MailFolder_UnLock", _wrap_MailFolder_UnLock, METH_VARARGS },
	 { (char *)"MailFolder_IsLocked", _wrap_MailFolder_IsLocked, METH_VARARGS },
	 { (char *)"MailFolder_GetHeaders", _wrap_MailFolder_GetHeaders, METH_VARARGS },
	 { (char *)"MailFolder_GetType", _wrap_MailFolder_GetType, METH_VARARGS },
	 { (char *)"MailFolder_GetFlags", _wrap_MailFolder_GetFlags, METH_VARARGS },
	 { (char *)"MailFolder_ApplyFilterRules", _wrap_MailFolder_ApplyFilterRules, METH_VARARGS },
	 { (char *)"HeaderInfo_GetSubject", _wrap_HeaderInfo_GetSubject, METH_VARARGS },
	 { (char *)"HeaderInfo_GetFrom", _wrap_HeaderInfo_GetFrom, METH_VARARGS },
	 { (char *)"HeaderInfo_GetDate", _wrap_HeaderInfo_GetDate, METH_VARARGS },
	 { (char *)"HeaderInfo_GetId", _wrap_HeaderInfo_GetId, METH_VARARGS },
	 { (char *)"HeaderInfo_GetReferences", _wrap_HeaderInfo_GetReferences, METH_VARARGS },
	 { (char *)"HeaderInfo_GetUId", _wrap_HeaderInfo_GetUId, METH_VARARGS },
	 { (char *)"HeaderInfo_GetStatus", _wrap_HeaderInfo_GetStatus, METH_VARARGS },
	 { (char *)"HeaderInfo_GetSize", _wrap_HeaderInfo_GetSize, METH_VARARGS },
	 { (char *)"HeaderInfo_GetLines", _wrap_HeaderInfo_GetLines, METH_VARARGS },
	 { (char *)"HeaderInfoList_Count", _wrap_HeaderInfoList_Count, METH_VARARGS },
	 { (char *)"HeaderInfoList_GetItem", _wrap_HeaderInfoList_GetItem, METH_VARARGS },
	 { (char *)"FolderListingEntry_GetName", _wrap_FolderListingEntry_GetName, METH_VARARGS },
	 { (char *)"FolderListingEntry_GetAttribute", _wrap_FolderListingEntry_GetAttribute, METH_VARARGS },
	 { (char *)"delete_FolderListingEntry", _wrap_delete_FolderListingEntry, METH_VARARGS },
	 { NULL, NULL }
};

#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_MailFolderTo_p_MObjectRC(void *x) {
    return (void *)((MObjectRC *) ((MailFolder *) x));
}
static void *_p_ProfileTo_p_MObjectRC(void *x) {
    return (void *)((MObjectRC *) ((Profile *) x));
}
static void *_p_HeaderInfoListTo_p_MObjectRC(void *x) {
    return (void *)((MObjectRC *) ((HeaderInfoList *) x));
}
static void *_p_MailFolderTo_p_MObject(void *x) {
    return (void *)((MObject *) ((MailFolder *) x));
}
static void *_p_MObjectRCTo_p_MObject(void *x) {
    return (void *)((MObject *) ((MObjectRC *) x));
}
static void *_p_ProfileTo_p_MObject(void *x) {
    return (void *)((MObject *) ((Profile *) x));
}
static void *_p_HeaderInfoListTo_p_MObject(void *x) {
    return (void *)((MObject *) ((HeaderInfoList *) x));
}
static swig_type_info _swigt__p_MObjectRC[] = {{"_p_MObjectRC", 0, "MObjectRC *"},{"_p_MailFolder", _p_MailFolderTo_p_MObjectRC},{"_p_MObjectRC"},{"_p_Profile", _p_ProfileTo_p_MObjectRC},{"_p_HeaderInfoList", _p_HeaderInfoListTo_p_MObjectRC},{0}};
static swig_type_info _swigt__p_MailFolder__Params[] = {{"_p_MailFolder__Params", 0, "MailFolder::Params *"},{"_p_MailFolder__Params"},{0}};
static swig_type_info _swigt__p_size_t[] = {{"_p_size_t", 0, "size_t *"},{"_p_size_t"},{0}};
static swig_type_info _swigt__p_SearchCriterium[] = {{"_p_SearchCriterium", 0, "class SearchCriterium *"},{"_p_SearchCriterium"},{0}};
static swig_type_info _swigt__p_HeaderInfoList[] = {{"_p_HeaderInfoList", 0, "HeaderInfoList *"},{"_p_HeaderInfoList"},{0}};
static swig_type_info _swigt__p_wxWindow[] = {{"_p_wxWindow", 0, "wxWindow *"},{"_p_wxWindow"},{0}};
static swig_type_info _swigt__p_Profile[] = {{"_p_Profile", 0, "Profile *"},{"_p_Profile"},{0}};
static swig_type_info _swigt__p_time_t[] = {{"_p_time_t", 0, "time_t *"},{"_p_time_t"},{0}};
static swig_type_info _swigt__p_FolderType[] = {{"_p_FolderType", 0, "FolderType *"},{"_p_FolderType"},{0}};
static swig_type_info _swigt__p_String[] = {{"_p_String", 0, "String *"},{"_p_String"},{0}};
static swig_type_info _swigt__p_Message[] = {{"_p_Message", 0, "Message *"},{"_p_Message"},{0}};
static swig_type_info _swigt__p_Ticket[] = {{"_p_Ticket", 0, "Ticket *"},{"_p_Ticket"},{0}};
static swig_type_info _swigt__p_MFolder[] = {{"_p_MFolder", 0, "MFolder *"},{"_p_MFolder"},{0}};
static swig_type_info _swigt__p_UIdArray[] = {{"_p_UIdArray", 0, "UIdArray *"},{"_p_UIdArray"},{0}};
static swig_type_info _swigt__p_UIdType[] = {{"_p_UIdType", 0, "UIdType *"},{"_p_UIdType"},{0}};
static swig_type_info _swigt__p_ASMailFolder[] = {{"_p_ASMailFolder", 0, "class ASMailFolder *"},{"_p_ASMailFolder"},{0}};
static swig_type_info _swigt__p_MailFolder[] = {{"_p_MailFolder", 0, "MailFolder *"},{"_p_MailFolder"},{0}};
static swig_type_info _swigt__p_HeaderInfo[] = {{"_p_HeaderInfo", 0, "HeaderInfo *"},{"_p_HeaderInfo"},{0}};
static swig_type_info _swigt__p_UserData[] = {{"_p_UserData", 0, "UserData *"},{"_p_UserData"},{0}};
static swig_type_info _swigt__p_FolderListingEntry[] = {{"_p_FolderListingEntry", 0, "FolderListingEntry *"},{"_p_FolderListingEntry"},{0}};
static swig_type_info _swigt__p_MObject[] = {{"_p_MObject", 0, "MObject *"},{"_p_MailFolder", _p_MailFolderTo_p_MObject},{"_p_MObjectRC", _p_MObjectRCTo_p_MObject},{"_p_Profile", _p_ProfileTo_p_MObject},{"_p_HeaderInfoList", _p_HeaderInfoListTo_p_MObject},{"_p_MObject"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_MObjectRC, 
_swigt__p_MailFolder__Params, 
_swigt__p_size_t, 
_swigt__p_SearchCriterium, 
_swigt__p_HeaderInfoList, 
_swigt__p_wxWindow, 
_swigt__p_Profile, 
_swigt__p_time_t, 
_swigt__p_FolderType, 
_swigt__p_String, 
_swigt__p_Message, 
_swigt__p_Ticket, 
_swigt__p_MFolder, 
_swigt__p_UIdArray, 
_swigt__p_UIdType, 
_swigt__p_ASMailFolder, 
_swigt__p_MailFolder, 
_swigt__p_HeaderInfo, 
_swigt__p_UserData, 
_swigt__p_FolderListingEntry, 
_swigt__p_MObject, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
    { SWIG_PY_INT,   (char*)"MailFolder_MSG_STAT_NEW", (long) MailFolder::MSG_STAT_NEW, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_MSG_STAT_SEEN", (long) MailFolder::MSG_STAT_SEEN, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_MSG_STAT_DELETED", (long) MailFolder::MSG_STAT_DELETED, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_MSG_STAT_ANSWERED", (long) MailFolder::MSG_STAT_ANSWERED, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_MSG_STAT_RECENT", (long) MailFolder::MSG_STAT_RECENT, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_MSG_STAT_SEARCHED", (long) MailFolder::MSG_STAT_SEARCHED, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_MSG_STAT_FLAGGED", (long) MailFolder::MSG_STAT_FLAGGED, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_REPLY_SENDER", (long) MailFolder::REPLY_SENDER, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_REPLY_ALL", (long) MailFolder::REPLY_ALL, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_REPLY_LIST", (long) MailFolder::REPLY_LIST, 0, 0, 0},
    { SWIG_PY_INT,   (char*)"MailFolder_REPLY", (long) MailFolder::REPLY, 0, 0, 0},
{0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initMailFolderc(void) {
    PyObject *m, *d;
    int i;
    SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char*)"MailFolderc", MailFoldercMethods);
    d = PyModule_GetDict(m);
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
    }
    SWIG_InstallConstants(d,swig_const_table);
}

