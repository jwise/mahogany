/*
 * FILE : ./MObject.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1  (Final)
 * 
 * Portions Copyright (c) 1995-1997
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define EXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define EXPORT(a,b) a _export b
#	else
#	    define EXPORT(a,b) a b
#	endif
#   endif
#else
#   define EXPORT(a,b) a b
#endif

#ifdef __cplusplus
extern "C" {
#endif
#include "Python.h"
extern void SWIG_MakePtr(char *, void *, char *);
extern void SWIG_RegisterMapping(char *, char *, void *(*)(void *));
extern char *SWIG_GetPtr(char *, void **, char *);
extern void SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
extern PyObject *SWIG_newvarlink(void);
#ifdef __cplusplus
}
#endif

#define SWIG_init    initMObjectc

#define SWIG_name    "MObjectc"

#include   "Mconfig.h"
#include   "Mcommon.h"   
#include   "MObject.h"

// ----------------------------------------------------------------------------
// MObject: the mother of all classes
// ----------------------------------------------------------------------------

/// the magic number
#define   MOBJECT_MAGIC   1234567890

static void delete_MObject(MObject *obj) {
    delete obj;
}
static PyObject *_wrap_delete_MObject(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MObject * _arg0;
    char * _argc0 = 0;

    if(!PyArg_ParseTuple(args,"s:delete_MObject",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MObject_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_MObject. Expected _MObject_p.");
        return NULL;
        }
    }
    delete_MObject(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void  MObject_MOcheck(MObject *obj) {
    obj->MOcheck();
}
static PyObject *_wrap_MObject_MOcheck(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MObject * _arg0;
    char * _argc0 = 0;

    if(!PyArg_ParseTuple(args,"s:MObject_MOcheck",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MObject_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MObject_MOcheck. Expected _MObject_p.");
        return NULL;
        }
    }
    MObject_MOcheck(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigMObjectRCToMObject(void *ptr) {
    MObjectRC *src;
    MObject *dest;
    src = (MObjectRC *) ptr;
    dest = (MObject *) src;
    return (void *) dest;
}

static MObjectRC *new_MObjectRC() {
    return new MObjectRC();
}
static PyObject *_wrap_new_MObjectRC(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MObjectRC * _result;
    char _ptemp[128];

    if(!PyArg_ParseTuple(args,":new_MObjectRC")) 
        return NULL;
    _result = (MObjectRC *)new_MObjectRC();
    SWIG_MakePtr(_ptemp, (char *) _result,"_MObjectRC_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static PyObject *_wrap_MObjectRC_CheckLeaks(PyObject *self, PyObject *args) {
    PyObject * _resultobj;

    if(!PyArg_ParseTuple(args,":MObjectRC_CheckLeaks")) 
        return NULL;
    MObjectRC::CheckLeaks();
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void  MObjectRC_IncRef(MObjectRC *obj) {
    obj->IncRef();
}
static PyObject *_wrap_MObjectRC_IncRef(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MObjectRC * _arg0;
    char * _argc0 = 0;

    if(!PyArg_ParseTuple(args,"s:MObjectRC_IncRef",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MObjectRC_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MObjectRC_IncRef. Expected _MObjectRC_p.");
        return NULL;
        }
    }
    MObjectRC_IncRef(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static bool  MObjectRC_DecRef(MObjectRC *obj) {
    bool  _result = (bool )obj->DecRef();
    return _result;
}
static PyObject *_wrap_MObjectRC_DecRef(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    bool  _result;
    MObjectRC * _arg0;
    char * _argc0 = 0;

    if(!PyArg_ParseTuple(args,"s:MObjectRC_DecRef",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MObjectRC_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MObjectRC_DecRef. Expected _MObjectRC_p.");
        return NULL;
        }
    }
    _result = (bool )MObjectRC_DecRef(_arg0);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyMethodDef MObjectcMethods[] = {
	 { "MObjectRC_DecRef", _wrap_MObjectRC_DecRef, 1 },
	 { "MObjectRC_IncRef", _wrap_MObjectRC_IncRef, 1 },
	 { "MObjectRC_CheckLeaks", _wrap_MObjectRC_CheckLeaks, 1 },
	 { "new_MObjectRC", _wrap_new_MObjectRC, 1 },
	 { "MObject_MOcheck", _wrap_MObject_MOcheck, 1 },
	 { "delete_MObject", _wrap_delete_MObject, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
EXPORT(void,initMObjectc)() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 m = Py_InitModule("MObjectc", MObjectcMethods);
	 d = PyModule_GetDict(m);
/*
 * These are the pointer type-equivalency mappings. 
 * (Used by the SWIG pointer type-checker).
 */
	 SWIG_RegisterMapping("_signed_long","_long",0);
	 SWIG_RegisterMapping("_long","_unsigned_long",0);
	 SWIG_RegisterMapping("_long","_signed_long",0);
	 SWIG_RegisterMapping("_unsigned_long","_long",0);
	 SWIG_RegisterMapping("_signed_int","_int",0);
	 SWIG_RegisterMapping("_MObject","_class_MObjectRC",SwigMObjectRCToMObject);
	 SWIG_RegisterMapping("_MObject","_MObjectRC",SwigMObjectRCToMObject);
	 SWIG_RegisterMapping("_MObject","_class_MObject",0);
	 SWIG_RegisterMapping("_unsigned_short","_short",0);
	 SWIG_RegisterMapping("_signed_short","_short",0);
	 SWIG_RegisterMapping("_MObjectRC","_class_MObjectRC",0);
	 SWIG_RegisterMapping("_unsigned_int","_int",0);
	 SWIG_RegisterMapping("_short","_unsigned_short",0);
	 SWIG_RegisterMapping("_short","_signed_short",0);
	 SWIG_RegisterMapping("_String","_class_String",0);
	 SWIG_RegisterMapping("_int","_unsigned_int",0);
	 SWIG_RegisterMapping("_int","_signed_int",0);
	 SWIG_RegisterMapping("_class_MObjectRC","_MObjectRC",0);
	 SWIG_RegisterMapping("_class_MObject","_class_MObjectRC",SwigMObjectRCToMObject);
	 SWIG_RegisterMapping("_class_MObject","_MObjectRC",SwigMObjectRCToMObject);
	 SWIG_RegisterMapping("_class_MObject","_MObject",0);
	 SWIG_RegisterMapping("_class_String","_String",0);
}
