/*
 * FILE : ./MApplication.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 4)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef __cplusplus
extern "C" {
#endif
#include "Python.h"
extern void SWIG_MakePtr(char *, void *, char *);
extern void SWIG_RegisterMapping(char *, char *, void *(*)(void *));
extern char *SWIG_GetPtr(char *, void **, char *);
extern void SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
extern PyObject *SWIG_newvarlink(void);
#ifdef __cplusplus
}
#endif

#define SWIG_init    initMApplicationc

#define SWIG_name    "MApplicationc"

#include	"Mpch.h"
#ifndef	USE_PCH
#	include	"Mcommon.h"
#	include	"strutil.h"
#	include	"Profile.h"
#	include	"MFrame.h"
#	include	"MLogFrame.h"
#	include	"MimeList.h"
#	include	"MimeTypes.h"
#	include	"Mdefaults.h"
#	include	"MApplication.h"
#endif
static int _wrap_mApplication_set(PyObject *val) {
    char * tval;
    MApplication * temp;

    tval = (char *) PyString_AsString(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'mApplication'(MApplication *)");
        return 1; 
    }
    if (tval) {
        if (SWIG_GetPtr(tval,(void **) &temp,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in value of mApplication. Expected _MApplication_p.");
        return 1;
        }
    }
    mApplication = *temp;
    return 0;
}

static PyObject *_wrap_mApplication_get() {
    PyObject * pyobj;
    char ptemp[128];

    SWIG_MakePtr(ptemp,(char *) &mApplication,"_MApplication_p");
    pyobj = PyString_FromString(ptemp);
    return pyobj;
}

#define new_MApplication() (new MApplication())
static PyObject *_wrap_new_MApplication(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _result;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,":new_MApplication")) 
        return NULL;
    _result = (MApplication *)new_MApplication();
    SWIG_MakePtr(_ptemp, (char *) _result,"_MApplication_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define delete_MApplication(obj) (delete obj)
static PyObject *_wrap_delete_MApplication(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:delete_MApplication",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_MApplication. Expected _MApplication_p.");
        return NULL;
        }
    }
    delete_MApplication(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define MApplication_Exit(obj,arg0)  (obj->Exit(arg0))
static PyObject *_wrap_MApplication_Exit(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _arg0;
    int  _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"si:MApplication_Exit",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_Exit. Expected _MApplication_p.");
        return NULL;
        }
    }
    MApplication_Exit(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define MApplication_TopLevelFrame(obj)  (obj->TopLevelFrame())
static PyObject *_wrap_MApplication_TopLevelFrame(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MFrame * _result;
    MApplication * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:MApplication_TopLevelFrame",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_TopLevelFrame. Expected _MApplication_p.");
        return NULL;
        }
    }
    _result = (MFrame *)MApplication_TopLevelFrame(_arg0);
    SWIG_MakePtr(_ptemp, (char *) _result,"_MFrame_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define MApplication_GetText(obj,arg0)  (obj->GetText(arg0))
static PyObject *_wrap_MApplication_GetText(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    char * _result;
    MApplication * _arg0;
    char * _arg1;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"ss:MApplication_GetText",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_GetText. Expected _MApplication_p.");
        return NULL;
        }
    }
    _result = (char *)MApplication_GetText(_arg0,_arg1);
    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define MApplication_ErrorMessage(obj,arg0,arg1,arg2)  (obj->ErrorMessage(arg0,arg1,arg2))
static PyObject *_wrap_MApplication_ErrorMessage(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _arg0;
    String * _arg1;
    MFrame * _arg2;
    bool  _arg3;
    char * _argc0 = 0;
    char * _argc1 = 0;
    char * _argc2 = 0;
    int tempbool3;

    self = self;
    if(!PyArg_ParseTuple(args,"sssi:MApplication_ErrorMessage",&_argc0,&_argc1,&_argc2,&tempbool3)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_ErrorMessage. Expected _MApplication_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of MApplication_ErrorMessage. Expected _String_p.");
        return NULL;
        }
    }
    if (_argc2) {
        if (SWIG_GetPtr(_argc2,(void **) &_arg2,"_MFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of MApplication_ErrorMessage. Expected _MFrame_p.");
        return NULL;
        }
    }
    _arg3 = (bool ) tempbool3;
    MApplication_ErrorMessage(_arg0,*_arg1,_arg2,_arg3);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define MApplication_SystemErrorMessage(obj,arg0)  (obj->SystemErrorMessage(arg0))
static PyObject *_wrap_MApplication_SystemErrorMessage(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _arg0;
    String * _arg1;
    char * _argc0 = 0;
    char * _argc1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"ss:MApplication_SystemErrorMessage",&_argc0,&_argc1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_SystemErrorMessage. Expected _MApplication_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of MApplication_SystemErrorMessage. Expected _String_p.");
        return NULL;
        }
    }
    MApplication_SystemErrorMessage(_arg0,*_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define MApplication_FatalErrorMessage(obj,arg0)  (obj->FatalErrorMessage(arg0))
static PyObject *_wrap_MApplication_FatalErrorMessage(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _arg0;
    String * _arg1;
    char * _argc0 = 0;
    char * _argc1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"ss:MApplication_FatalErrorMessage",&_argc0,&_argc1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_FatalErrorMessage. Expected _MApplication_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of MApplication_FatalErrorMessage. Expected _String_p.");
        return NULL;
        }
    }
    MApplication_FatalErrorMessage(_arg0,*_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define MApplication_Message(obj,arg0)  (obj->Message(arg0))
static PyObject *_wrap_MApplication_Message(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _arg0;
    String * _arg1;
    char * _argc0 = 0;
    char * _argc1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"ss:MApplication_Message",&_argc0,&_argc1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_Message. Expected _MApplication_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of MApplication_Message. Expected _String_p.");
        return NULL;
        }
    }
    MApplication_Message(_arg0,*_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define MApplication_YesNoDialog(obj,arg0)  (obj->YesNoDialog(arg0))
static PyObject *_wrap_MApplication_YesNoDialog(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    MApplication * _arg0;
    String * _arg1;
    char * _argc0 = 0;
    char * _argc1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"ss:MApplication_YesNoDialog",&_argc0,&_argc1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_YesNoDialog. Expected _MApplication_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of MApplication_YesNoDialog. Expected _String_p.");
        return NULL;
        }
    }
    _result = (int )MApplication_YesNoDialog(_arg0,*_arg1);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define MApplication_GetGlobalDir(obj)  (obj->GetGlobalDir())
static PyObject *_wrap_MApplication_GetGlobalDir(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    String * _result;
    MApplication * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:MApplication_GetGlobalDir",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_GetGlobalDir. Expected _MApplication_p.");
        return NULL;
        }
    }
    String & _result_ref = MApplication_GetGlobalDir(_arg0);
    _result = (String *) &_result_ref;
    SWIG_MakePtr(_ptemp, (char *) _result,"_String_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define MApplication_GetLocalDir(obj)  (obj->GetLocalDir())
static PyObject *_wrap_MApplication_GetLocalDir(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    String * _result;
    MApplication * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:MApplication_GetLocalDir",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_GetLocalDir. Expected _MApplication_p.");
        return NULL;
        }
    }
    String & _result_ref = MApplication_GetLocalDir(_arg0);
    _result = (String *) &_result_ref;
    SWIG_MakePtr(_ptemp, (char *) _result,"_String_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define MApplication_GetMimeList(obj)  (obj->GetMimeList())
static PyObject *_wrap_MApplication_GetMimeList(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MimeList * _result;
    MApplication * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:MApplication_GetMimeList",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_GetMimeList. Expected _MApplication_p.");
        return NULL;
        }
    }
    _result = (MimeList *)MApplication_GetMimeList(_arg0);
    SWIG_MakePtr(_ptemp, (char *) _result,"_MimeList_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define MApplication_GetMimeTypes(obj)  (obj->GetMimeTypes())
static PyObject *_wrap_MApplication_GetMimeTypes(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MimeTypes * _result;
    MApplication * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:MApplication_GetMimeTypes",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_GetMimeTypes. Expected _MApplication_p.");
        return NULL;
        }
    }
    _result = (MimeTypes *)MApplication_GetMimeTypes(_arg0);
    SWIG_MakePtr(_ptemp, (char *) _result,"_MimeTypes_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define MApplication_GetProfile(obj)  (obj->GetProfile())
static PyObject *_wrap_MApplication_GetProfile(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    ProfileBase * _result;
    MApplication * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:MApplication_GetProfile",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_GetProfile. Expected _MApplication_p.");
        return NULL;
        }
    }
    _result = (ProfileBase *)MApplication_GetProfile(_arg0);
    SWIG_MakePtr(_ptemp, (char *) _result,"_ProfileBase_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define MApplication_GetAdb(obj)  (obj->GetAdb())
static PyObject *_wrap_MApplication_GetAdb(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Adb * _result;
    MApplication * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:MApplication_GetAdb",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_GetAdb. Expected _MApplication_p.");
        return NULL;
        }
    }
    _result = (Adb *)MApplication_GetAdb(_arg0);
    SWIG_MakePtr(_ptemp, (char *) _result,"_Adb_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define MApplication_ShowConsole(obj,arg0)  (obj->ShowConsole(arg0))
static PyObject *_wrap_MApplication_ShowConsole(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _arg0;
    int  _arg1 = true;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s|i:MApplication_ShowConsole",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_ShowConsole. Expected _MApplication_p.");
        return NULL;
        }
    }
    MApplication_ShowConsole(_arg0,_arg1);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define MApplication_Log(obj,arg0,arg1)  (obj->Log(arg0,arg1))
static PyObject *_wrap_MApplication_Log(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    MApplication * _arg0;
    int  _arg1;
    String * _arg2;
    char * _argc0 = 0;
    char * _argc2 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sis:MApplication_Log",&_argc0,&_arg1,&_argc2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_MApplication_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of MApplication_Log. Expected _MApplication_p.");
        return NULL;
        }
    }
    if (_argc2) {
        if (SWIG_GetPtr(_argc2,(void **) &_arg2,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of MApplication_Log. Expected _String_p.");
        return NULL;
        }
    }
    MApplication_Log(_arg0,_arg1,*_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyMethodDef MApplicationcMethods[] = {
	 { "MApplication_Log", _wrap_MApplication_Log, 1 },
	 { "MApplication_ShowConsole", _wrap_MApplication_ShowConsole, 1 },
	 { "MApplication_GetAdb", _wrap_MApplication_GetAdb, 1 },
	 { "MApplication_GetProfile", _wrap_MApplication_GetProfile, 1 },
	 { "MApplication_GetMimeTypes", _wrap_MApplication_GetMimeTypes, 1 },
	 { "MApplication_GetMimeList", _wrap_MApplication_GetMimeList, 1 },
	 { "MApplication_GetLocalDir", _wrap_MApplication_GetLocalDir, 1 },
	 { "MApplication_GetGlobalDir", _wrap_MApplication_GetGlobalDir, 1 },
	 { "MApplication_YesNoDialog", _wrap_MApplication_YesNoDialog, 1 },
	 { "MApplication_Message", _wrap_MApplication_Message, 1 },
	 { "MApplication_FatalErrorMessage", _wrap_MApplication_FatalErrorMessage, 1 },
	 { "MApplication_SystemErrorMessage", _wrap_MApplication_SystemErrorMessage, 1 },
	 { "MApplication_ErrorMessage", _wrap_MApplication_ErrorMessage, 1 },
	 { "MApplication_GetText", _wrap_MApplication_GetText, 1 },
	 { "MApplication_TopLevelFrame", _wrap_MApplication_TopLevelFrame, 1 },
	 { "MApplication_Exit", _wrap_MApplication_Exit, 1 },
	 { "delete_MApplication", _wrap_delete_MApplication, 1 },
	 { "new_MApplication", _wrap_new_MApplication, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void,initMApplicationc)() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 m = Py_InitModule("MApplicationc", MApplicationcMethods);
	 d = PyModule_GetDict(m);
	 PyDict_SetItemString(d,"cvar", SWIG_globals);
	 SWIG_addvarlink(SWIG_globals,"mApplication",_wrap_mApplication_get, _wrap_mApplication_set);
/*
 * These are the pointer type-equivalency mappings. 
 * (Used by the SWIG pointer type-checker).
 */
	 SWIG_RegisterMapping("_signed_long","_long",0);
	 SWIG_RegisterMapping("_MApplication","_class_MApplication",0);
	 SWIG_RegisterMapping("_long","_unsigned_long",0);
	 SWIG_RegisterMapping("_long","_signed_long",0);
	 SWIG_RegisterMapping("_class_MApplication","_MApplication",0);
	 SWIG_RegisterMapping("_unsigned_long","_long",0);
	 SWIG_RegisterMapping("_signed_int","_int",0);
	 SWIG_RegisterMapping("_unsigned_short","_short",0);
	 SWIG_RegisterMapping("_signed_short","_short",0);
	 SWIG_RegisterMapping("_unsigned_int","_int",0);
	 SWIG_RegisterMapping("_short","_unsigned_short",0);
	 SWIG_RegisterMapping("_short","_signed_short",0);
	 SWIG_RegisterMapping("_String","_class_String",0);
	 SWIG_RegisterMapping("_int","_unsigned_int",0);
	 SWIG_RegisterMapping("_int","_signed_int",0);
	 SWIG_RegisterMapping("_class_String","_String",0);
}
