/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "MPython.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "MPython.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink(void);
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_MObjectRC swig_types[0] 
#define  SWIGTYPE_p_MimePart swig_types[1] 
#define  SWIGTYPE_p_Profile swig_types[2] 
#define  SWIGTYPE_p_wxArrayInt swig_types[3] 
#define  SWIGTYPE_p_time_t swig_types[4] 
#define  SWIGTYPE_p_unsigned_long swig_types[5] 
#define  SWIGTYPE_p_wxArrayString swig_types[6] 
#define  SWIGTYPE_p_String swig_types[7] 
#define  SWIGTYPE_p_Message swig_types[8] 
#define  SWIGTYPE_p_wxFontEncoding swig_types[9] 
#define  SWIGTYPE_p_MimeXferEncoding swig_types[10] 
#define  SWIGTYPE_p_void swig_types[11] 
#define  SWIGTYPE_p_MessageContentType swig_types[12] 
#define  SWIGTYPE_p_UIdType swig_types[13] 
#define  SWIGTYPE_p_AddressList swig_types[14] 
#define  SWIGTYPE_p_MailFolder swig_types[15] 
#define  SWIGTYPE_p_p_wxChar swig_types[16] 
#define  SWIGTYPE_p_MimeParameterList swig_types[17] 
#define  SWIGTYPE_p_HeaderIterator swig_types[18] 
static swig_type_info *swig_types[20];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _Message.so
  ------------------------------------------------*/
#define SWIG_init    init_Message

#define SWIG_name    "_Message"

#include "Mcommon.h"
#include "Message.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_HeaderIterator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = 0 ;
    HeaderIterator *result;
    String tempstr1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_HeaderIterator",&obj0)) goto fail;
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
        tempstr1 = String(temps, templ);
        arg1 = &tempstr1;
    }
    result = (HeaderIterator *)new HeaderIterator((String const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_HeaderIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderIterator_GetNext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderIterator *arg1 = (HeaderIterator *) 0 ;
    String *arg2 = (String *) 0 ;
    String *arg3 = (String *) 0 ;
    bool result;
    String tempstr2 ;
    String tempstr3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HeaderIterator_GetNext",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
        tempstr2 = String(temps, templ);
        arg2 = &tempstr2;
    }
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
        tempstr3 = String(temps, templ);
        arg3 = &tempstr3;
    }
    result = (bool)(arg1)->GetNext(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderIterator_GetAll(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderIterator *arg1 = (HeaderIterator *) 0 ;
    wxArrayString *arg2 = (wxArrayString *) 0 ;
    wxArrayString *arg3 = (wxArrayString *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HeaderIterator_GetAll",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxArrayString,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxArrayString,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->GetAll(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HeaderIterator_Reset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderIterator *arg1 = (HeaderIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HeaderIterator_Reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->Reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_HeaderIterator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    HeaderIterator *arg1 = (HeaderIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_HeaderIterator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_HeaderIterator,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HeaderIterator_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_HeaderIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Message_Create(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    UIdType arg2 = (UIdType) UID_ILLEGAL ;
    Profile *arg3 = (Profile *) NULL ;
    Message *result;
    UIdType *argp2 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"s|OO:Message_Create",&arg1,&obj1,&obj2)) goto fail;
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_UIdType,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
        arg2 = *argp2; 
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Profile,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (Message *)Message::Create((char const *)arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Message, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetHeaderLine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String *arg2 = 0 ;
    String *arg3 = 0 ;
    wxFontEncoding *arg4 = (wxFontEncoding *) NULL ;
    bool result;
    String tempstr2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:Message_GetHeaderLine",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
        tempstr2 = String(temps, templ);
        arg2 = &tempstr2;
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_wxFontEncoding,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (bool)((Message const *)arg1)->GetHeaderLine((String const &)*arg2,*arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetHeaderLines(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    wxChar **arg2 = (wxChar **) 0 ;
    wxArrayInt *arg3 = (wxArrayInt *) NULL ;
    wxArrayString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:Message_GetHeaderLines",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_p_wxChar,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxArrayInt,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = ((Message const *)arg1)->GetHeaderLines((wxChar const **)arg2,arg3);
    
    {
        wxArrayString * resultptr;
        resultptr = new wxArrayString((wxArrayString &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxArrayString, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetHeaderIterator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    SwigValueWrapper< HeaderIterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetHeaderIterator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetHeaderIterator();
    
    {
        HeaderIterator * resultptr;
        resultptr = new HeaderIterator((HeaderIterator &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_HeaderIterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetAllHeaders(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    wxArrayString *arg2 = (wxArrayString *) 0 ;
    wxArrayString *arg3 = (wxArrayString *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Message_GetAllHeaders",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxArrayString,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxArrayString,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetAllHeaders(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetHeader(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetHeader",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetHeader();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetAddresses(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    wxArrayString *arg3 = 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:Message_GetAddresses",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_wxArrayString,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((Message const *)arg1)->GetAddresses((MessageAddressType )arg2,*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetAddressList(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    AddressList *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetAddressList",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (AddressList *)((Message const *)arg1)->GetAddressList((MessageAddressType )arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AddressList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetAddressesString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetAddressesString",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetAddressesString((MessageAddressType )arg2);
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_ExtractAddressesFromHeader(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    wxArrayString *arg2 = 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Message_ExtractAddressesFromHeader",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_wxArrayString,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->ExtractAddressesFromHeader(*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_Subject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_Subject",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->Subject();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_From(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_From",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->From();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_Date(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_Date",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->Date();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetId",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetId();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetReferences(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetReferences",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetReferences();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetInReplyTo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetInReplyTo",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetInReplyTo();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetNewsgroups(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetNewsgroups",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetNewsgroups();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetStatus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetStatus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((Message const *)arg1)->GetStatus();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetSize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)((Message const *)arg1)->GetSize();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    time_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetDate();
    
    {
        time_t * resultptr;
        resultptr = new time_t((time_t &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_time_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetFolder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    MailFolder *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetFolder",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (MailFolder *)((Message const *)arg1)->GetFolder();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MailFolder, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetUId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    UIdType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetUId",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetUId();
    
    {
        UIdType * resultptr;
        resultptr = new UIdType((UIdType &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_UIdType, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetTopMimePart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    MimePart *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetTopMimePart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (MimePart *)((Message const *)arg1)->GetTopMimePart();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MimePart, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_CountParts(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_CountParts",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((Message const *)arg1)->CountParts();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetMimePart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    MimePart *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetMimePart",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (MimePart *)((Message const *)arg1)->GetMimePart(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MimePart, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetPartContent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    unsigned long *arg3 = (unsigned long *) NULL ;
    void *result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:Message_GetPartContent",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_unsigned_long,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (void *)((Message const *)arg1)->GetPartContent(arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetPartType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    MessageContentType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetPartType",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetPartType(arg2);
    
    {
        MessageContentType * resultptr;
        resultptr = new MessageContentType((MessageContentType &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_MessageContentType, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetTextPartEncoding(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    wxFontEncoding result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetTextPartEncoding",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetTextPartEncoding(arg2);
    
    {
        wxFontEncoding * resultptr;
        resultptr = new wxFontEncoding((wxFontEncoding &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_wxFontEncoding, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetPartTransferEncoding(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    MimeXferEncoding result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetPartTransferEncoding",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetPartTransferEncoding(arg2);
    
    {
        MimeXferEncoding * resultptr;
        resultptr = new MimeXferEncoding((MimeXferEncoding &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_MimeXferEncoding, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetPartSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    bool arg3 = (bool) false ;
    size_t result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:Message_GetPartSize",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = ((Message const *)arg1)->GetPartSize(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetPartMimeType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetPartMimeType",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetPartMimeType(arg2);
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetPartDesc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetPartDesc",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetPartDesc(arg2);
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetPartSpec(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetPartSpec",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->GetPartSpec(arg2);
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetParameters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    MimeParameterList *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Message_GetParameters",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        MimeParameterList const &_result_ref = ((Message const *)arg1)->GetParameters(arg2);
        result = (MimeParameterList *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MimeParameterList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetDisposition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    int arg2 ;
    String *arg3 = (String *) NULL ;
    MimeParameterList *result;
    String tempstr3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:Message_GetDisposition",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        {
            char * temps; int templ;
            if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
            tempstr3 = String(temps, templ);
            arg3 = &tempstr3;
        }
    }
    {
        MimeParameterList const &_result_ref = ((Message const *)arg1)->GetDisposition(arg2,arg3);
        result = (MimeParameterList *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MimeParameterList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_FetchText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_FetchText",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Message const *)arg1)->FetchText();
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_WriteToString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Message *arg1 = (Message *) 0 ;
    String *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:Message_WriteToString",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Message,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_String,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)((Message const *)arg1)->WriteToString(*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetFirstNameFromAddress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = 0 ;
    String result;
    String tempstr1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetFirstNameFromAddress",&obj0)) goto fail;
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
        tempstr1 = String(temps, templ);
        arg1 = &tempstr1;
    }
    result = Message::GetFirstNameFromAddress((String const &)*arg1);
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetLastNameFromAddress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = 0 ;
    String result;
    String tempstr1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetLastNameFromAddress",&obj0)) goto fail;
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
        tempstr1 = String(temps, templ);
        arg1 = &tempstr1;
    }
    result = Message::GetLastNameFromAddress((String const &)*arg1);
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetNameFromAddress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = 0 ;
    String result;
    String tempstr1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetNameFromAddress",&obj0)) goto fail;
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
        tempstr1 = String(temps, templ);
        arg1 = &tempstr1;
    }
    result = Message::GetNameFromAddress((String const &)*arg1);
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_GetEMailFromAddress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = 0 ;
    String result;
    String tempstr1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Message_GetEMailFromAddress",&obj0)) goto fail;
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
        tempstr1 = String(temps, templ);
        arg1 = &tempstr1;
    }
    result = Message::GetEMailFromAddress((String const &)*arg1);
    
    resultobj = PyString_FromStringAndSize((&result)->data(), (&result)->length());
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_CompareAddresses(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    String *arg1 = 0 ;
    String *arg2 = 0 ;
    bool result;
    String tempstr1 ;
    String tempstr2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Message_CompareAddresses",&obj0,&obj1)) goto fail;
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
        tempstr1 = String(temps, templ);
        arg1 = &tempstr1;
    }
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
        tempstr2 = String(temps, templ);
        arg2 = &tempstr2;
    }
    result = (bool)Message::CompareAddresses((String const &)*arg1,(String const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Message_FindAddress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    wxArrayString *arg1 = 0 ;
    String *arg2 = 0 ;
    int result;
    String tempstr2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Message_FindAddress",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_wxArrayString,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        char * temps; int templ;
        if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
        tempstr2 = String(temps, templ);
        arg2 = &tempstr2;
    }
    result = (int)Message::FindAddress((wxArrayString const &)*arg1,(String const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Message_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Message, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_HeaderIterator", _wrap_new_HeaderIterator, METH_VARARGS },
	 { (char *)"HeaderIterator_GetNext", _wrap_HeaderIterator_GetNext, METH_VARARGS },
	 { (char *)"HeaderIterator_GetAll", _wrap_HeaderIterator_GetAll, METH_VARARGS },
	 { (char *)"HeaderIterator_Reset", _wrap_HeaderIterator_Reset, METH_VARARGS },
	 { (char *)"delete_HeaderIterator", _wrap_delete_HeaderIterator, METH_VARARGS },
	 { (char *)"HeaderIterator_swigregister", HeaderIterator_swigregister, METH_VARARGS },
	 { (char *)"Message_Create", _wrap_Message_Create, METH_VARARGS },
	 { (char *)"Message_GetHeaderLine", _wrap_Message_GetHeaderLine, METH_VARARGS },
	 { (char *)"Message_GetHeaderLines", _wrap_Message_GetHeaderLines, METH_VARARGS },
	 { (char *)"Message_GetHeaderIterator", _wrap_Message_GetHeaderIterator, METH_VARARGS },
	 { (char *)"Message_GetAllHeaders", _wrap_Message_GetAllHeaders, METH_VARARGS },
	 { (char *)"Message_GetHeader", _wrap_Message_GetHeader, METH_VARARGS },
	 { (char *)"Message_GetAddresses", _wrap_Message_GetAddresses, METH_VARARGS },
	 { (char *)"Message_GetAddressList", _wrap_Message_GetAddressList, METH_VARARGS },
	 { (char *)"Message_GetAddressesString", _wrap_Message_GetAddressesString, METH_VARARGS },
	 { (char *)"Message_ExtractAddressesFromHeader", _wrap_Message_ExtractAddressesFromHeader, METH_VARARGS },
	 { (char *)"Message_Subject", _wrap_Message_Subject, METH_VARARGS },
	 { (char *)"Message_From", _wrap_Message_From, METH_VARARGS },
	 { (char *)"Message_Date", _wrap_Message_Date, METH_VARARGS },
	 { (char *)"Message_GetId", _wrap_Message_GetId, METH_VARARGS },
	 { (char *)"Message_GetReferences", _wrap_Message_GetReferences, METH_VARARGS },
	 { (char *)"Message_GetInReplyTo", _wrap_Message_GetInReplyTo, METH_VARARGS },
	 { (char *)"Message_GetNewsgroups", _wrap_Message_GetNewsgroups, METH_VARARGS },
	 { (char *)"Message_GetStatus", _wrap_Message_GetStatus, METH_VARARGS },
	 { (char *)"Message_GetSize", _wrap_Message_GetSize, METH_VARARGS },
	 { (char *)"Message_GetDate", _wrap_Message_GetDate, METH_VARARGS },
	 { (char *)"Message_GetFolder", _wrap_Message_GetFolder, METH_VARARGS },
	 { (char *)"Message_GetUId", _wrap_Message_GetUId, METH_VARARGS },
	 { (char *)"Message_GetTopMimePart", _wrap_Message_GetTopMimePart, METH_VARARGS },
	 { (char *)"Message_CountParts", _wrap_Message_CountParts, METH_VARARGS },
	 { (char *)"Message_GetMimePart", _wrap_Message_GetMimePart, METH_VARARGS },
	 { (char *)"Message_GetPartContent", _wrap_Message_GetPartContent, METH_VARARGS },
	 { (char *)"Message_GetPartType", _wrap_Message_GetPartType, METH_VARARGS },
	 { (char *)"Message_GetTextPartEncoding", _wrap_Message_GetTextPartEncoding, METH_VARARGS },
	 { (char *)"Message_GetPartTransferEncoding", _wrap_Message_GetPartTransferEncoding, METH_VARARGS },
	 { (char *)"Message_GetPartSize", _wrap_Message_GetPartSize, METH_VARARGS },
	 { (char *)"Message_GetPartMimeType", _wrap_Message_GetPartMimeType, METH_VARARGS },
	 { (char *)"Message_GetPartDesc", _wrap_Message_GetPartDesc, METH_VARARGS },
	 { (char *)"Message_GetPartSpec", _wrap_Message_GetPartSpec, METH_VARARGS },
	 { (char *)"Message_GetParameters", _wrap_Message_GetParameters, METH_VARARGS },
	 { (char *)"Message_GetDisposition", _wrap_Message_GetDisposition, METH_VARARGS },
	 { (char *)"Message_FetchText", _wrap_Message_FetchText, METH_VARARGS },
	 { (char *)"Message_WriteToString", _wrap_Message_WriteToString, METH_VARARGS },
	 { (char *)"Message_GetFirstNameFromAddress", _wrap_Message_GetFirstNameFromAddress, METH_VARARGS },
	 { (char *)"Message_GetLastNameFromAddress", _wrap_Message_GetLastNameFromAddress, METH_VARARGS },
	 { (char *)"Message_GetNameFromAddress", _wrap_Message_GetNameFromAddress, METH_VARARGS },
	 { (char *)"Message_GetEMailFromAddress", _wrap_Message_GetEMailFromAddress, METH_VARARGS },
	 { (char *)"Message_CompareAddresses", _wrap_Message_CompareAddresses, METH_VARARGS },
	 { (char *)"Message_FindAddress", _wrap_Message_FindAddress, METH_VARARGS },
	 { (char *)"Message_swigregister", Message_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_MessageTo_p_MObjectRC(void *x) {
    return (void *)((MObjectRC *)  ((Message *) x));
}
static swig_type_info _swigt__p_MObjectRC[] = {{"_p_MObjectRC", 0, "MObjectRC *", 0},{"_p_MObjectRC"},{"_p_Message", _p_MessageTo_p_MObjectRC},{0}};
static swig_type_info _swigt__p_MimePart[] = {{"_p_MimePart", 0, "MimePart *", 0},{"_p_MimePart"},{0}};
static swig_type_info _swigt__p_Profile[] = {{"_p_Profile", 0, "Profile *", 0},{"_p_Profile"},{0}};
static swig_type_info _swigt__p_wxArrayInt[] = {{"_p_wxArrayInt", 0, "wxArrayInt *", 0},{"_p_wxArrayInt"},{0}};
static swig_type_info _swigt__p_time_t[] = {{"_p_time_t", 0, "time_t *", 0},{"_p_time_t"},{0}};
static swig_type_info _swigt__p_unsigned_long[] = {{"_p_unsigned_long", 0, "unsigned long *", 0},{"_p_unsigned_long"},{0}};
static swig_type_info _swigt__p_wxArrayString[] = {{"_p_wxArrayString", 0, "wxArrayString *", 0},{"_p_wxArrayString"},{0}};
static swig_type_info _swigt__p_String[] = {{"_p_String", 0, "String *", 0},{"_p_String"},{0}};
static swig_type_info _swigt__p_Message[] = {{"_p_Message", 0, "Message *", 0},{"_p_Message"},{0}};
static swig_type_info _swigt__p_wxFontEncoding[] = {{"_p_wxFontEncoding", 0, "wxFontEncoding *", 0},{"_p_wxFontEncoding"},{0}};
static swig_type_info _swigt__p_MimeXferEncoding[] = {{"_p_MimeXferEncoding", 0, "MimeXferEncoding *", 0},{"_p_MimeXferEncoding"},{0}};
static swig_type_info _swigt__p_void[] = {{"_p_void", 0, "void *", 0},{"_p_void"},{0}};
static swig_type_info _swigt__p_MessageContentType[] = {{"_p_MessageContentType", 0, "MessageContentType *", 0},{"_p_MessageContentType"},{0}};
static swig_type_info _swigt__p_UIdType[] = {{"_p_UIdType", 0, "UIdType *", 0},{"_p_UIdType"},{0}};
static swig_type_info _swigt__p_AddressList[] = {{"_p_AddressList", 0, "AddressList *", 0},{"_p_AddressList"},{0}};
static swig_type_info _swigt__p_MailFolder[] = {{"_p_MailFolder", 0, "MailFolder *", 0},{"_p_MailFolder"},{0}};
static swig_type_info _swigt__p_p_wxChar[] = {{"_p_p_wxChar", 0, "wxChar **", 0},{"_p_p_wxChar"},{0}};
static swig_type_info _swigt__p_MimeParameterList[] = {{"_p_MimeParameterList", 0, "MimeParameterList *", 0},{"_p_MimeParameterList"},{0}};
static swig_type_info _swigt__p_HeaderIterator[] = {{"_p_HeaderIterator", 0, "HeaderIterator *", 0},{"_p_HeaderIterator"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_MObjectRC, 
_swigt__p_MimePart, 
_swigt__p_Profile, 
_swigt__p_wxArrayInt, 
_swigt__p_time_t, 
_swigt__p_unsigned_long, 
_swigt__p_wxArrayString, 
_swigt__p_String, 
_swigt__p_Message, 
_swigt__p_wxFontEncoding, 
_swigt__p_MimeXferEncoding, 
_swigt__p_void, 
_swigt__p_MessageContentType, 
_swigt__p_UIdType, 
_swigt__p_AddressList, 
_swigt__p_MailFolder, 
_swigt__p_p_wxChar, 
_swigt__p_MimeParameterList, 
_swigt__p_HeaderIterator, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"MAT_FROM", (long) MAT_FROM, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MAT_SENDER", (long) MAT_SENDER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MAT_RETURNPATH", (long) MAT_RETURNPATH, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MAT_REPLYTO", (long) MAT_REPLYTO, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MAT_TO", (long) MAT_TO, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MAT_CC", (long) MAT_CC, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MAT_BCC", (long) MAT_BCC, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPETEXT", (long) Message::MSG_TYPETEXT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEMULTIPART", (long) Message::MSG_TYPEMULTIPART, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEMESSAGE", (long) Message::MSG_TYPEMESSAGE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEAPPLICATION", (long) Message::MSG_TYPEAPPLICATION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEAUDIO", (long) Message::MSG_TYPEAUDIO, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEIMAGE", (long) Message::MSG_TYPEIMAGE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEVIDEO", (long) Message::MSG_TYPEVIDEO, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEMODEL", (long) Message::MSG_TYPEMODEL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEOTHER", (long) Message::MSG_TYPEOTHER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Message_MSG_TYPEINVALID", (long) Message::MSG_TYPEINVALID, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

