/*
 * FILE : ./Message.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 4)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef __cplusplus
extern "C" {
#endif
#include "Python.h"
extern void SWIG_MakePtr(char *, void *, char *);
extern void SWIG_RegisterMapping(char *, char *, void *(*)(void *));
extern char *SWIG_GetPtr(char *, void **, char *);
extern void SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
extern PyObject *SWIG_newvarlink(void);
#ifdef __cplusplus
}
#endif

#define SWIG_init    initMessagec

#define SWIG_name    "Messagec"

#include	"Mpch.h"
#ifndef	USE_PCH
#   include   "Mcommon.h"
#   include   "Message.h"
#endif
#define Message_GetHeaderLine(obj,arg0,arg1)  (obj->GetHeaderLine(arg0,arg1))
static PyObject *_wrap_Message_GetHeaderLine(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Message * _arg0;
    String * _arg1;
    String * _arg2;
    char * _argc0 = 0;
    char * _argc1 = 0;
    char * _argc2 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"sss:Message_GetHeaderLine",&_argc0,&_argc1,&_argc2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_GetHeaderLine. Expected _Message_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of Message_GetHeaderLine. Expected _String_p.");
        return NULL;
        }
    }
    if (_argc2) {
        if (SWIG_GetPtr(_argc2,(void **) &_arg2,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of Message_GetHeaderLine. Expected _String_p.");
        return NULL;
        }
    }
    Message_GetHeaderLine(_arg0,*_arg1,*_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define Message_Subject(obj)  (obj->Subject())
static PyObject *_wrap_Message_Subject(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    String * _result;
    Message * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:Message_Subject",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_Subject. Expected _Message_p.");
        return NULL;
        }
    }
    String & _result_ref = Message_Subject(_arg0);
    _result = (String *) &_result_ref;
    SWIG_MakePtr(_ptemp, (char *) _result,"_String_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Message_From(obj)  (obj->From())
static PyObject *_wrap_Message_From(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    String * _result;
    Message * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:Message_From",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_From. Expected _Message_p.");
        return NULL;
        }
    }
    _result = new String (Message_From(_arg0));
    SWIG_MakePtr(_ptemp, (void *) _result,"_String_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Message_Date(obj)  (obj->Date())
static PyObject *_wrap_Message_Date(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    String * _result;
    Message * _arg0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s:Message_Date",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_Date. Expected _Message_p.");
        return NULL;
        }
    }
    String & _result_ref = Message_Date(_arg0);
    _result = (String *) &_result_ref;
    SWIG_MakePtr(_ptemp, (char *) _result,"_String_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Message_FetchText(obj)  (obj->FetchText())
static PyObject *_wrap_Message_FetchText(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    char * _result;
    Message * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Message_FetchText",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_FetchText. Expected _Message_p.");
        return NULL;
        }
    }
    _result = (char *)Message_FetchText(_arg0);
    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define Message_CountParts(obj)  (obj->CountParts())
static PyObject *_wrap_Message_CountParts(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Message * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Message_CountParts",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_CountParts. Expected _Message_p.");
        return NULL;
        }
    }
    _result = (int )Message_CountParts(_arg0);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Message_GetPartContent(obj,arg0,arg1)  (obj->GetPartContent(arg0,arg1))
static PyObject *_wrap_Message_GetPartContent(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    char * _result;
    Message * _arg0;
    int  _arg1 = 0;
    unsigned long * _arg2 = NULL;
    char * _argc0 = 0;
    char * _argc2 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s|is:Message_GetPartContent",&_argc0,&_arg1,&_argc2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_GetPartContent. Expected _Message_p.");
        return NULL;
        }
    }
    if (_argc2) {
        if (SWIG_GetPtr(_argc2,(void **) &_arg2,"_unsigned_long_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of Message_GetPartContent. Expected _unsigned_long_p.");
        return NULL;
        }
    }
    _result = (char *)Message_GetPartContent(_arg0,_arg1,_arg2);
    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define Message_GetPartType(obj,arg0)  (obj->GetPartType(arg0))
static PyObject *_wrap_Message_GetPartType(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Message * _arg0;
    int  _arg1 = 0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s|i:Message_GetPartType",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_GetPartType. Expected _Message_p.");
        return NULL;
        }
    }
    _result = (int )Message_GetPartType(_arg0,_arg1);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Message_GetPartEncoding(obj,arg0)  (obj->GetPartEncoding(arg0))
static PyObject *_wrap_Message_GetPartEncoding(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    int  _result;
    Message * _arg0;
    int  _arg1 = 0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s|i:Message_GetPartEncoding",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_GetPartEncoding. Expected _Message_p.");
        return NULL;
        }
    }
    _result = (int )Message_GetPartEncoding(_arg0,_arg1);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define Message_GetPartSize(obj,arg0,arg1)  (obj->GetPartSize(arg0,arg1))
static PyObject *_wrap_Message_GetPartSize(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    size_t * _result;
    Message * _arg0;
    int  _arg1 = 0;
    bool  _arg2 = false;
    char * _argc0 = 0;
    int tempbool2;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s|ii:Message_GetPartSize",&_argc0,&_arg1,&tempbool2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_GetPartSize. Expected _Message_p.");
        return NULL;
        }
    }
    _arg2 = (bool ) tempbool2;
    _result = new size_t (Message_GetPartSize(_arg0,_arg1,_arg2));
    SWIG_MakePtr(_ptemp, (void *) _result,"_size_t_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Message_GetPartMimeType(obj,arg0)  (obj->GetPartMimeType(arg0))
static PyObject *_wrap_Message_GetPartMimeType(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    String * _result;
    Message * _arg0;
    int  _arg1 = 0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s|i:Message_GetPartMimeType",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_GetPartMimeType. Expected _Message_p.");
        return NULL;
        }
    }
    String & _result_ref = Message_GetPartMimeType(_arg0,_arg1);
    _result = (String *) &_result_ref;
    SWIG_MakePtr(_ptemp, (char *) _result,"_String_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Message_GetPartDesc(obj,arg0)  (obj->GetPartDesc(arg0))
static PyObject *_wrap_Message_GetPartDesc(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    String * _result;
    Message * _arg0;
    int  _arg1 = 0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s|i:Message_GetPartDesc",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_GetPartDesc. Expected _Message_p.");
        return NULL;
        }
    }
    String & _result_ref = Message_GetPartDesc(_arg0,_arg1);
    _result = (String *) &_result_ref;
    SWIG_MakePtr(_ptemp, (char *) _result,"_String_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Message_GetPartSpec(obj,arg0)  (obj->GetPartSpec(arg0))
static PyObject *_wrap_Message_GetPartSpec(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    String * _result;
    Message * _arg0;
    int  _arg1 = 0;
    char * _argc0 = 0;
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTuple(args,"s|i:Message_GetPartSpec",&_argc0,&_arg1)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_GetPartSpec. Expected _Message_p.");
        return NULL;
        }
    }
    String & _result_ref = Message_GetPartSpec(_arg0,_arg1);
    _result = (String *) &_result_ref;
    SWIG_MakePtr(_ptemp, (char *) _result,"_String_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define Message_WriteToString(obj,arg0,arg1)  (obj->WriteToString(arg0,arg1))
static PyObject *_wrap_Message_WriteToString(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Message * _arg0;
    String * _arg1;
    bool  _arg2 = true;
    char * _argc0 = 0;
    char * _argc1 = 0;
    int tempbool2;

    self = self;
    if(!PyArg_ParseTuple(args,"ss|i:Message_WriteToString",&_argc0,&_argc1,&tempbool2)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_WriteToString. Expected _Message_p.");
        return NULL;
        }
    }
    if (_argc1) {
        if (SWIG_GetPtr(_argc1,(void **) &_arg1,"_String_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of Message_WriteToString. Expected _String_p.");
        return NULL;
        }
    }
    _arg2 = (bool ) tempbool2;
    Message_WriteToString(_arg0,*_arg1,_arg2);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define delete_Message(obj) (delete obj)
static PyObject *_wrap_delete_Message(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    Message * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:delete_Message",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_Message. Expected _Message_p.");
        return NULL;
        }
    }
    delete_Message(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define Message_IsInitialised(obj)  (obj->IsInitialised())
static PyObject *_wrap_Message_IsInitialised(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    bool  _result;
    Message * _arg0;
    char * _argc0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"s:Message_IsInitialised",&_argc0)) 
        return NULL;
    if (_argc0) {
        if (SWIG_GetPtr(_argc0,(void **) &_arg0,"_Message_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of Message_IsInitialised. Expected _Message_p.");
        return NULL;
        }
    }
    _result = (bool )Message_IsInitialised(_arg0);
    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyMethodDef MessagecMethods[] = {
	 { "Message_IsInitialised", _wrap_Message_IsInitialised, 1 },
	 { "delete_Message", _wrap_delete_Message, 1 },
	 { "Message_WriteToString", _wrap_Message_WriteToString, 1 },
	 { "Message_GetPartSpec", _wrap_Message_GetPartSpec, 1 },
	 { "Message_GetPartDesc", _wrap_Message_GetPartDesc, 1 },
	 { "Message_GetPartMimeType", _wrap_Message_GetPartMimeType, 1 },
	 { "Message_GetPartSize", _wrap_Message_GetPartSize, 1 },
	 { "Message_GetPartEncoding", _wrap_Message_GetPartEncoding, 1 },
	 { "Message_GetPartType", _wrap_Message_GetPartType, 1 },
	 { "Message_GetPartContent", _wrap_Message_GetPartContent, 1 },
	 { "Message_CountParts", _wrap_Message_CountParts, 1 },
	 { "Message_FetchText", _wrap_Message_FetchText, 1 },
	 { "Message_Date", _wrap_Message_Date, 1 },
	 { "Message_From", _wrap_Message_From, 1 },
	 { "Message_Subject", _wrap_Message_Subject, 1 },
	 { "Message_GetHeaderLine", _wrap_Message_GetHeaderLine, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void,initMessagec)() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 m = Py_InitModule("Messagec", MessagecMethods);
	 d = PyModule_GetDict(m);
/*
 * These are the pointer type-equivalency mappings. 
 * (Used by the SWIG pointer type-checker).
 */
	 SWIG_RegisterMapping("_signed_long","_long",0);
	 SWIG_RegisterMapping("_Message","_class_Message",0);
	 SWIG_RegisterMapping("_long","_unsigned_long",0);
	 SWIG_RegisterMapping("_long","_signed_long",0);
	 SWIG_RegisterMapping("_class_Message","_Message",0);
	 SWIG_RegisterMapping("_unsigned_long","_long",0);
	 SWIG_RegisterMapping("_signed_int","_int",0);
	 SWIG_RegisterMapping("_unsigned_short","_short",0);
	 SWIG_RegisterMapping("_signed_short","_short",0);
	 SWIG_RegisterMapping("_unsigned_int","_int",0);
	 SWIG_RegisterMapping("_short","_unsigned_short",0);
	 SWIG_RegisterMapping("_short","_signed_short",0);
	 SWIG_RegisterMapping("_String","_class_String",0);
	 SWIG_RegisterMapping("_int","_unsigned_int",0);
	 SWIG_RegisterMapping("_int","_signed_int",0);
	 SWIG_RegisterMapping("_class_String","_String",0);
}
