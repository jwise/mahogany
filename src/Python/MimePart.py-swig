# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MimePart', [dirname(__file__)])
        except ImportError:
            import _MimePart
            return _MimePart
        if fp is not None:
            try:
                _mod = imp.load_module('_MimePart', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MimePart = swig_import_helper()
    del swig_import_helper
else:
    import _MimePart
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class MimeParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MimeParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MimeParameter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MimePart.new_MimeParameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["name"] = _MimePart.MimeParameter_name_set
    __swig_getmethods__["name"] = _MimePart.MimeParameter_name_get
    if _newclass:name = _swig_property(_MimePart.MimeParameter_name_get, _MimePart.MimeParameter_name_set)
    __swig_setmethods__["value"] = _MimePart.MimeParameter_value_set
    __swig_getmethods__["value"] = _MimePart.MimeParameter_value_get
    if _newclass:value = _swig_property(_MimePart.MimeParameter_value_get, _MimePart.MimeParameter_value_set)
    __swig_destroy__ = _MimePart.delete_MimeParameter
    __del__ = lambda self : None;
MimeParameter_swigregister = _MimePart.MimeParameter_swigregister
MimeParameter_swigregister(MimeParameter)

MIME_ENC_7BIT = _MimePart.MIME_ENC_7BIT
MIME_ENC_8BIT = _MimePart.MIME_ENC_8BIT
MIME_ENC_BINARY = _MimePart.MIME_ENC_BINARY
MIME_ENC_BASE64 = _MimePart.MIME_ENC_BASE64
MIME_ENC_QUOTEDPRINTABLE = _MimePart.MIME_ENC_QUOTEDPRINTABLE
MIME_ENC_OTHER = _MimePart.MIME_ENC_OTHER
MIME_ENC_INVALID = _MimePart.MIME_ENC_INVALID
class MimePart(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MimePart, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MimePart, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MimePart.delete_MimePart
    __del__ = lambda self : None;
    def GetParent(self): return _MimePart.MimePart_GetParent(self)
    def GetNext(self): return _MimePart.MimePart_GetNext(self)
    def GetNested(self): return _MimePart.MimePart_GetNested(self)
    def GetType(self): return _MimePart.MimePart_GetType(self)
    def GetDescription(self): return _MimePart.MimePart_GetDescription(self)
    def GetFilename(self): return _MimePart.MimePart_GetFilename(self)
    def GetDisposition(self): return _MimePart.MimePart_GetDisposition(self)
    def GetPartSpec(self): return _MimePart.MimePart_GetPartSpec(self)
    def GetParam(self, *args): return _MimePart.MimePart_GetParam(self, *args)
    def GetDispositionParam(self, *args): return _MimePart.MimePart_GetDispositionParam(self, *args)
    def GetParameters(self): return _MimePart.MimePart_GetParameters(self)
    def GetDispositionParameters(self): return _MimePart.MimePart_GetDispositionParameters(self)
    def IsAttachment(self): return _MimePart.MimePart_IsAttachment(self)
    def GetRawContent(self, len = None): return _MimePart.MimePart_GetRawContent(self, len)
    def GetRawContentAsString(self): return _MimePart.MimePart_GetRawContentAsString(self)
    def GetContent(self, *args): return _MimePart.MimePart_GetContent(self, *args)
    def GetTextContent(self): return _MimePart.MimePart_GetTextContent(self)
    def GetHeaders(self): return _MimePart.MimePart_GetHeaders(self)
    def GetTransferEncoding(self): return _MimePart.MimePart_GetTransferEncoding(self)
    def GetSize(self): return _MimePart.MimePart_GetSize(self)
    def GetTextEncoding(self): return _MimePart.MimePart_GetTextEncoding(self)
    def GetNumberOfLines(self): return _MimePart.MimePart_GetNumberOfLines(self)
MimePart_swigregister = _MimePart.MimePart_swigregister
MimePart_swigregister(MimePart)



