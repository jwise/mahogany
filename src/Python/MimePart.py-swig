# This file was created automatically by SWIG 1.3.27.
# Don't modify this file, modify the SWIG interface instead.

import _MimePart

# This file is compatible with both classic and new-style classes.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "this"):
        if isinstance(value, class_type):
            self.__dict__[name] = value.this
            if hasattr(value,"thisown"): self.__dict__["thisown"] = value.thisown
            del value.thisown
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name) or (name == "thisown"):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class MimeParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MimeParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MimeParameter, name)
    def __repr__(self):
        return "<%s.%s; proxy of C++ MimeParameter instance at %s>" % (self.__class__.__module__, self.__class__.__name__, self.this,)
    def __init__(self, *args):
        _swig_setattr(self, MimeParameter, 'this', _MimePart.new_MimeParameter(*args))
        _swig_setattr(self, MimeParameter, 'thisown', 1)
    __swig_setmethods__["name"] = _MimePart.MimeParameter_name_set
    __swig_getmethods__["name"] = _MimePart.MimeParameter_name_get
    if _newclass:name = property(_MimePart.MimeParameter_name_get, _MimePart.MimeParameter_name_set)
    __swig_setmethods__["value"] = _MimePart.MimeParameter_value_set
    __swig_getmethods__["value"] = _MimePart.MimeParameter_value_get
    if _newclass:value = property(_MimePart.MimeParameter_value_get, _MimePart.MimeParameter_value_set)
    def __del__(self, destroy=_MimePart.delete_MimeParameter):
        try:
            if self.thisown: destroy(self)
        except: pass


class MimeParameterPtr(MimeParameter):
    def __init__(self, this):
        _swig_setattr(self, MimeParameter, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MimeParameter, 'thisown', 0)
        self.__class__ = MimeParameter
_MimePart.MimeParameter_swigregister(MimeParameterPtr)

MIME_ENC_7BIT = _MimePart.MIME_ENC_7BIT
MIME_ENC_8BIT = _MimePart.MIME_ENC_8BIT
MIME_ENC_BINARY = _MimePart.MIME_ENC_BINARY
MIME_ENC_BASE64 = _MimePart.MIME_ENC_BASE64
MIME_ENC_QUOTEDPRINTABLE = _MimePart.MIME_ENC_QUOTEDPRINTABLE
MIME_ENC_OTHER = _MimePart.MIME_ENC_OTHER
MIME_ENC_INVALID = _MimePart.MIME_ENC_INVALID
class MimePart(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MimePart, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MimePart, name)
    def __init__(self): raise RuntimeError, "No constructor defined"
    def __repr__(self):
        return "<%s.%s; proxy of C++ MimePart instance at %s>" % (self.__class__.__module__, self.__class__.__name__, self.this,)
    def __del__(self, destroy=_MimePart.delete_MimePart):
        try:
            if self.thisown: destroy(self)
        except: pass

    def GetParent(*args): return _MimePart.MimePart_GetParent(*args)
    def GetNext(*args): return _MimePart.MimePart_GetNext(*args)
    def GetNested(*args): return _MimePart.MimePart_GetNested(*args)
    def GetType(*args): return _MimePart.MimePart_GetType(*args)
    def GetDescription(*args): return _MimePart.MimePart_GetDescription(*args)
    def GetFilename(*args): return _MimePart.MimePart_GetFilename(*args)
    def GetDisposition(*args): return _MimePart.MimePart_GetDisposition(*args)
    def GetPartSpec(*args): return _MimePart.MimePart_GetPartSpec(*args)
    def GetParam(*args): return _MimePart.MimePart_GetParam(*args)
    def GetDispositionParam(*args): return _MimePart.MimePart_GetDispositionParam(*args)
    def GetParameters(*args): return _MimePart.MimePart_GetParameters(*args)
    def GetDispositionParameters(*args): return _MimePart.MimePart_GetDispositionParameters(*args)
    def IsAttachment(*args): return _MimePart.MimePart_IsAttachment(*args)
    def GetRawContent(*args): return _MimePart.MimePart_GetRawContent(*args)
    def GetContent(*args): return _MimePart.MimePart_GetContent(*args)
    def GetTextContent(*args): return _MimePart.MimePart_GetTextContent(*args)
    def GetHeaders(*args): return _MimePart.MimePart_GetHeaders(*args)
    def GetTransferEncoding(*args): return _MimePart.MimePart_GetTransferEncoding(*args)
    def GetSize(*args): return _MimePart.MimePart_GetSize(*args)
    def GetTextEncoding(*args): return _MimePart.MimePart_GetTextEncoding(*args)
    def GetNumberOfLines(*args): return _MimePart.MimePart_GetNumberOfLines(*args)

class MimePartPtr(MimePart):
    def __init__(self, this):
        _swig_setattr(self, MimePart, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, MimePart, 'thisown', 0)
        self.__class__ = MimePart
_MimePart.MimePart_swigregister(MimePartPtr)



