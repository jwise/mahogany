# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SendMessage', [dirname(__file__)])
        except ImportError:
            import _SendMessage
            return _SendMessage
        if fp is not None:
            try:
                _mod = imp.load_module('_SendMessage', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SendMessage = swig_import_helper()
    del swig_import_helper
else:
    import _SendMessage
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SendMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SendMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SendMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NeverQueue = _SendMessage.SendMessage_NeverQueue
    Silent = _SendMessage.SendMessage_Silent
    __swig_getmethods__["Create"] = lambda x: _SendMessage.SendMessage_Create
    if _newclass:Create = staticmethod(_SendMessage.SendMessage_Create)
    __swig_getmethods__["CreateResent"] = lambda x: _SendMessage.SendMessage_CreateResent
    if _newclass:CreateResent = staticmethod(_SendMessage.SendMessage_CreateResent)
    __swig_getmethods__["CreateFromMsg"] = lambda x: _SendMessage.SendMessage_CreateFromMsg
    if _newclass:CreateFromMsg = staticmethod(_SendMessage.SendMessage_CreateFromMsg)
    __swig_getmethods__["Bounce"] = lambda x: _SendMessage.SendMessage_Bounce
    if _newclass:Bounce = staticmethod(_SendMessage.SendMessage_Bounce)
    def SetSubject(self, *args): return _SendMessage.SendMessage_SetSubject(self, *args)
    def SetAddresses(self, *args): return _SendMessage.SendMessage_SetAddresses(self, *args)
    def SetFrom(self, *args): return _SendMessage.SendMessage_SetFrom(self, *args)
    def SetNewsgroups(self, *args): return _SendMessage.SendMessage_SetNewsgroups(self, *args)
    def SetFcc(self, *args): return _SendMessage.SendMessage_SetFcc(self, *args)
    def SetHeaderEncoding(self, *args): return _SendMessage.SendMessage_SetHeaderEncoding(self, *args)
    def AddHeaderEntry(self, *args): return _SendMessage.SendMessage_AddHeaderEntry(self, *args)
    def RemoveHeaderEntry(self, *args): return _SendMessage.SendMessage_RemoveHeaderEntry(self, *args)
    def HasHeaderEntry(self, *args): return _SendMessage.SendMessage_HasHeaderEntry(self, *args)
    def GetHeaderEntry(self, *args): return _SendMessage.SendMessage_GetHeaderEntry(self, *args)
    def AddPart(self, *args): return _SendMessage.SendMessage_AddPart(self, *args)
    def EnableSigning(self, user = ""): return _SendMessage.SendMessage_EnableSigning(self, user)
    def WriteToString(self, *args): return _SendMessage.SendMessage_WriteToString(self, *args)
    def WriteToFile(self, *args): return _SendMessage.SendMessage_WriteToFile(self, *args)
    def WriteToFolder(self, *args): return _SendMessage.SendMessage_WriteToFolder(self, *args)
    def SendOrQueue(self, flags = 0): return _SendMessage.SendMessage_SendOrQueue(self, flags)
    def Preview(self, text = None): return _SendMessage.SendMessage_Preview(self, text)
    __swig_destroy__ = _SendMessage.delete_SendMessage
    __del__ = lambda self : None;
SendMessage_swigregister = _SendMessage.SendMessage_swigregister
SendMessage_swigregister(SendMessage)

def SendMessage_Create(*args):
  return _SendMessage.SendMessage_Create(*args)
SendMessage_Create = _SendMessage.SendMessage_Create

def SendMessage_CreateResent(*args):
  return _SendMessage.SendMessage_CreateResent(*args)
SendMessage_CreateResent = _SendMessage.SendMessage_CreateResent

def SendMessage_CreateFromMsg(*args):
  return _SendMessage.SendMessage_CreateFromMsg(*args)
SendMessage_CreateFromMsg = _SendMessage.SendMessage_CreateFromMsg

def SendMessage_Bounce(*args):
  return _SendMessage.SendMessage_Bounce(*args)
SendMessage_Bounce = _SendMessage.SendMessage_Bounce



