File:		build_win.txt
Summary:	contains instructions for building Mahogany under MS Windows
Audience:	Mahogany developers
Author:		Vadim Zeitlin <vadim@wxwindows.org>
Modified by:	Nerijus Baliunas <nerijus@users.sf.net> (cygwin part)
Last modified:	2004-07-14
Version:	the information in this file applies to the cvs sources

0. Requirements
---------------

a) a compiler: currently, the supported compilers for building Mahogany are
   MS Visual C++ 7.1 and cygwin. Previous versions of Visual C++ (5/6/7.0)
   could probably be used as well but the project files haven't been updated
   for them since quite some time and so this definitely won't work out of
   the box but require some effort from your part.

   If you are interested in building using another compiler (mingw32, BC++)
   please contact us and we will try to help you.

b) cvs client: you need to have daily access to Mahogany (and sometimes
   wxWindows) source tree, and the cvs is the only way to keep up to date. The
   precompiled cvs binaries for Win32 can be found at http://www.cyclic.com/

c) GNU m4 from cygwin tools: this is not an absolute requirement, however you
   will not be able to compile *.mid (Mahogany Interface Description) files if
   you don't have it and so you will have to use the versions already in the
   cvs. If you do have m4, set the environment variable M4 to contain its full
   path (or just m4 if it is in your PATH), otherwise it won't be used.


1. Visual C++
-------------

a) wxWindows
------------

   Mahogany depends on wxWindows and prior to compiling Mahogany you need to
build the wxMSW library.

   You may use either wxMSW 2.5.2 release (latest 2.5 release as of the time
of this writing, if a newer one is available, do use it) or the latest
wxWindows sources from cvs HEAD which usually provide more functionality. Note
that you may use M_STABLE tag to check out the wxWindows version which is known
to work well with Mahogany.

   Before building Mahogany you will need to build wxWindows. To do it, you
should open build/msw/wx.dsw in wxWindows directory and build all projects in
it. You may use extra\scripts\ wxmsw_setup.h file instead of the standard
setup.h when building if you want to disable all the features not needed by
Mahogany but doing this is optional and you should revert to the standard
wx/setup.h if using wxmsw_setup.h results in errors (it is not always up to
date...).


b) DSPAM
--------

   Building Mahogany with DSPAM requires SQlite library: http://www.sqlite.org/
You should download its sources and build it using lib\sqlite.vcproj project
file (you will need to copy it to the directory where you unpacked SQlite
sources) and add the directory containing sqlite.h to the list of global
include paths in VC++ IDE. You should also add the library directory containing
sqlite[d].lib (the debug version should have "d" in its name) to the list of
library paths.

   If you don't want to install SQlite, you will have to skip building dspam
project and DspamFilter.cpp file located in modules/spam subfolder of the
source files of M project in the IDE (simply set "Excluded from build" to true
in its properties).


c) Python
---------

   If you want to build Mahogany with an embedded Python interpreter, you need
to download the source distribution of Python from http://www.python.org/,
built it using the provided project file (in versions up to 2.3.3 it is for
VC++ 6 but can be imported without problems in VC++ 7.x) in PCbuild
subdirectory and add the path to include subdirectory to your global VC++
settings.

   Otherwise you may set USE_PYTHON to 0 in include/config_nt.h to disable
embedded Python.


d) Build process
----------------

   Before loading M.sln file, you will need to open it in your favourite text
editor and do a global search of replace of "L:\wxWindows" with the path where
your wxWindows installation is. You also must have "wxwin" environment variable
set to point to the same location (as per wxWindows installation instructions).

   After this you can open the solution file M.sln in Visual C++ IDE. Here is a
brief description of various projects in the solution:

* M - the main Mahogany project
* imap - the mail routines support library
* compface - the library for X-Face handling
* versit - vCard library
* dspam - the spam filtering library
* base, core, ... - wxWindows projects

   Finally, just build everything. Before running M.exe, copy the file
versit.dll produced when building versit project into the root Mahogany
directory (or elsewhere in your PATH).

   If you encounter any problems with Mahogany (e.g. crashes...), please build
the debug configuration and run it under debugger, this often provides valuable
additional information.


e) Common problems
------------------

- dspam doesn't compile
+ check that you installed sqlite as explained above





2. Cygwin
---------

a) Build process
----------------

g++ 3.x can not compile Mahogany currently, so I used g++ 2.95.3. As compiler
version should be the same when compiling both wxWindows and Mahogany, we should
use g++ 2.95.3 for compiling wxWindows as well. Just use

cd <path to wxWindows sources>
mkdir build.cygwin.gcc295
cd build.cygwin.gcc295
CC=gcc-2 CXX=g++-2 ../configure
make
make install

cd <path to Mahogany sources>
mkdir build.cygwin.gcc295
cd build.cygwin.gcc295
CC=gcc-2 CXX=g++-2 ../configure --with-modules=static
make
make install

in cygwin bash shell.

You can also compile with -mno-cygwin switch, i.e. mingw version. Use
CC='gcc-2 -mno-cygwin' CXX='g++-2 -mno-cygwin' OSTYPE=mingw ../configure --with-modules=static


b) Common problems
------------------

Linking Mahogany compiled with debug info requires a lot of memory, so please
disable debugging if you experience out of memory problems.

SSL does not work with cygwin.

IMAP does not work with mingw.

vi: ts=8 sw=3 nolist nocin ai:
