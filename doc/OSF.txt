

Compiling M on DEC Alpha with Digital UNIX 3.2c

Holger Bauer (bauer@itsm.uni-stuttgart.de, http://www.itsm.uni-stuttgart.de/~bauer)

1. First I took the following arguments for configure:
  configure --x-includes=/usr/X11R6/include --x-libraries=/usr/X11R6/shlib
  --with-wxGTK --without-python
  This would not work since make dep still tries to find Python.h.
  Therefore I created a dummy include file Python.h in /M/src/Python.
  This helped to complete make dep. \label{item1}

2. However step \ref{item1} still reported some warnings:
  /M/extra/src/c-client/mail.h would complain about a missing linkage.h
  header file. Also, a missing osdep.h file was reported.
  /M/extra/src/c-client/osdep.h falsely pointed to os_gof.h but this
  file was missing. Therefore copied os_osf.h to os_gof.h. Also, copied
  os_osf.c to os_gof.c since osdepbas.c pointed to os_gof.c. 

3. cd src;
  make;
  This would fail since swig was not searched for by the configure
  script. Since even I gave --without-python to configure make would
  search in /src/Python and try to compile things there I decided
  to install python and swig.

4. The Python-FAQ states that python definitely has to be compiled with
  the DEC cc.

5. After that I took:
  configure --x-includes=/usr/X11R6/include --x-libraries=/usr/X11R6/shlib
  --with-wxGTK
  The make process would then stop in /M/src/adb/AdbFrame.cpp. The
  line AdbTreeElement *current = wxIsPathSeparator(strEntry[0u])would
  not compile since the wxString function takes a long integer (due
  to the 64 bit architecture).
  This error might disappear if somebody adjusts the wxString library
  accordingly.
  In meantime (for my local libwx_gtk.so) I changed to strEntry[0].

6. Then only final linkage errors occured:
  -lpthread is not known, needs -lpthreads
  -lcrypt is not known, just omit
  -ldmalloc is not known, pass --without-dmalloc to configure.

7. Because the link process did not give me any error I expected M to
  run (at least some kind of unstable). But a core dump appeared immediately.
  dbx gives to following information:
  (dbx) run 
  signal Segmentation fault at >*[mig_get_reply_port, 0x3ff83004a0c]
  stq r26, 0(sp) 
  (dbx) where 
  > 0 mig_get_reply_port(0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
  0xffffffffffffffff, 0xffffffffffffffff) [0x3ff83004a0c] 
  The output of gdb is not very appealing:
  (gdb) run Starting program: /usr3/bauer/src/M/M/src/M 
  Program received signal SIGSEGV, 
  Segmentation fault. 0x3ff83008f5c in port_allocate ()
  (gdb) where
  #0 0x3ff83008f5c in port_allocate () #1 0x3ff83004a38 in mig_get_reply_port
  () 
  #2 0x3ff83008f94 in port_allocate () #3 0x3ff83004a38 in mig_get_reply_port
  ()
  This output runs until infinity .
