%% LyX 1.1 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[12pt,letterpaper,oneside]{book}
\usepackage{palatino}
\usepackage[T1]{fontenc}

\makeatletter


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\providecommand{\LyX}{L\kern-.1667em\lower.25em\hbox{Y}\kern-.125emX\@}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{html, epsfig}
\makeatletter

\makeatother

\begin{document}


\vfill{}
\title{\textsl{Mahogany Hacker's Guide} \\
for Version 0.23a\\
``Polwarth III''}
\vfill{}


\author{Copyright 1997-1999 by Karsten Ballüder \\
 Written by Karsten Ballüder and Vadim Zeitlin\\
\texttt{<mahogany-developers@lists.sourceforge.net>}}

\maketitle
\tableofcontents{}


\chapter{Compiling \textsl{Mahogany} from source}

These compilation notes are probably a bit outdated. The best start is to use
the \texttt{-{}-help} option of configure to see which options it supports.
These notes are written with the Unix version in mind, for problems with compiling
the MS Windows or MacOS versions, you might want to contact the mahogany-developers@lists.sourceforge.net
mailing list instead.


\section{General Procedure}


\subsection{Prerequisites}

Before you can compile Mahogany, you will need a matching copy of \htmladdnormallinkfoot{wxWindows}{http://www.wxwindows.org/},
that is, if compiling under Unix, you will need \htmladdnormallinkfoot{wxGTK}{http://www.wxwindows.org/dl_gtk.htm}.
As wxGTK is under constant development, you should use the same copy of wxGTK
that we used to build Mahogany, you can get it from the \htmladdnormallinkfoot{Mahogany download page}{http://www.wxwindows.org/Mahogany/download.html}.


\subsection{Configuring wxGTK}


\subsubsection{Unpack wxGTK and run its \texttt{configure} script:}

\begin{quote}
wxGTK's configure system is a bit complicated, but easy to use once you see
how to. If you are using the sources from the CVS repository or the snapshot
from the Mahogany ftp server, please follow the instructions in the file wxWindows/BuildCVS.txt.
Generally this involves setting up a subdirectory for building it and invoking
the configure script:

\texttt{mkdir build }

\texttt{cd build}

\texttt{../configure -{}-without-threads -{}-with-gtk -{}-without-shared -{}-without-debug\_flag}~\\
\texttt{~~~~~~~~~~~~-{}-without-debug\_info -{}-without-odbc}

\texttt{make}

\texttt{make install}

If compiling with gtk 1.0.x rather than 1.2.x, you need to specify the additional
option \texttt{-{}-without-dnd}. Of course, feel free to change the two debug
options to \texttt{-{}-with-debug} if you want to generate a version with debugging
enabled. Just make sure that if you configure wxGTK with debug, then you also
need to configure Mahogany \texttt{-{}-with-debug}, or it will fail. If you
experience problems with thread support, configure it \texttt{-{}-without-threads},
they are not used currently. \textit{Note: the --with/--without arguments are
prefixed with a double hyphen, not just a single one, as it might show up in
some version of this document.}

More up-to-date information can be found in Mahogany's README file. 
\end{quote}

\subsection{Configuring Mahogany}

This is even easier than with wxGTK. Just run Mahogany's \texttt{configure}
script. If you have built wxGTK with debugging enabled, specify the additional
option \texttt{-{}-with-debug} when configuring Mahogany. Call \texttt{./configure
-{}-help} to get a list of supported options. Generally you will just run it
without options. If configure fails to find some header files or libraries,
you can create links to them in the \texttt{extra/include} and \texttt{extra/lib}
directories and configure will find them. To reconfigure Mahogany, make sure
that you delete any \texttt{{*}cache{*}} files first. If you have multiple versions
of wxGTK installed, you can set the \texttt{WX\_CONFIG} environment variable
to tell \texttt{configure} which \texttt{wx-config} program to call. \textit{Note:
the --with/--without arguments are prefixed with a double hyphen, not just a
single one, as it might show up in some version of this document}

What to do, step by step:\\
\texttt{./configure -{}-help }~\\
\texttt{./configure with options as described above}~\\
\texttt{make depend}~\\
\texttt{make}~\\
\texttt{make install}~\\
\texttt{make install\_all}


\subsection{Compiling Mahogany}

Just run \texttt{make} from the top level Mahogany directory. If you later want
to rebuild Mahogany without rebuilding the libraries contained in the \texttt{extra/src}
directory, i.e. after changing the Mahogany source, just run \texttt{make} in
the \texttt{src} directory.


\subsubsection{To generate the documentation}

...type \texttt{make doc} from the main directory or simply \texttt{make} in
the doc directory.


\subsection{Installing Mahogany}

Just call any or all of the following make targets in the main directory:


\subsubsection{make install}

Will compile and install Mahogany and the required additional files.


\subsubsection{make install\_doc}

Will install and, if necessary, regenerate the documentation and online help
system.


\subsubsection{make install\_locale}

Will attempt to generate message catalogs for translations and install them.
Note that Mahogany is not fully translated yet.


\subsubsection{make install\_all}

Will do all of the above


\subsection{Some extra software might be required}

For regenerating the documentation you will need \texttt{doc++} for generating
the class documentation. Alternatively the Makefile system will try to use kdoc
or scandoc (included), but might fail halfway during class documentation generation.
Also, latex, latex2html, netpbm and plenty of disk space on \texttt{/tmp} are
required for generating the online docs. However, the distribution includes
a file Mdoc.tar.gz in the doc directory. As long as you leave this file there,
the Makefile will not attempt to regenerate the documentation but use this instead.


\section{Operating systems specific}


\subsection{Linux}

If compiling with a non-default compiler like \texttt{egcs}, make sure that
\texttt{/usr/include} is not in the include path, neither should \texttt{/usr/lib}
be explicitly listed. Mahogany has been compiled with \texttt{egcs} and \texttt{gcc-2.8.x}
on both, \texttt{libc5} and \texttt{glibc2} systems.


\subsection{Solaris/SunOS}

Mahogany has been successfully compiled with \texttt{gcc-2.8.0} on Solaris.
Currently it does not compile with the standard \texttt{C++} compiler.


\subsection{Microsoft Windows }

Mahogany can be compiled under Windows, using wxWindows Version 2.0 and Microsoft
Visual C++ version 4.x or later. The makefiles are included in the Mahogany
source distribution (they will build the version of Mahogany without Python
support).

\begin{enumerate}
\item Prerequisites: 

\begin{enumerate}
\item You need the Mahogany sources. You may either download them from one of the
locations mentioned in README file or use the cvs (preferred because it will
allow us to fix reported bugs and for you to test our fixes faster)
\item You need the sources of wxWindows cross-platform GUI library used by Mahogany:
get it from either Mahogany home page or directly from http://www.wxwindows.org.
\item You need a compiler capable of creating Win32 executables. Although, in principle,
any one will do, we only provide makefiles for Microsoft Visual C++ - for other
compilers you would need to create them yourself.
\item The {*}source{*} distribution of Python 1.5 if you want to build Mahogany with
Python support (if you don't know what Python is, you don't need it).
\item You need quite a lot of time: on a slow machine (average CPU, IDE disk subsystem)
the compilation might take a long time (on the order of 30 minutes - one hour
counting with wxWindows)
\end{enumerate}
\item Building wxWindows: \\
This is documented in wxWindows documentation. The makefiles and/or project
files are provided for all major compilers (including Microsoft, Borland, Symantec,
Watcom and g++ for Win32 (mingw32)). You will need almost all features of the
library, so don't edit setup.h and leave the default settings in it. The important
moment is to realize that the program should be built later with the same compile-time
options and compiler settings as the library - if they are not identical, weird
and difficult to diagnose problems will result! It is recommended (although
not mandatory) that you use project files and not the command-line makefiles
to build wxWindows if you are using Visual C++ compiler.\\
Although wxWindows itself doesn't need it, you should define an environment
variable WX with the path to the root directory of wxWindows installation (for
example: set wx=d:\textbackslash{}progs\textbackslash{}libs\textbackslash{}wxWindows). 
\item Building Mahogany with Visual C++ 6.0\\
Open the file M.dsw in MSDEV.EXE (IDE). This is the main workspace file for
Mahogany and it contains several projects (you may get warnings about some projects
being missing - don't worry): 

\begin{enumerate}
\item wxWindows project: you probably don't have it in the same place, so just ignore
the warnings and either leave it unloaded or delete it from the workspace if
you wish. You may also modify the path to the project file (wxWindows.dsp) to
point to the project file you used to build wxWindows if this is how you built
it - then you will profit from automatic dependencies between projects.
\item C-Client project: this is the library which is included in Mahogany distribution
and which must be built as well. Load the project (right click it with the mouse,
choose \char`\"{}Load\char`\"{}) and it will be done automatically the first
time you build Mahogany.
\item compface is the library for the X-Face support: follow the same instructions
as above.
\item MModule project: this project contains the loadable modules for Mahogany (\char`\"{}plug-ins\char`\"{}).
They are in experimental state right now and you may compile Mahogany without
them for now.
\item python15 project: if you have installed source distribution of Python, you should
have this file in it. When you will try loading the project, you will have a
possibility to browse for puthon15.dsp file - select the one from the Python
distribution. If you don't have Python, leave it unloaded.
\item Any other projects in the workspace shouldn't be used and should be left unloaded.
\item After loading the ones which you need (C-Client is mandatory, all the other
optional), you may start the build. It should succeed :-) If it doesn't, please
report the build log with the explanation of what happened to mahogany-developers@lists.sourceforge.net
mailing list.
\item Notice that the environment variable WX must be set before you launch MSDEV.EXE
(otherwise it won't inherit it)! 
\end{enumerate}
\item Building Mahogany with Visual C++ 5.0 \\
Edit the workspace file wxWindows.dsw with a text editor and replace the string
\char`\"{}Format Version 6.00\char`\"{} with \char`\"{}Format Version 5.00\char`\"{}.
Then proceed as above.
\item Building Mahogany with other compilers\\
It should be possible to do it, but I don't have all Windows compilers installed
on my system, so I cannot guarante it. Most probably, you might need some minor
tweaks, but almost surely no major changes will be needed.\\
The list of all Mahogany source files can be found by looking at the Makefile
files in each subdirectory of src: SRC variable there contains all the source
files in that directory. \\
Add all of the sources to the makefile/project file and also add the resource
file res/M.rc to the project, choose the same options as for wxWindows compilation
and see what happens. If it doesn't work, send you questions to the usual place
(mahogany-developers@lists.sourceforge.net). If it does work, please tell us about it as well
so that this file could be updated.
\end{enumerate}

\subsection{DEC Alpha with Digital UNIX 3.2c}

(Karsten Ballüder: It seemed at that time that the segmentation fault was caused
by a bug in wxGTK. By now this should be fixed. However, no new attempt to compile
Mahogany on DEC Unix has been made yet. However, I include Holger's report as
a help for some future attempt.)

This section has been contributed by Holger Bauer 
\texttt{\small \htmladdnormallinkfoot{bauer@itsm.uni-stuttgart.de}{bauer@itsm.uni-stuttgart.de}
\htmladdnormallinkfoot{http://www.itsm.uni-stuttgart.de/~bauer}{http://www.itsm.uni-stuttgart.de/~bauer}}{\small \par}

\begin{enumerate}
\item First I took the following arguments for configure:\\
\texttt{\small configure -{}-x-includes=/usr/X11R6/include -{}-x-libraries=/usr/X11R6/shlib
-{}-with-wxGTK -{}-without-python}~\\
{\small This would not work since} \texttt{\small make dep} {\small still tries
to find} \texttt{\small Python.h}{\small .}\\
{\small Therefore I created a dummy include file Python.h in}\texttt{\small  \dots/M/src/Python}{\small .
This helped to complete make dep. \label{item1}}{\small \par}
\item However step \ref{item1} still reported some warnings:\\
\texttt{\dots/M/extra/src/c-client/mail.h} would complain about a missing \texttt{linkage.h}
header file. Also, a missing \texttt{osdep.h} file was reported.\\
\texttt{\dots/M/extra/src/c-client/osdep.h} falsely pointed to \texttt{os\_gof.h}
but this file was missing. Therefore copied \texttt{os\_osf.h} to \texttt{os\_gof.h}.
Also, copied \texttt{os\_osf.c} to \texttt{os\_gof.c} since \texttt{osdepbas.c}
pointed to \texttt{os\_gof.c}. 
\item \texttt{cd src;}~\\
\texttt{make;}\\
This would fail since swig was not searched for by the configure script. Since
even I gave --without-python to configure make would search in /src/Python and
try to compile things there I decided to install python and swig.
\item The Python-FAQ states that python definitely has to be compiled with the DEC
cc.
\item After that I took:\\
\texttt{\small configure -{}-x-includes=/usr/X11R6/include -{}-x-libraries=/usr/X11R6/shlib
-{}-with-wxGTK}~\\
{\small The make process would then stop in}\texttt{ \dots/M/src/adb/AdbFrame.cpp}.
The line 
\texttt{AdbTreeElement {*}current = wxIsPathSeparator(strEntry{[}0u{]})\dots
}would not compile since the wxString function takes a long integer (due to
the 64 bit architecture).\\
This error might disappear if somebody adjusts the wxString library accordingly.\\
In meantime (for my local \texttt{libwx\_gtk.so}) I changed to \texttt{strEntry{[}0{]}}.
\item Then only final linkage errors occured:\\
\texttt{-lpthread} is not known, needs \texttt{-lpthreads}\\
\texttt{-lcrypt} is not known, just omit\\
\texttt{-ldmalloc} is not known, pass \texttt{-{}-without-dmalloc} to \texttt{configure}.
\item Because the link process did not give me any error I expected Mahogany to run
(at least some kind of unstable). But a core dump appeared immediately.\\
\texttt{dbx} gives to following information:\\
\texttt{(dbx) run }~\\
\texttt{signal Segmentation fault at >{*}{[}mig\_get\_reply\_port, 0x3ff83004a0c{]}
stq r26, 0(sp) }~\\
\texttt{(dbx) where }~\\
\texttt{> 0 mig\_get\_reply\_port(0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
0xffffffffffffffff, 0xffffffffffffffff) {[}0x3ff83004a0c{]} }~\\
The output of \texttt{gdb} is not very appealing:\\
\texttt{(gdb) run Starting program: /usr3/bauer/src/M/M/src/M }~\\
\texttt{Program received signal SIGSEGV, }~\\
\texttt{Segmentation fault. 0x3ff83008f5c in port\_allocate ()}~\\
\texttt{(gdb) where}~\\
\texttt{\#0 0x3ff83008f5c in port\_allocate () \#1 0x3ff83004a38 in mig\_get\_reply\_port
() }~\\
\texttt{\#2 0x3ff83008f94 in port\_allocate () \#3 0x3ff83004a38 in mig\_get\_reply\_port
()}~\\
This output runs until infinity \dots.
\end{enumerate}

\section{Configuration and Testing}

Under Unix all configuration settings are stored in \texttt{\textasciitilde{}/.M/config}
under Windows in the registry. To get an overview over all possible configuration
options and their default values, set the value \texttt{RecordDefaults=1}. Under
Unix, do this by creating a new \texttt{\textasciitilde{}/.M/config} file containig
the lines

\verb|[M]|

\verb|RecordDefaults=1|

After running Mahogany, this file will then contain all default settings. Most
of them are easily understood. Otherwise, the file \texttt{include/Mdefaults.h}
contains them all with some short comments.


\section{wxWindows}

You will need the wxWindows GUI toolkit to compile \textsl{Mahogany}.

Further Information

\begin{itemize}
\item wxWindows is available from \texttt{http://www.wxwindows.org/}
\item The GTK port of wxWindows, wxGTK, is available from: http://www.wxwindows.org/dl_gtk.htm
\end{itemize}
In order to compile this alpha release of \emph{Mahogany} you will need wxWindows
2.0 strictly later than beta 3 and so it is probably easier to take the wxWindows
sources snapshot from the \emph{Mahogany} home page.


\chapter{The Real Hackers' Guide\label{HackersGuide}}

Here we are trying to provide some information for existing and potential \textit{Mahogany}
developers.


\section{Profiles}


\subsection{Description and Motivation}

Profiles are objects storing configuration information. The purpose of using
profiles rather than using the normal wxConfig system is to have \emph{inheritance}.
Each profile relates to some real existing object in Mahogany, for example,
a mailfolder \char`\"{}MyFolder\char`\"{} would have a FolderProfile with the
same name as the folder associated with it, or the settings of the FolderView
window would read their settings from a profile with the name \char`\"{}FolderView\char`\"{}.
So each object requests a profile of well-defined name relating to the object,
to access its configuration information. So far this is not different from sections
or groups in a config file.


\subsection{Inheritance}

Whenever a profile is being created, it takes the pointer to a parent profile
as argument in the constructor. This pointer may be NULL. A profile is therefore
defined by two parameters: its name and its parent profile.

The Motivation behind this is to have the behaviour of different parts of Mahogany
change dynamically as they are being used, to make them context aware. For example,
a ComposeView used to reply to a message from a mailing list might set a different
return address to a ComposeView writing a message to a friend. Depending on
from where the ComposeView was created, it will have different parent profiles
(i.e. the profile of the folder with mailing list mails or the INBOX mailfolder
profile or the mailfolder containing mails from my friends). Also, the MessageView
window can inherit its settings from the folder that its messages are stored
in (it inherits from the FolderView which inherits from the mailfolder) and
therefore if a mailfolder is likely to contain lots of long mails (e.g. the
Mahogany developers ranting about the advantages and shortcomings of different
features), it can have a smaller typeface configured for displaying the messages
-- configured at the mailfolder level, not for a particular MessageView.


\subsection{Which Profiles are there?}

A list of all profiles can be obtained with \texttt{static kbStringList {*}ProfileBase::ListProfiles(int
type = PT\_Any)}, which will return a list of either all profiles or those having
the specified type if it is not \texttt{PT\_Any}. 


\subsection{Technical description}


\subsubsection{Initialisation}

When a profile is created, it will check whether a profile file with its name
exists. For example MyFolder.profile or ComposeView.profile. If so, the profile
will create a wxFileConfig object representing this file, otherwise this pointer
remains NULL.


\subsubsection{Reading values}

When values are read, the profile will first check its own configuration, then
try to inherit the value if it doesn't find it. It goes through the following
steps, returning a value as soon as one is found:

\begin{enumerate}
\item If its own wxFileConfig {*}m\_config is not NULL, it will try to read the value
from there (i.e. from the profile file).
\item It will look up its \textit{exact location} in the global configuration object.
The \emph{exact location} is found by asking its parent profile for its path
and appending its own name to it. I.e. the ComposeView profile called from the
main window would return an \emph{exact location} \char`\"{}M/Profiles/ComposeView\char`\"{}.
If a ComposeView window was opened from a FolderViewFrame showing a mailfolder
\char`\"{}MyFolder\char`\"{}, the path might look like this: \char`\"{}M/Folders/MyFolder/ComposeView\char`\"{},
as the profile was created with the mailfolder profile as parent. So it would
try to read the value from this section if it exists.
\item If still not found, it will go up the path in the configuration and try to find
the value there, i.e. it would try \char`\"{}M/Folders/MyFolder\char`\"{}, \char`\"{}M/Folders\char`\"{}
and \char`\"{}M\char`\"{}.
\item If not found, it will forward the request to its parent profile.
\item If not found, it will look in the global profile (==global configuration in
{[}M/Profiles{]} section).
\item otherwise return the default value
\end{enumerate}

\subsubsection{Writing values}

If the profile has its own wxFileConfig object representing a configuration
file, then values will be stored there, otherwise in the \emph{exact location}
in the global configuration.

Under no circumstances will any values be modified in the parent profiles.


\subsection{Shortcomings and things to fix}

\begin{itemize}
\item Names of profile files should be case insensitive.
\item Check and verify all locations of profile creation for sensible use of parent
profiles (i.e. inherit from mailfolder profile but not from folderviewprofile).
\item remove redundancy in lookup routines, i.e. going up in path is identical to
inheriting.
\item What is desperately needed is some more GUI support for this.I envision a profile
editor showing a list or treectrl of profiles from which to pick, combined with
a notebook of all available profile settings, whether they belong to the object
in question or not. Also it would be nice if all preferences pages had a little
boolean checkbox to activate or deactivate them, so one can explicitly say \char`\"{}don't
set this value, inherit it\char`\"{} so the value would be removed from the
profile in question.
\item Profile interface needs a function to remove a value.
\item I have to add a function to retrieve a list of all Profiles and of all Profiles
of a given type (e.g. folder profiles).
\item All access to wxConfig pointers in profiles and groups etc should be removed.
Exception: the global appplication config profile which needs to make its wxConfig
pointer available for use by the wxPersistentControl classes.(though these would
be much more useful if they took profile pointers instead, but I don't insist
for now for the sake of reusability of them).
\end{itemize}

\section{Filtering}

The following proposal is currently being implemented in source.

Filtering rules in Mahogany are described in a simple control language, interpreted
by a recursive descent parser. No yacc or flex required. I try to explain this
in some form of BNF notation:

\begin{verse}
RULE:

CONDITION EXPRESSION EXPRESSION
\begin{verse}
// if true // if false
\end{verse}
CONDITION:
\begin{verse}
( CONDITION LOGICAL\_OPERATOR CONDITION )

SIMPLE\_CONDITION
\end{verse}
EXPRESSION:
\begin{verse}
ACTION\_COMMAND

RULE
\end{verse}
SIMPLE\_CONDITION:
\begin{verse}
match\_exact(arg, flags)

match\_substring(arg, flags)

match\_regexp(arg, flags)

python\_rule(pythonfunc, args)

...
\end{verse}
ACTION\_COMMAND:
\begin{verse}
move\_to\_folder()

delete()

adjust\_score() // I'd like scoring of messages like in GNUS, useful for news

print()

forward\_to()

send\_reply()

python\_acton(pythonfunc, argc)

...
\end{verse}
\end{verse}
I believe this would be:

\begin{itemize}
\item easy to parse by the program
\item easy to understand and edit by humans as it is stored in a programming-language
like style
\item easily extensible
\item powerful enough to build rather complex expressions and rules 
\end{itemize}
A Filter object would be an abstract representation of a set of rules parsed
from a string (can contain more than one rule). It might be used by applying
it to a given Message object. A subset of the Filter functionality could be
a MatchTest object, which only knows conditions but no rules. It would return
true if its conditions all return true (includin possible logical operators
of course), false otherwise. It is used by the Filter class and could be used
by some other Mahogany functionality like e.g. a \char`\"{}vacation\char`\"{}
function which needs to check for mail-loops. Though, all this can actually
be achieved with Filters, there shouldn't really be a need for a MatchTest class. 


\section{Adressbook (ADB) classes}

Tech documentation of address book related classes.


\subsection{Introduction}


\subsubsection{terms}

\char`\"{}Address book\char`\"{} will be abbreviated as \char`\"{}ADB\char`\"{}
from now on.

The ADB classes stor and allow to retrieve/edit e-mail addresses indexed by
aliases/nicknames and other related information. It's important that ADB records
are hierarchally organized, i.e. there may be not only entries but also groups
containing other entries and groups. There may be several address books, possibly
in different formats.

FIXME: what happens if the same nick is found in several ADBs?


\subsubsection{data stored}

each ADB entry must have at least the nickname and at least one e-mail

address. The fields are now supported ({*} means required):

\begin{itemize}
\item Nick Name ({*})
\item Full Name
\item First Name
\item Family Name
\item Prefix (M/Mme/...)
\item Title
\item Organisation
\item Birthday
\item Comments (any text, multi-line)
\item EMail ({*})
\item HomePage
\item ICQ
\item Prefers HTML (boolean, if not - send text only)
\item Other EMails (list of additional e-mail addresses)
\item Home and office address
\end{itemize}

\subsubsection{current ADB files format (Mahogany version 0.xx)}

TODO

\begin{itemize}
\item Native Format using wxFileConfig
\item BBDB Version 2, support for Emacs style .bbdb files
\end{itemize}

\subsection{Classes}

Class hierarchy is pictured below. Double arrows indicate inheritance, simple
ones - functions which allow to get an object of this type. Dashed lines indicate
\char`\"{}inner working\char`\"{} of the classes, i.e. something that you can
safely ignore if you only want to use (and not modify) ADB code. All of these
classes are the interfaces - i.e. they have no data and all their methods are
public pure virtual (except for AdbManager, but it's almost like this...). All
of the classes are reference counted (they derive from MObjectRC) and thus the
usual rules of workign with ref counted objects apply (see MObject.h for details).

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ static AdbManager::Get()~~~~~~~~~~~~~~~~~~~~~ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \textbackslash{} /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AdbManager - - - - - - - -~~~~~~~~~~~~~~~~~~ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |~~~~~~~~~~~~~~~~~~~ | AdbDataProvider

~~~~~ GetEntry()~~~~~~~~~~~~~~~~~~~~~~~~ | CreateBook()~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~~~~ ----------~~~~~~~~~~~~~~~~~~~~~~~~ | <- - - - - - - - - -~~~~~~~~~~~~~~~~~~ 

~~~~ /~~~~~~~~~ \textbackslash{}~~~~~~~~~~~~~~~~~~~~~~~ |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~~ /~~~~~~~~~~~ \textbackslash{}~~~~~~~~~~~~~~~~~~~~~~ |

~~ /~~~~~~~~~~~~~ \textbackslash{}~~~~~~~~~~~~~~~~~~~~ \textbackslash{} /~~~~~~~~~~~~~~~ 

~ \textbackslash{}/~~~~~~~~~~~~~~ \textbackslash{}~~~~~~~~~~~~~~~~~~~~ -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

AdbEntry =====> AdbEntryGroup ======> AdbBook~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~ \textasciicircum{}~~~~~~~~~~~~~~~~~~ \textasciicircum{}~~~~~~~~~~~~~~ /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~ /|\textbackslash{}~~~~~~~~~~~~~~~~ /\textbackslash{}\textbackslash{}~~~~~~~~~~~~
/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~ |~~~~~~~~~~~~~~~~~~~ \textbackslash{}~~~~~~~~~~~ /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~ |~~~~~~~~~~~~~~~~~~~~ ------------~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~ | Set/GetField()~~~~~~ GetGroup()

~~ |

~~ |

~ \textbackslash{} /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

~~ -~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

entry info~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 


\subsubsection{Brief description of each class (see corresponding header for more detailed
descriptions and method prototypes):}


\paragraph{AdbManager}

There is a single object of this class in the program.

It's responsible for managing all address books used by the application. It
is created (transparently) with a call to AdbManager::Get(). It maintains a
cache of all opened ADBs for efficiency and has methods to retrieve a pointer
to AdbBook objects (which will be created using AdbDataProvider if they don't
exist yet). 


\paragraph{AdbDataProvider}

This is the class responsible for actually creating the address books objects.
Each AdbDataProvider corresponds to one particular implementation of ADB, i.e.
one provider is used for working with ADBs in Mahogany's native format, but
another one may be used to work with ADBs in some other application's format
or with remote (global wide) directory services accessible on the Internet. 

TODO expand! this is really crucial... 


\paragraph{AdbEntry }

Is just a record in an ADB. Contains all information corresponding to the given
nickname and the methods to access it.


\paragraph{AdbEntryGroup}

Is a group of AdbEntries (no kidding) and has methods to retrieve/create/delete
entries and subgroups. 


\paragraph{AdbBook}

Is just a root AdbEntryGroup which has some additional attributes such as description.

~


\subsubsection{Global functions}


\paragraph{AdbManager::Get() }

returns the pointer to global (unique) AdbManager object, creating one if it
doesn't exist. You must call Unget() exactly once for each call to Get().


\paragraph{AdbManager::Unget() }

decrements ref count of AdbManager, must be called for each (successful) call
to Get().


\paragraph{::AdbLookup(...) }

looks in the specified address book(s) for the match for the given string. If
the array of books is empty (or the pointer is NULL), all currently opened books
are searched. All pointers returned in aEntries must be Unlock()ed by the caller
(as usual).


\subsubsection{Examples}

TODO (this is probably the section Karsten is waiting the most for...) (Yes
indeed :-)


\section{MModules}

MModules are DLLs which can be loaded into Mahogany at run time. This allows
us to keep the main executable small and put all additional non-core functionality
into add-on modules. The general structure of a module is very simple and can
be understood by looking at Mdummy.cpp. It needs to contain a small number of
functions with extern ``C'' linkage which are used to obtain information from
the module and initialise it. Then, from the initialisation function, it can
do anything it wants.


\subsection{.MMD files}

Each module must be accompanied by a .mmd file with the same name as the module
itself. This file contains a few lines explaining the module's purpose and is
used to present a dialog for configuring the modules. The lines are:

\begin{itemize}
\item ``Mahogany-Module-Definition'' <- a header ID to recognise valid files
\item ``Name: Mdummy'' <- the symbolic name
\item ``Version: 0.123'' <- the version as a string
\item ``Author: John Doe <john@somewhere.org>'' <- the author
\item ``'' <- an empty line
\item ``multiple lines of text describing the module's functionality''
\end{itemize}

\section{Multi-Threading, ASMailFolder and Locking}

\end{document}
