

M - Introduction

Karsten Ballüder (Ballueder@usa.net, http://Ballueder.home.ml.org)

Abstract

This is a first attempt at some form of documentation for M. At present
there is no proper help system, so we haven't gotten around to write
any real documentation yet. M is beginning to get usable and so this
should help you to set it up and start using it. It also contains
some information on what we plan for the future.

Abstract

Some more up to date information can be found in the README files.

\tableofcontents

1 Introduction 

M is intended to be a powerful mail and news client. The following
points were significant in the development of it 

* it should have an easy to use graphical user interface 

* it should be as powerful and extensible as possible, being able to
  replace awkward tools such as procmail, thus it must have a built
  in scripting language 

* it should have full support for a wide range of standards, including
  full and intuitive MIME support 

* it should interact with other programs intuitively, sending MIME
  mails should be as easy as dropping files from a file manager in
  the message window

* it should run on a wide variety of systems 

1.1 Current Status

As of the time of writing this document, M is under active development.
A first public alpha release has been made.

1.2 Features already implemented

Many of the features planned are already available and new ones are
added all the time. This list will change constantly.

* Cross-platform. M compiles on a variety of Unix systems and on Microsoft
  Windows. Use one mail client, no matter what system you use.

* Based on the c-client library from the University of Washington,
  therefore full access to a wide range of protocols and file formats,
  including SMTP, MAP, POP3, NNTP and several mailbox formats. This
  is the same library as used by PINE, so it is well tested and reliable.

* Wide (extreme?) user configurability. Whatever makes sense to override
  or change, can be changed by the user. Configuration supports several
  configuration files on Unix, with special administrator support
  for making entries immutable, and the registry on Windows.

* Scriptable and extendable. M includes an embedded Python interpreter
  with full access to its object hierarchy. Write object-oriented
  scripts to extend and control M.

* Easy MIME support. Text and other content can be freely mixed and
  different filetypes are represented by icons.

* Inline displaying of images.

* Clickable URLs.

* XFace support.

* Multiple mail folders.

* Powerful address database and contact manager with automated collection
  of data from mails.

* Printing of nicely formatted messages.

* Full internationalisation support, M speaks multiple languages.

1.3 Features still missing

This is a list of features on our TODO list that we are currently working
on.

* Full Drag and Drop interaction with filemanagers of Windows and Gnome
  (will be added real soon, easy).

* Easy to use filtering system for mails.

* Support for V-cards.

* Nested mail folder hierarchy.

* Spam-Ex spam fighting/auto-complaint function.

* Richt-text editing and HTML mail support

* Support for PGP and GNU Privacy Guard to encrypt mails.

* Threading of messages and proper usenet news support.

* Compression of mail folders.

* Delay-Folder to keep mails and re-present them at a later date.

* Context sensitive help system (HTML based).

* Translations to German, French and Italian.

* Wide character (Unicode) support and other character sets.

* Import, export and synchronisation with other programs' address databases.

* Voice mail.

* More Python support through wxPython.

* Support for Drag and Drop interaction with KDE, once that wxQt is
  available.

* CORBA support, possible cooperation with PINN project.

* Most of the GUI issues will disappear as wxGTK evolves, which is
  still in ALPHA stage und under heavy development itself.

1.4 Help Needed

As you can see, we have big plans for M. To achieve all this, we need
some help. Areas where we would use some help are

* The Python support could be improved (We are absolute beginners in
  Python, so help is very welcome.). 

* Also, if you want to add support for further mail protocols, please
  get in touch with us. 

* The wxQt project, a port of wxWindows to the Qt toolkit, will also
  be happy for any help. We are not directly involved in this, but
  being involved with wxWindows, we are happy to support that port.

* If you have access to other systems apart from Linux/Solaris/Windows,
  you are very welcome to help us port M to those platforms, or to
  other hardware than Intel.

* If you have anything that you would like to change, improve or add
  to M, please get in touch with us. We want M to be the best and
  if you miss a feature, we can always add it.

2 Compilation notes

These compilation notes are probably a bit outdated. The best start
is to use the --help option of configure to see which options it supports.

2.1 Operating systems specific

2.1.1 Linux

If compiling with a non-default compiler like egcs, make sure that
/usr/include is not in the include path, neither should /usr/lib be
explicitly listed. M has been compiled with egcs and gcc-2.8.x on
both, libc5 and glibc2 systems.

2.1.2 Solaris/SunOS

M has been successfully compiled with gcc-2.8.0 on Solaris. Currently
it does not compile with the standard C++ compiler.

2.1.3 Microsoft Windows 

M can be compiled under Windows, using wxWindows Version 2.0 and Microsoft
Visual C++.

2.2 Other issues/libraries

2.2.1 C-client library

A copy of the c-client library is required and is included with the
M sources. It is available separately from ftp://ftp.cac.washington.edu/imap/imap.tar.Z.
Before compiling it with M, you need to patch it. 

The following information only applies if you use a separate c-client
library source:

Unpack the archive in the main M directory, then change into the IMAP
directory and try a first make, i.e. a make linux or make gso. This
will create a source directory c-client with lots of links to other
source files in it. 

Then install the rfc822.c.patch on c-client's rfc822.c file from the
extra/patches subdirectory of M and run the c-client++ script from
the extra/scripts subdirectory in the c-client source directory, which
will rename variables in the c-client code to make it C++ compliant.
If there is any problem, it helps to edit the CCTYPE or CFLAGS files.
After creation of the library c-client.a, all object files can be
deleted.

2.2.2 Python 

configure looks for Python in /usr/local/src/Python-1.5. If your Python
is installed in a different location, change the variable PYTHON_PATH
at the beginning of configure. 

2.2.3 XFaces 

If you have the compface library and header file installed, it will
be used to support XFaces. To install it, unpack it under the main
M directory and apply the patch compface.patch from the extra/patches
directory to its sources. Compile it and link its header and library
to the extra/include and extra/lib directories.

3 Installation

3.1 Configuration and Compilation

Follow these steps: 

1. Edit configure so it will find your installation of Python. If you
  do not have it, just skip this step.

2. Run configure to create the include/config.h and makeopts file. It
  may be required to edit makeopts by hand.

3. Run make dep and cd src and make to compile and link M. Compiling
  some of the source files will take an enormous amount of memory,
  so make sure you have enough virtual memory. 

4 Configuration and Testing

4.1 Configuration settings

Under Unix all configuration settings are stored in ~/.M/config under
Windows in the registry. To get an overview over all possible configuration
options and their default values, set the value RecordDefaults=1.
Under Unix, do this by creating a new ~/.M/config file containig the
lines





After running M, this file will then contain all default settings.
Most of them are easily understood. Otherwise, the file include/Mdefaults.h
contains them all with some short comments.

4.2 Reading mail/news

To read news, you need to open a folder. The default incoming mail
folder has the name INBOX. Any other name will be interpreted as a
filename relative to the folder directory. 

4.3 Writing mail/news

Before being able to send mail, you need to configure the MailHost
setting to tell it where to send the mail. 

5 Configuration Settings

Configuration settings are stored in configuration files under Unix
and in the Registry under Windows. There are two types of configuration
entries, global settings and profile settings. Global settings are
all top-level configuration entries.

To get a list of all default entries under Unix, create an empty configuration
file $HOME/.M/config with the content

[M]

RecordDefaults=1

5.1 Profile Settings

M uses a system of inheriting configurations for most of its settings.
Each profile is represented by one entry in the configuration hierarchy.
For example, the settings for a standard message window (MessageView)
are stored in an entry [M/Profiles/MessageView].

As the message window is opened from within a mail folder, it also
inherits the profile from the mail folder, which might be [M/Profiles/INBOX]or
[M/Profiles/ReallyInterestingMail], depending on which folder you
are using at the moment. The mail folder setup itself might inherit
from some other profile and eventually all profiles inherit from [M/Profiles].

6 Scripting and Python integration

6.1 Introduction

M uses Python as an embedded scripting language. A large number of
user definable callback functions are available. Scripts have access
most objects living in M.

6.2 Initialisation 

At startup, M will load a file called Minit.py and call the Minit()
function defined in there, without any arguments.

6.3 Callback Functions (Hooks)

There are a large number of callbacks available which will be called
from different places withing M. These are documented in Mcallbacks.h.
All of these callbacks are called with at least two arguments:

1. The name of the hook for which the function got called, e.g. FolderOpenHook

2. A pointer to the object from which it was called. E.g. for FolderOpenHook,
  this would be a pointer to a MailFolder object. This object does
  not carry a useable type with it and needs to be converted in the
  callback, e.g. if the argument is called arg and the object is a
  MailFolder, the object must either be used as MailFolder.MailFolder(arg)
  or be converted as mf = MailFolder.MailFolder(arg). 

3. Some callbacks have a third argument. This is either a single value
  or a tuple holding several values.

6.4 Namespaces

To avoid repeatedly typing in the name of the module (MailFolder in
this case), it can be imported into the global namespace with ``from~MailFolder~import~*''.
By default modules are not imported into the global namespace and
must be explicitly named.

6.5 List of Callbacks

+-----------------------+-------------+----------------------------+---------------------------------------+--------------------------------------------+
|Callback Name          | Object Type | Additional Arguments/Types | Return Value                          | Documentaion                               |
+-----------------------+-------------+----------------------------+---------------------------------------+--------------------------------------------+
+-----------------------+-------------+----------------------------+---------------------------------------+--------------------------------------------+
|FolderOpenHook         | MailFolder  |                            | void                                  | Called after a folder has been opened.     |
+-----------------------+-------------+----------------------------+---------------------------------------+--------------------------------------------+
|FolderUpdateHook       | MailFolder  |                            | void                                  | Called after a folder has been updated.    |
+-----------------------+-------------+----------------------------+---------------------------------------+--------------------------------------------+
|FolderSetMessageFlag   | MailFolder  | (long) index of message    | 1 if changing flags is ok,0 otherwise | Called before changing flags for a mesage. |
|                       |             | (string)name of flag       |                                       |                                            |
+-----------------------+-------------+----------------------------+---------------------------------------+--------------------------------------------+
|FolderClearMessageFlag | MailFolder  | (long) index of message    | 1 if changing flags is ok,0 otherwise | Called before changing flags for a mesage. |
|                       |             | (string) name of flag      |                                       |                                            |
+-----------------------+-------------+----------------------------+---------------------------------------+--------------------------------------------+
|FolderExpungeHook      | MailFolder  |                            | 1 to expunge, 0 to abort              | Called before expunging messages.          |
+-----------------------+-------------+----------------------------+---------------------------------------+--------------------------------------------+


7 Further Information

* You can download the latest version of M from http://Ballueder.home.ml.org/M/ 

* You can also get up-to-date information on M from the M WWW Page:
  http://Ballueder.home.ml.org/M/

* wxWindows is available fromhttp://web.ukonline.co.uk/julian.smart/

* The GTK port of wxWindows, wxGTK, is available from: http://www.freiburg.linux.de/~wxxt/

8 FAQ
