                           Tech documentation of address book
                                    related classes.

$Id$

0. Introduction

   a) terms
   
   "Address book" will be abbreviated as "ADB" from now on.
   
   The ADB classes stor and allow to retrieve/edit e-mail addresses indexed by
   aliases/nicknames and other related information. It's important that ADB
   records are hierarchally organized, i.e. there may be not only entries but
   also groups containing other entries and groups.
   
   There may be several address books, possibly in different formats.
   FIXME what happens if the same nick is found in several ADBs?

   b) data stored
   
   each ADB entry must have at least the nickname and at least one e-mail
   address. The fields are now supported (* means required):

   Nick Name         (*)
   Full Name
   First Name
   Family Name
   Prefix            (M/Mme/...)
   Title
   Organisation
   Birthday
   Comments          (any text, multi-line)
   
   EMail             (*)
   HomePage
   ICQ
   Prefers HTML      (boolean, if not - send text only)
   Other EMails      (list of additional e-mail addresses)
   
   Home and office address

   c) current ADB files format (M version 0.xx)

   TODO

1. Classes

   Class hierarchy is pictured below. Double arrows indicate inheritance,
   simple ones - functions which allow to get an object of this type. Dashed
   lines indicate "inner working" of the classes, i.e. something that you can
   safely ignore if you only want to use (and not modify) ADB code. All of
   these classes are the interfaces - i.e. they have no data and all their
   methods are public pure virtual (except for AdbManager, but it's almost
   like this...). All of the classes are reference counted (they derive from
   MObjectRC) and thus the usual rules of workign with ref counted objects
   apply (see MObject.h for details)
                                                                               
   
                               static AdbManager::Get()                      
                                         |                                        
                                         |                                        
                                         |                                        
                                        \ /                                       
                                         -                                        
                                     AdbManager - - - - - - - -                   
                                         |                                        
                                         |                    | AdbDataProvider
      GetEntry()                         | CreateBook()                           
      ----------                         | <- - - - - - - - - -                   
     /          \                        |                                        
    /            \                       |
   /              \                     \ /                
  \/               \                     -                                        
AdbEntry =====> AdbEntryGroup ======> AdbBook                                      
   ^                   ^               /                                    
  /|\                 /\\             /                                     
   |                    \            /                                      
   |                     ------------                                       
   | Set/GetField()       GetGroup()
   |
   |
  \ /                                                                       
   -                                                                        
entry info                                                                            

   Brief description of each class (see corresponding header for more detailed
   descriptions and method prototypes):
   
   AdbManager        There is a unique object of this class in the program.
                     It's responsible for managing all address books used by
                     the application. It is created (transparently) with a
                     call to AdbManager::Get(). It maintains a cache of all
                     opened ADBs for efficiency and has methods to retrieve
                     a pointer to AdbBook objects (which will be created using
                     AdbDataProvider if they don't exist yet).
                     
   AdbDataProvider   This is the class responsible for actually creating the
                     address books objects. Each AdbDataProvider corresponds
                     to one particular implementation of ADB, i.e. one
                     provider is used for working with ADBs in M's native
                     format, but another one may be used to work with ADBs in
                     some other application's format or with remote (global
                     wide) directory services accessible on the Internet.
                     TODO expand! this is really crucial...
                     
   AdbEntry          Is just a record in an ADB. Contains all information
                     corresponding to the given nickname and the methods to
                     access it.
                     
   AdbEntryGroup     Is a group of AdbEntries (no kidding) and has methods
                     to retrieve/create/delete entries and subgroups.
                     
   AdbBook           Is just a root AdbEntryGroup which has some additional
                     attributes such as description.

2. Global functions

   AdbManager::Get() returns the pointer to global (unique) AdbManager object,
                     creating one if it doesn't exist. You must call Unget()
                     exactly once for each call to Get().
   
   AdbManager::Unget() decrements ref count of AdbManager, must be called for
                       each (successful) call to Get().

   ::AdbLookup(...) looks in the specified address book(s) for the match for
                    the given string. If the array of books is empty 
                    (or the pointer is NULL), all currently opened books are
                    searched. All pointers returned in aEntries must be
                    Unlock()ed by the caller (as usual).

3. Examples

TODO (this is probably the section Karsten is waiting the most for...)
